
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000036aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000cc  00800060  000036aa  0000373e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080012c  0080012c  0000380a  2**0
                  ALLOC
  3 .stab         00002eb0  00000000  00000000  0000380c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011c4  00000000  00000000  000066bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007880  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000079c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007b30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009779  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a664  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b414  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b574  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b801  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bfcf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 c7 18 	jmp	0x318e	; 0x318e <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 94 18 	jmp	0x3128	; 0x3128 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ea       	ldi	r30, 0xAA	; 170
      68:	f6 e3       	ldi	r31, 0x36	; 54
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 32       	cpi	r26, 0x2C	; 44
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e2       	ldi	r26, 0x2C	; 44
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 33       	cpi	r26, 0x32	; 50
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c8 05 	call	0xb90	; 0xb90 <main>
      8a:	0c 94 53 1b 	jmp	0x36a6	; 0x36a6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d7 1a 	jmp	0x35ae	; 0x35ae <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e1       	ldi	r26, 0x17	; 23
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f3 1a 	jmp	0x35e6	; 0x35e6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e3 1a 	jmp	0x35c6	; 0x35c6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ff 1a 	jmp	0x35fe	; 0x35fe <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e3 1a 	jmp	0x35c6	; 0x35c6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ff 1a 	jmp	0x35fe	; 0x35fe <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d7 1a 	jmp	0x35ae	; 0x35ae <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 e1       	ldi	r24, 0x17	; 23
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f3 1a 	jmp	0x35e6	; 0x35e6 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e3 1a 	jmp	0x35c6	; 0x35c6 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ff 1a 	jmp	0x35fe	; 0x35fe <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 e3 1a 	jmp	0x35c6	; 0x35c6 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ff 1a 	jmp	0x35fe	; 0x35fe <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 e3 1a 	jmp	0x35c6	; 0x35c6 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ff 1a 	jmp	0x35fe	; 0x35fe <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 e7 1a 	jmp	0x35ce	; 0x35ce <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 03 1b 	jmp	0x3606	; 0x3606 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DcMotorControl>:
uint8 flag_2 = 0;
uint8 flag_3 = 0;

/*The call back function called by the timer ISR*/
void DcMotorControl(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	static uint8 tick = 0;
	tick++;
     b4e:	80 91 2f 01 	lds	r24, 0x012F
     b52:	8f 5f       	subi	r24, 0xFF	; 255
     b54:	80 93 2f 01 	sts	0x012F, r24

	if(tick == 5)
     b58:	80 91 2f 01 	lds	r24, 0x012F
     b5c:	85 30       	cpi	r24, 0x05	; 5
     b5e:	21 f4       	brne	.+8      	; 0xb68 <DcMotorControl+0x22>
	{
		flag_1 = 1;
     b60:	81 e0       	ldi	r24, 0x01	; 1
     b62:	80 93 2c 01 	sts	0x012C, r24
     b66:	11 c0       	rjmp	.+34     	; 0xb8a <DcMotorControl+0x44>
	}
	else if(tick == 6)
     b68:	80 91 2f 01 	lds	r24, 0x012F
     b6c:	86 30       	cpi	r24, 0x06	; 6
     b6e:	21 f4       	brne	.+8      	; 0xb78 <DcMotorControl+0x32>
	{
		flag_2 = 1;
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	80 93 2d 01 	sts	0x012D, r24
     b76:	09 c0       	rjmp	.+18     	; 0xb8a <DcMotorControl+0x44>
	}
	else if(tick == 11)
     b78:	80 91 2f 01 	lds	r24, 0x012F
     b7c:	8b 30       	cpi	r24, 0x0B	; 11
     b7e:	29 f4       	brne	.+10     	; 0xb8a <DcMotorControl+0x44>
	{
		flag_3 = 1;
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	80 93 2e 01 	sts	0x012E, r24
		tick = 0;
     b86:	10 92 2f 01 	sts	0x012F, r1
	}
}
     b8a:	cf 91       	pop	r28
     b8c:	df 91       	pop	r29
     b8e:	08 95       	ret

00000b90 <main>:

/*******************************************************************************************************************************************************************/

int main(void)
{
     b90:	0f 93       	push	r16
     b92:	1f 93       	push	r17
     b94:	df 93       	push	r29
     b96:	cf 93       	push	r28
     b98:	cd b7       	in	r28, 0x3d	; 61
     b9a:	de b7       	in	r29, 0x3e	; 62
     b9c:	c4 5b       	subi	r28, 0xB4	; 180
     b9e:	d0 40       	sbci	r29, 0x00	; 0
     ba0:	0f b6       	in	r0, 0x3f	; 63
     ba2:	f8 94       	cli
     ba4:	de bf       	out	0x3e, r29	; 62
     ba6:	0f be       	out	0x3f, r0	; 63
     ba8:	cd bf       	out	0x3d, r28	; 61
	uint8 pass1[ARR_SIZE+1];
	uint8 pass2[ARR_SIZE+1];

	uint8 keyButton;
	uint8 receivedByte;
	uint8 trials = 0;
     baa:	fe 01       	movw	r30, r28
     bac:	e3 57       	subi	r30, 0x73	; 115
     bae:	ff 4f       	sbci	r31, 0xFF	; 255
     bb0:	10 82       	st	Z, r1


	/*UART configuration structure*/
	Uart_ConfigType s_UartConfig = { _8_bit,DISABLE,ONE_STOP_BIT,9600 };
     bb2:	ce 01       	movw	r24, r28
     bb4:	82 56       	subi	r24, 0x62	; 98
     bb6:	9f 4f       	sbci	r25, 0xFF	; 255
     bb8:	c5 55       	subi	r28, 0x55	; 85
     bba:	df 4f       	sbci	r29, 0xFF	; 255
     bbc:	99 83       	std	Y+1, r25	; 0x01
     bbe:	88 83       	st	Y, r24
     bc0:	cb 5a       	subi	r28, 0xAB	; 171
     bc2:	d0 40       	sbci	r29, 0x00	; 0
     bc4:	85 e2       	ldi	r24, 0x25	; 37
     bc6:	91 e0       	ldi	r25, 0x01	; 1
     bc8:	c3 55       	subi	r28, 0x53	; 83
     bca:	df 4f       	sbci	r29, 0xFF	; 255
     bcc:	99 83       	std	Y+1, r25	; 0x01
     bce:	88 83       	st	Y, r24
     bd0:	cd 5a       	subi	r28, 0xAD	; 173
     bd2:	d0 40       	sbci	r29, 0x00	; 0
     bd4:	97 e0       	ldi	r25, 0x07	; 7
     bd6:	c1 55       	subi	r28, 0x51	; 81
     bd8:	df 4f       	sbci	r29, 0xFF	; 255
     bda:	98 83       	st	Y, r25
     bdc:	cf 5a       	subi	r28, 0xAF	; 175
     bde:	d0 40       	sbci	r29, 0x00	; 0
     be0:	c3 55       	subi	r28, 0x53	; 83
     be2:	df 4f       	sbci	r29, 0xFF	; 255
     be4:	e8 81       	ld	r30, Y
     be6:	f9 81       	ldd	r31, Y+1	; 0x01
     be8:	cd 5a       	subi	r28, 0xAD	; 173
     bea:	d0 40       	sbci	r29, 0x00	; 0
     bec:	00 80       	ld	r0, Z
     bee:	c3 55       	subi	r28, 0x53	; 83
     bf0:	df 4f       	sbci	r29, 0xFF	; 255
     bf2:	88 81       	ld	r24, Y
     bf4:	99 81       	ldd	r25, Y+1	; 0x01
     bf6:	cd 5a       	subi	r28, 0xAD	; 173
     bf8:	d0 40       	sbci	r29, 0x00	; 0
     bfa:	01 96       	adiw	r24, 0x01	; 1
     bfc:	c3 55       	subi	r28, 0x53	; 83
     bfe:	df 4f       	sbci	r29, 0xFF	; 255
     c00:	99 83       	std	Y+1, r25	; 0x01
     c02:	88 83       	st	Y, r24
     c04:	cd 5a       	subi	r28, 0xAD	; 173
     c06:	d0 40       	sbci	r29, 0x00	; 0
     c08:	c5 55       	subi	r28, 0x55	; 85
     c0a:	df 4f       	sbci	r29, 0xFF	; 255
     c0c:	e8 81       	ld	r30, Y
     c0e:	f9 81       	ldd	r31, Y+1	; 0x01
     c10:	cb 5a       	subi	r28, 0xAB	; 171
     c12:	d0 40       	sbci	r29, 0x00	; 0
     c14:	00 82       	st	Z, r0
     c16:	c5 55       	subi	r28, 0x55	; 85
     c18:	df 4f       	sbci	r29, 0xFF	; 255
     c1a:	88 81       	ld	r24, Y
     c1c:	99 81       	ldd	r25, Y+1	; 0x01
     c1e:	cb 5a       	subi	r28, 0xAB	; 171
     c20:	d0 40       	sbci	r29, 0x00	; 0
     c22:	01 96       	adiw	r24, 0x01	; 1
     c24:	c5 55       	subi	r28, 0x55	; 85
     c26:	df 4f       	sbci	r29, 0xFF	; 255
     c28:	99 83       	std	Y+1, r25	; 0x01
     c2a:	88 83       	st	Y, r24
     c2c:	cb 5a       	subi	r28, 0xAB	; 171
     c2e:	d0 40       	sbci	r29, 0x00	; 0
     c30:	c1 55       	subi	r28, 0x51	; 81
     c32:	df 4f       	sbci	r29, 0xFF	; 255
     c34:	98 81       	ld	r25, Y
     c36:	cf 5a       	subi	r28, 0xAF	; 175
     c38:	d0 40       	sbci	r29, 0x00	; 0
     c3a:	91 50       	subi	r25, 0x01	; 1
     c3c:	c1 55       	subi	r28, 0x51	; 81
     c3e:	df 4f       	sbci	r29, 0xFF	; 255
     c40:	98 83       	st	Y, r25
     c42:	cf 5a       	subi	r28, 0xAF	; 175
     c44:	d0 40       	sbci	r29, 0x00	; 0
     c46:	c1 55       	subi	r28, 0x51	; 81
     c48:	df 4f       	sbci	r29, 0xFF	; 255
     c4a:	e8 81       	ld	r30, Y
     c4c:	cf 5a       	subi	r28, 0xAF	; 175
     c4e:	d0 40       	sbci	r29, 0x00	; 0
     c50:	ee 23       	and	r30, r30
     c52:	31 f6       	brne	.-116    	; 0xbe0 <main+0x50>

	/*Timer1 configuration structure*/
	Timer1_ConfigType s_Timer1Config = { 0,2929,F_CPU_1024,COMPARE_MODE};
     c54:	ce 01       	movw	r24, r28
     c56:	8b 55       	subi	r24, 0x5B	; 91
     c58:	9f 4f       	sbci	r25, 0xFF	; 255
     c5a:	c0 55       	subi	r28, 0x50	; 80
     c5c:	df 4f       	sbci	r29, 0xFF	; 255
     c5e:	99 83       	std	Y+1, r25	; 0x01
     c60:	88 83       	st	Y, r24
     c62:	c0 5b       	subi	r28, 0xB0	; 176
     c64:	d0 40       	sbci	r29, 0x00	; 0
     c66:	8f e1       	ldi	r24, 0x1F	; 31
     c68:	91 e0       	ldi	r25, 0x01	; 1
     c6a:	ce 54       	subi	r28, 0x4E	; 78
     c6c:	df 4f       	sbci	r29, 0xFF	; 255
     c6e:	99 83       	std	Y+1, r25	; 0x01
     c70:	88 83       	st	Y, r24
     c72:	c2 5b       	subi	r28, 0xB2	; 178
     c74:	d0 40       	sbci	r29, 0x00	; 0
     c76:	96 e0       	ldi	r25, 0x06	; 6
     c78:	cc 54       	subi	r28, 0x4C	; 76
     c7a:	df 4f       	sbci	r29, 0xFF	; 255
     c7c:	98 83       	st	Y, r25
     c7e:	c4 5b       	subi	r28, 0xB4	; 180
     c80:	d0 40       	sbci	r29, 0x00	; 0
     c82:	ce 54       	subi	r28, 0x4E	; 78
     c84:	df 4f       	sbci	r29, 0xFF	; 255
     c86:	e8 81       	ld	r30, Y
     c88:	f9 81       	ldd	r31, Y+1	; 0x01
     c8a:	c2 5b       	subi	r28, 0xB2	; 178
     c8c:	d0 40       	sbci	r29, 0x00	; 0
     c8e:	00 80       	ld	r0, Z
     c90:	ce 54       	subi	r28, 0x4E	; 78
     c92:	df 4f       	sbci	r29, 0xFF	; 255
     c94:	88 81       	ld	r24, Y
     c96:	99 81       	ldd	r25, Y+1	; 0x01
     c98:	c2 5b       	subi	r28, 0xB2	; 178
     c9a:	d0 40       	sbci	r29, 0x00	; 0
     c9c:	01 96       	adiw	r24, 0x01	; 1
     c9e:	ce 54       	subi	r28, 0x4E	; 78
     ca0:	df 4f       	sbci	r29, 0xFF	; 255
     ca2:	99 83       	std	Y+1, r25	; 0x01
     ca4:	88 83       	st	Y, r24
     ca6:	c2 5b       	subi	r28, 0xB2	; 178
     ca8:	d0 40       	sbci	r29, 0x00	; 0
     caa:	c0 55       	subi	r28, 0x50	; 80
     cac:	df 4f       	sbci	r29, 0xFF	; 255
     cae:	e8 81       	ld	r30, Y
     cb0:	f9 81       	ldd	r31, Y+1	; 0x01
     cb2:	c0 5b       	subi	r28, 0xB0	; 176
     cb4:	d0 40       	sbci	r29, 0x00	; 0
     cb6:	00 82       	st	Z, r0
     cb8:	c0 55       	subi	r28, 0x50	; 80
     cba:	df 4f       	sbci	r29, 0xFF	; 255
     cbc:	88 81       	ld	r24, Y
     cbe:	99 81       	ldd	r25, Y+1	; 0x01
     cc0:	c0 5b       	subi	r28, 0xB0	; 176
     cc2:	d0 40       	sbci	r29, 0x00	; 0
     cc4:	01 96       	adiw	r24, 0x01	; 1
     cc6:	c0 55       	subi	r28, 0x50	; 80
     cc8:	df 4f       	sbci	r29, 0xFF	; 255
     cca:	99 83       	std	Y+1, r25	; 0x01
     ccc:	88 83       	st	Y, r24
     cce:	c0 5b       	subi	r28, 0xB0	; 176
     cd0:	d0 40       	sbci	r29, 0x00	; 0
     cd2:	cc 54       	subi	r28, 0x4C	; 76
     cd4:	df 4f       	sbci	r29, 0xFF	; 255
     cd6:	98 81       	ld	r25, Y
     cd8:	c4 5b       	subi	r28, 0xB4	; 180
     cda:	d0 40       	sbci	r29, 0x00	; 0
     cdc:	91 50       	subi	r25, 0x01	; 1
     cde:	cc 54       	subi	r28, 0x4C	; 76
     ce0:	df 4f       	sbci	r29, 0xFF	; 255
     ce2:	98 83       	st	Y, r25
     ce4:	c4 5b       	subi	r28, 0xB4	; 180
     ce6:	d0 40       	sbci	r29, 0x00	; 0
     ce8:	cc 54       	subi	r28, 0x4C	; 76
     cea:	df 4f       	sbci	r29, 0xFF	; 255
     cec:	e8 81       	ld	r30, Y
     cee:	c4 5b       	subi	r28, 0xB4	; 180
     cf0:	d0 40       	sbci	r29, 0x00	; 0
     cf2:	ee 23       	and	r30, r30
     cf4:	31 f6       	brne	.-116    	; 0xc82 <main+0xf2>

	UART_init(&s_UartConfig);
     cf6:	ce 01       	movw	r24, r28
     cf8:	82 56       	subi	r24, 0x62	; 98
     cfa:	9f 4f       	sbci	r25, 0xFF	; 255
     cfc:	0e 94 8f 19 	call	0x331e	; 0x331e <UART_init>
	LCD_init();
     d00:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <LCD_init>



	//SREG |= (1<<7);
	sei();
     d04:	78 94       	sei
	while(1)
	{
		do
		{
			/*Ask the user to write the required password*/
			LCD_clearScreen();
     d06:	0e 94 8a 18 	call	0x3114	; 0x3114 <LCD_clearScreen>
			LCD_displayString("PLZ Enter Pass:");
     d0a:	80 e6       	ldi	r24, 0x60	; 96
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_displayString>
			LCD_moveCursor(1,0);  /*Set the display screen before calling the function*/
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	60 e0       	ldi	r22, 0x00	; 0
     d16:	0e 94 04 18 	call	0x3008	; 0x3008 <LCD_moveCursor>
			get_password(pass1);  /*Get the first password*/
     d1a:	ce 01       	movw	r24, r28
     d1c:	80 57       	subi	r24, 0x70	; 112
     d1e:	9f 4f       	sbci	r25, 0xFF	; 255
     d20:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <get_password>

			/*Ask the user to re-enter the same password*/
			LCD_clearScreen();
     d24:	0e 94 8a 18 	call	0x3114	; 0x3114 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"PLZ Re-Enter the");
     d28:	20 e7       	ldi	r18, 0x70	; 112
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	80 e0       	ldi	r24, 0x00	; 0
     d2e:	60 e0       	ldi	r22, 0x00	; 0
     d30:	a9 01       	movw	r20, r18
     d32:	0e 94 46 18 	call	0x308c	; 0x308c <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1,0,"Same Pass:");
     d36:	21 e8       	ldi	r18, 0x81	; 129
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	60 e0       	ldi	r22, 0x00	; 0
     d3e:	a9 01       	movw	r20, r18
     d40:	0e 94 46 18 	call	0x308c	; 0x308c <LCD_displayStringRowColumn>
			LCD_moveCursor(1,10);  /*Set the display screen before calling the function*/
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	6a e0       	ldi	r22, 0x0A	; 10
     d48:	0e 94 04 18 	call	0x3008	; 0x3008 <LCD_moveCursor>
			get_password(pass2);  /*Get the second password*/
     d4c:	ce 01       	movw	r24, r28
     d4e:	89 56       	subi	r24, 0x69	; 105
     d50:	9f 4f       	sbci	r25, 0xFF	; 255
     d52:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <get_password>

			/*Call the function to check if two passwords are matching or not*/
			receivedByte = check_createdPassword(pass1,pass2);
     d56:	ce 01       	movw	r24, r28
     d58:	80 57       	subi	r24, 0x70	; 112
     d5a:	9f 4f       	sbci	r25, 0xFF	; 255
     d5c:	9e 01       	movw	r18, r28
     d5e:	29 56       	subi	r18, 0x69	; 105
     d60:	3f 4f       	sbci	r19, 0xFF	; 255
     d62:	b9 01       	movw	r22, r18
     d64:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <check_createdPassword>
     d68:	fe 01       	movw	r30, r28
     d6a:	e2 57       	subi	r30, 0x72	; 114
     d6c:	ff 4f       	sbci	r31, 0xFF	; 255
     d6e:	80 83       	st	Z, r24
     d70:	fe 01       	movw	r30, r28
     d72:	e7 57       	subi	r30, 0x77	; 119
     d74:	ff 4f       	sbci	r31, 0xFF	; 255
     d76:	80 e0       	ldi	r24, 0x00	; 0
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	a8 e4       	ldi	r26, 0x48	; 72
     d7c:	b2 e4       	ldi	r27, 0x42	; 66
     d7e:	80 83       	st	Z, r24
     d80:	91 83       	std	Z+1, r25	; 0x01
     d82:	a2 83       	std	Z+2, r26	; 0x02
     d84:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d86:	8e 01       	movw	r16, r28
     d88:	0b 57       	subi	r16, 0x7B	; 123
     d8a:	1f 4f       	sbci	r17, 0xFF	; 255
     d8c:	fe 01       	movw	r30, r28
     d8e:	e7 57       	subi	r30, 0x77	; 119
     d90:	ff 4f       	sbci	r31, 0xFF	; 255
     d92:	60 81       	ld	r22, Z
     d94:	71 81       	ldd	r23, Z+1	; 0x01
     d96:	82 81       	ldd	r24, Z+2	; 0x02
     d98:	93 81       	ldd	r25, Z+3	; 0x03
     d9a:	20 e0       	ldi	r18, 0x00	; 0
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	4a e7       	ldi	r20, 0x7A	; 122
     da0:	53 e4       	ldi	r21, 0x43	; 67
     da2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     da6:	dc 01       	movw	r26, r24
     da8:	cb 01       	movw	r24, r22
     daa:	f8 01       	movw	r30, r16
     dac:	80 83       	st	Z, r24
     dae:	91 83       	std	Z+1, r25	; 0x01
     db0:	a2 83       	std	Z+2, r26	; 0x02
     db2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     db4:	fe 01       	movw	r30, r28
     db6:	eb 57       	subi	r30, 0x7B	; 123
     db8:	ff 4f       	sbci	r31, 0xFF	; 255
     dba:	60 81       	ld	r22, Z
     dbc:	71 81       	ldd	r23, Z+1	; 0x01
     dbe:	82 81       	ldd	r24, Z+2	; 0x02
     dc0:	93 81       	ldd	r25, Z+3	; 0x03
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	40 e8       	ldi	r20, 0x80	; 128
     dc8:	5f e3       	ldi	r21, 0x3F	; 63
     dca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dce:	88 23       	and	r24, r24
     dd0:	44 f4       	brge	.+16     	; 0xde2 <main+0x252>
		__ticks = 1;
     dd2:	fe 01       	movw	r30, r28
     dd4:	ed 57       	subi	r30, 0x7D	; 125
     dd6:	ff 4f       	sbci	r31, 0xFF	; 255
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	91 83       	std	Z+1, r25	; 0x01
     dde:	80 83       	st	Z, r24
     de0:	64 c0       	rjmp	.+200    	; 0xeaa <main+0x31a>
	else if (__tmp > 65535)
     de2:	fe 01       	movw	r30, r28
     de4:	eb 57       	subi	r30, 0x7B	; 123
     de6:	ff 4f       	sbci	r31, 0xFF	; 255
     de8:	60 81       	ld	r22, Z
     dea:	71 81       	ldd	r23, Z+1	; 0x01
     dec:	82 81       	ldd	r24, Z+2	; 0x02
     dee:	93 81       	ldd	r25, Z+3	; 0x03
     df0:	20 e0       	ldi	r18, 0x00	; 0
     df2:	3f ef       	ldi	r19, 0xFF	; 255
     df4:	4f e7       	ldi	r20, 0x7F	; 127
     df6:	57 e4       	ldi	r21, 0x47	; 71
     df8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dfc:	18 16       	cp	r1, r24
     dfe:	0c f0       	brlt	.+2      	; 0xe02 <main+0x272>
     e00:	43 c0       	rjmp	.+134    	; 0xe88 <main+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e02:	fe 01       	movw	r30, r28
     e04:	e7 57       	subi	r30, 0x77	; 119
     e06:	ff 4f       	sbci	r31, 0xFF	; 255
     e08:	60 81       	ld	r22, Z
     e0a:	71 81       	ldd	r23, Z+1	; 0x01
     e0c:	82 81       	ldd	r24, Z+2	; 0x02
     e0e:	93 81       	ldd	r25, Z+3	; 0x03
     e10:	20 e0       	ldi	r18, 0x00	; 0
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	40 e2       	ldi	r20, 0x20	; 32
     e16:	51 e4       	ldi	r21, 0x41	; 65
     e18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e1c:	dc 01       	movw	r26, r24
     e1e:	cb 01       	movw	r24, r22
     e20:	8e 01       	movw	r16, r28
     e22:	0d 57       	subi	r16, 0x7D	; 125
     e24:	1f 4f       	sbci	r17, 0xFF	; 255
     e26:	bc 01       	movw	r22, r24
     e28:	cd 01       	movw	r24, r26
     e2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e2e:	dc 01       	movw	r26, r24
     e30:	cb 01       	movw	r24, r22
     e32:	f8 01       	movw	r30, r16
     e34:	91 83       	std	Z+1, r25	; 0x01
     e36:	80 83       	st	Z, r24
     e38:	1f c0       	rjmp	.+62     	; 0xe78 <main+0x2e8>
     e3a:	fe 01       	movw	r30, r28
     e3c:	ef 57       	subi	r30, 0x7F	; 127
     e3e:	ff 4f       	sbci	r31, 0xFF	; 255
     e40:	89 e1       	ldi	r24, 0x19	; 25
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	91 83       	std	Z+1, r25	; 0x01
     e46:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e48:	fe 01       	movw	r30, r28
     e4a:	ef 57       	subi	r30, 0x7F	; 127
     e4c:	ff 4f       	sbci	r31, 0xFF	; 255
     e4e:	80 81       	ld	r24, Z
     e50:	91 81       	ldd	r25, Z+1	; 0x01
     e52:	01 97       	sbiw	r24, 0x01	; 1
     e54:	f1 f7       	brne	.-4      	; 0xe52 <main+0x2c2>
     e56:	fe 01       	movw	r30, r28
     e58:	ef 57       	subi	r30, 0x7F	; 127
     e5a:	ff 4f       	sbci	r31, 0xFF	; 255
     e5c:	91 83       	std	Z+1, r25	; 0x01
     e5e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e60:	de 01       	movw	r26, r28
     e62:	ad 57       	subi	r26, 0x7D	; 125
     e64:	bf 4f       	sbci	r27, 0xFF	; 255
     e66:	fe 01       	movw	r30, r28
     e68:	ed 57       	subi	r30, 0x7D	; 125
     e6a:	ff 4f       	sbci	r31, 0xFF	; 255
     e6c:	80 81       	ld	r24, Z
     e6e:	91 81       	ldd	r25, Z+1	; 0x01
     e70:	01 97       	sbiw	r24, 0x01	; 1
     e72:	11 96       	adiw	r26, 0x01	; 1
     e74:	9c 93       	st	X, r25
     e76:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e78:	fe 01       	movw	r30, r28
     e7a:	ed 57       	subi	r30, 0x7D	; 125
     e7c:	ff 4f       	sbci	r31, 0xFF	; 255
     e7e:	80 81       	ld	r24, Z
     e80:	91 81       	ldd	r25, Z+1	; 0x01
     e82:	00 97       	sbiw	r24, 0x00	; 0
     e84:	d1 f6       	brne	.-76     	; 0xe3a <main+0x2aa>
     e86:	28 c0       	rjmp	.+80     	; 0xed8 <main+0x348>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e88:	8e 01       	movw	r16, r28
     e8a:	0d 57       	subi	r16, 0x7D	; 125
     e8c:	1f 4f       	sbci	r17, 0xFF	; 255
     e8e:	fe 01       	movw	r30, r28
     e90:	eb 57       	subi	r30, 0x7B	; 123
     e92:	ff 4f       	sbci	r31, 0xFF	; 255
     e94:	60 81       	ld	r22, Z
     e96:	71 81       	ldd	r23, Z+1	; 0x01
     e98:	82 81       	ldd	r24, Z+2	; 0x02
     e9a:	93 81       	ldd	r25, Z+3	; 0x03
     e9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ea0:	dc 01       	movw	r26, r24
     ea2:	cb 01       	movw	r24, r22
     ea4:	f8 01       	movw	r30, r16
     ea6:	91 83       	std	Z+1, r25	; 0x01
     ea8:	80 83       	st	Z, r24
     eaa:	de 01       	movw	r26, r28
     eac:	a1 58       	subi	r26, 0x81	; 129
     eae:	bf 4f       	sbci	r27, 0xFF	; 255
     eb0:	fe 01       	movw	r30, r28
     eb2:	ed 57       	subi	r30, 0x7D	; 125
     eb4:	ff 4f       	sbci	r31, 0xFF	; 255
     eb6:	80 81       	ld	r24, Z
     eb8:	91 81       	ldd	r25, Z+1	; 0x01
     eba:	11 96       	adiw	r26, 0x01	; 1
     ebc:	9c 93       	st	X, r25
     ebe:	8e 93       	st	-X, r24
     ec0:	fe 01       	movw	r30, r28
     ec2:	e1 58       	subi	r30, 0x81	; 129
     ec4:	ff 4f       	sbci	r31, 0xFF	; 255
     ec6:	80 81       	ld	r24, Z
     ec8:	91 81       	ldd	r25, Z+1	; 0x01
     eca:	01 97       	sbiw	r24, 0x01	; 1
     ecc:	f1 f7       	brne	.-4      	; 0xeca <main+0x33a>
     ece:	fe 01       	movw	r30, r28
     ed0:	e1 58       	subi	r30, 0x81	; 129
     ed2:	ff 4f       	sbci	r31, 0xFF	; 255
     ed4:	91 83       	std	Z+1, r25	; 0x01
     ed6:	80 83       	st	Z, r24

			_delay_ms(50);
		} while(receivedByte != CORRECT_PASS);   /*Wait until the user write two matched passwords*/
     ed8:	fe 01       	movw	r30, r28
     eda:	e2 57       	subi	r30, 0x72	; 114
     edc:	ff 4f       	sbci	r31, 0xFF	; 255
     ede:	80 81       	ld	r24, Z
     ee0:	82 30       	cpi	r24, 0x02	; 2
     ee2:	09 f0       	breq	.+2      	; 0xee6 <main+0x356>
     ee4:	10 cf       	rjmp	.-480    	; 0xd06 <main+0x176>
     ee6:	fe 01       	movw	r30, r28
     ee8:	e5 58       	subi	r30, 0x85	; 133
     eea:	ff 4f       	sbci	r31, 0xFF	; 255
     eec:	80 e0       	ldi	r24, 0x00	; 0
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	a8 e4       	ldi	r26, 0x48	; 72
     ef2:	b2 e4       	ldi	r27, 0x42	; 66
     ef4:	80 83       	st	Z, r24
     ef6:	91 83       	std	Z+1, r25	; 0x01
     ef8:	a2 83       	std	Z+2, r26	; 0x02
     efa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     efc:	8e 01       	movw	r16, r28
     efe:	09 58       	subi	r16, 0x89	; 137
     f00:	1f 4f       	sbci	r17, 0xFF	; 255
     f02:	fe 01       	movw	r30, r28
     f04:	e5 58       	subi	r30, 0x85	; 133
     f06:	ff 4f       	sbci	r31, 0xFF	; 255
     f08:	60 81       	ld	r22, Z
     f0a:	71 81       	ldd	r23, Z+1	; 0x01
     f0c:	82 81       	ldd	r24, Z+2	; 0x02
     f0e:	93 81       	ldd	r25, Z+3	; 0x03
     f10:	20 e0       	ldi	r18, 0x00	; 0
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	4a e7       	ldi	r20, 0x7A	; 122
     f16:	53 e4       	ldi	r21, 0x43	; 67
     f18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f1c:	dc 01       	movw	r26, r24
     f1e:	cb 01       	movw	r24, r22
     f20:	f8 01       	movw	r30, r16
     f22:	80 83       	st	Z, r24
     f24:	91 83       	std	Z+1, r25	; 0x01
     f26:	a2 83       	std	Z+2, r26	; 0x02
     f28:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f2a:	fe 01       	movw	r30, r28
     f2c:	e9 58       	subi	r30, 0x89	; 137
     f2e:	ff 4f       	sbci	r31, 0xFF	; 255
     f30:	60 81       	ld	r22, Z
     f32:	71 81       	ldd	r23, Z+1	; 0x01
     f34:	82 81       	ldd	r24, Z+2	; 0x02
     f36:	93 81       	ldd	r25, Z+3	; 0x03
     f38:	20 e0       	ldi	r18, 0x00	; 0
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	40 e8       	ldi	r20, 0x80	; 128
     f3e:	5f e3       	ldi	r21, 0x3F	; 63
     f40:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f44:	88 23       	and	r24, r24
     f46:	44 f4       	brge	.+16     	; 0xf58 <main+0x3c8>
		__ticks = 1;
     f48:	fe 01       	movw	r30, r28
     f4a:	eb 58       	subi	r30, 0x8B	; 139
     f4c:	ff 4f       	sbci	r31, 0xFF	; 255
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	91 83       	std	Z+1, r25	; 0x01
     f54:	80 83       	st	Z, r24
     f56:	64 c0       	rjmp	.+200    	; 0x1020 <main+0x490>
	else if (__tmp > 65535)
     f58:	fe 01       	movw	r30, r28
     f5a:	e9 58       	subi	r30, 0x89	; 137
     f5c:	ff 4f       	sbci	r31, 0xFF	; 255
     f5e:	60 81       	ld	r22, Z
     f60:	71 81       	ldd	r23, Z+1	; 0x01
     f62:	82 81       	ldd	r24, Z+2	; 0x02
     f64:	93 81       	ldd	r25, Z+3	; 0x03
     f66:	20 e0       	ldi	r18, 0x00	; 0
     f68:	3f ef       	ldi	r19, 0xFF	; 255
     f6a:	4f e7       	ldi	r20, 0x7F	; 127
     f6c:	57 e4       	ldi	r21, 0x47	; 71
     f6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f72:	18 16       	cp	r1, r24
     f74:	0c f0       	brlt	.+2      	; 0xf78 <main+0x3e8>
     f76:	43 c0       	rjmp	.+134    	; 0xffe <main+0x46e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f78:	fe 01       	movw	r30, r28
     f7a:	e5 58       	subi	r30, 0x85	; 133
     f7c:	ff 4f       	sbci	r31, 0xFF	; 255
     f7e:	60 81       	ld	r22, Z
     f80:	71 81       	ldd	r23, Z+1	; 0x01
     f82:	82 81       	ldd	r24, Z+2	; 0x02
     f84:	93 81       	ldd	r25, Z+3	; 0x03
     f86:	20 e0       	ldi	r18, 0x00	; 0
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	40 e2       	ldi	r20, 0x20	; 32
     f8c:	51 e4       	ldi	r21, 0x41	; 65
     f8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f92:	dc 01       	movw	r26, r24
     f94:	cb 01       	movw	r24, r22
     f96:	8e 01       	movw	r16, r28
     f98:	0b 58       	subi	r16, 0x8B	; 139
     f9a:	1f 4f       	sbci	r17, 0xFF	; 255
     f9c:	bc 01       	movw	r22, r24
     f9e:	cd 01       	movw	r24, r26
     fa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fa4:	dc 01       	movw	r26, r24
     fa6:	cb 01       	movw	r24, r22
     fa8:	f8 01       	movw	r30, r16
     faa:	91 83       	std	Z+1, r25	; 0x01
     fac:	80 83       	st	Z, r24
     fae:	1f c0       	rjmp	.+62     	; 0xfee <main+0x45e>
     fb0:	fe 01       	movw	r30, r28
     fb2:	ed 58       	subi	r30, 0x8D	; 141
     fb4:	ff 4f       	sbci	r31, 0xFF	; 255
     fb6:	89 e1       	ldi	r24, 0x19	; 25
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	91 83       	std	Z+1, r25	; 0x01
     fbc:	80 83       	st	Z, r24
     fbe:	fe 01       	movw	r30, r28
     fc0:	ed 58       	subi	r30, 0x8D	; 141
     fc2:	ff 4f       	sbci	r31, 0xFF	; 255
     fc4:	80 81       	ld	r24, Z
     fc6:	91 81       	ldd	r25, Z+1	; 0x01
     fc8:	01 97       	sbiw	r24, 0x01	; 1
     fca:	f1 f7       	brne	.-4      	; 0xfc8 <main+0x438>
     fcc:	fe 01       	movw	r30, r28
     fce:	ed 58       	subi	r30, 0x8D	; 141
     fd0:	ff 4f       	sbci	r31, 0xFF	; 255
     fd2:	91 83       	std	Z+1, r25	; 0x01
     fd4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fd6:	de 01       	movw	r26, r28
     fd8:	ab 58       	subi	r26, 0x8B	; 139
     fda:	bf 4f       	sbci	r27, 0xFF	; 255
     fdc:	fe 01       	movw	r30, r28
     fde:	eb 58       	subi	r30, 0x8B	; 139
     fe0:	ff 4f       	sbci	r31, 0xFF	; 255
     fe2:	80 81       	ld	r24, Z
     fe4:	91 81       	ldd	r25, Z+1	; 0x01
     fe6:	01 97       	sbiw	r24, 0x01	; 1
     fe8:	11 96       	adiw	r26, 0x01	; 1
     fea:	9c 93       	st	X, r25
     fec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fee:	fe 01       	movw	r30, r28
     ff0:	eb 58       	subi	r30, 0x8B	; 139
     ff2:	ff 4f       	sbci	r31, 0xFF	; 255
     ff4:	80 81       	ld	r24, Z
     ff6:	91 81       	ldd	r25, Z+1	; 0x01
     ff8:	00 97       	sbiw	r24, 0x00	; 0
     ffa:	d1 f6       	brne	.-76     	; 0xfb0 <main+0x420>
     ffc:	28 c0       	rjmp	.+80     	; 0x104e <main+0x4be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ffe:	8e 01       	movw	r16, r28
    1000:	0b 58       	subi	r16, 0x8B	; 139
    1002:	1f 4f       	sbci	r17, 0xFF	; 255
    1004:	fe 01       	movw	r30, r28
    1006:	e9 58       	subi	r30, 0x89	; 137
    1008:	ff 4f       	sbci	r31, 0xFF	; 255
    100a:	60 81       	ld	r22, Z
    100c:	71 81       	ldd	r23, Z+1	; 0x01
    100e:	82 81       	ldd	r24, Z+2	; 0x02
    1010:	93 81       	ldd	r25, Z+3	; 0x03
    1012:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1016:	dc 01       	movw	r26, r24
    1018:	cb 01       	movw	r24, r22
    101a:	f8 01       	movw	r30, r16
    101c:	91 83       	std	Z+1, r25	; 0x01
    101e:	80 83       	st	Z, r24
    1020:	de 01       	movw	r26, r28
    1022:	af 58       	subi	r26, 0x8F	; 143
    1024:	bf 4f       	sbci	r27, 0xFF	; 255
    1026:	fe 01       	movw	r30, r28
    1028:	eb 58       	subi	r30, 0x8B	; 139
    102a:	ff 4f       	sbci	r31, 0xFF	; 255
    102c:	80 81       	ld	r24, Z
    102e:	91 81       	ldd	r25, Z+1	; 0x01
    1030:	11 96       	adiw	r26, 0x01	; 1
    1032:	9c 93       	st	X, r25
    1034:	8e 93       	st	-X, r24
    1036:	fe 01       	movw	r30, r28
    1038:	ef 58       	subi	r30, 0x8F	; 143
    103a:	ff 4f       	sbci	r31, 0xFF	; 255
    103c:	80 81       	ld	r24, Z
    103e:	91 81       	ldd	r25, Z+1	; 0x01
    1040:	01 97       	sbiw	r24, 0x01	; 1
    1042:	f1 f7       	brne	.-4      	; 0x1040 <main+0x4b0>
    1044:	fe 01       	movw	r30, r28
    1046:	ef 58       	subi	r30, 0x8F	; 143
    1048:	ff 4f       	sbci	r31, 0xFF	; 255
    104a:	91 83       	std	Z+1, r25	; 0x01
    104c:	80 83       	st	Z, r24

			/*
			 * If password entered wrong 3 consecutive time.
			 * Error message on LCD is displayed for one minute.
			 */
			if(trials >= 3)
    104e:	fe 01       	movw	r30, r28
    1050:	e3 57       	subi	r30, 0x73	; 115
    1052:	ff 4f       	sbci	r31, 0xFF	; 255
    1054:	80 81       	ld	r24, Z
    1056:	83 30       	cpi	r24, 0x03	; 3
    1058:	08 f4       	brcc	.+2      	; 0x105c <main+0x4cc>
    105a:	c0 c0       	rjmp	.+384    	; 0x11dc <main+0x64c>
			{
				LCD_clearScreen();
    105c:	0e 94 8a 18 	call	0x3114	; 0x3114 <LCD_clearScreen>
				LCD_displayStringRowColumn(0,5,"ERROR :(");
    1060:	2c e8       	ldi	r18, 0x8C	; 140
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	80 e0       	ldi	r24, 0x00	; 0
    1066:	65 e0       	ldi	r22, 0x05	; 5
    1068:	a9 01       	movw	r20, r18
    106a:	0e 94 46 18 	call	0x308c	; 0x308c <LCD_displayStringRowColumn>
    106e:	fe 01       	movw	r30, r28
    1070:	e3 59       	subi	r30, 0x93	; 147
    1072:	ff 4f       	sbci	r31, 0xFF	; 255
    1074:	80 e0       	ldi	r24, 0x00	; 0
    1076:	90 e4       	ldi	r25, 0x40	; 64
    1078:	ac e1       	ldi	r26, 0x1C	; 28
    107a:	b6 e4       	ldi	r27, 0x46	; 70
    107c:	80 83       	st	Z, r24
    107e:	91 83       	std	Z+1, r25	; 0x01
    1080:	a2 83       	std	Z+2, r26	; 0x02
    1082:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1084:	8e 01       	movw	r16, r28
    1086:	07 59       	subi	r16, 0x97	; 151
    1088:	1f 4f       	sbci	r17, 0xFF	; 255
    108a:	fe 01       	movw	r30, r28
    108c:	e3 59       	subi	r30, 0x93	; 147
    108e:	ff 4f       	sbci	r31, 0xFF	; 255
    1090:	60 81       	ld	r22, Z
    1092:	71 81       	ldd	r23, Z+1	; 0x01
    1094:	82 81       	ldd	r24, Z+2	; 0x02
    1096:	93 81       	ldd	r25, Z+3	; 0x03
    1098:	20 e0       	ldi	r18, 0x00	; 0
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	4a e7       	ldi	r20, 0x7A	; 122
    109e:	53 e4       	ldi	r21, 0x43	; 67
    10a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10a4:	dc 01       	movw	r26, r24
    10a6:	cb 01       	movw	r24, r22
    10a8:	f8 01       	movw	r30, r16
    10aa:	80 83       	st	Z, r24
    10ac:	91 83       	std	Z+1, r25	; 0x01
    10ae:	a2 83       	std	Z+2, r26	; 0x02
    10b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    10b2:	fe 01       	movw	r30, r28
    10b4:	e7 59       	subi	r30, 0x97	; 151
    10b6:	ff 4f       	sbci	r31, 0xFF	; 255
    10b8:	60 81       	ld	r22, Z
    10ba:	71 81       	ldd	r23, Z+1	; 0x01
    10bc:	82 81       	ldd	r24, Z+2	; 0x02
    10be:	93 81       	ldd	r25, Z+3	; 0x03
    10c0:	20 e0       	ldi	r18, 0x00	; 0
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	40 e8       	ldi	r20, 0x80	; 128
    10c6:	5f e3       	ldi	r21, 0x3F	; 63
    10c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10cc:	88 23       	and	r24, r24
    10ce:	44 f4       	brge	.+16     	; 0x10e0 <main+0x550>
		__ticks = 1;
    10d0:	fe 01       	movw	r30, r28
    10d2:	e9 59       	subi	r30, 0x99	; 153
    10d4:	ff 4f       	sbci	r31, 0xFF	; 255
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	91 83       	std	Z+1, r25	; 0x01
    10dc:	80 83       	st	Z, r24
    10de:	64 c0       	rjmp	.+200    	; 0x11a8 <main+0x618>
	else if (__tmp > 65535)
    10e0:	fe 01       	movw	r30, r28
    10e2:	e7 59       	subi	r30, 0x97	; 151
    10e4:	ff 4f       	sbci	r31, 0xFF	; 255
    10e6:	60 81       	ld	r22, Z
    10e8:	71 81       	ldd	r23, Z+1	; 0x01
    10ea:	82 81       	ldd	r24, Z+2	; 0x02
    10ec:	93 81       	ldd	r25, Z+3	; 0x03
    10ee:	20 e0       	ldi	r18, 0x00	; 0
    10f0:	3f ef       	ldi	r19, 0xFF	; 255
    10f2:	4f e7       	ldi	r20, 0x7F	; 127
    10f4:	57 e4       	ldi	r21, 0x47	; 71
    10f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10fa:	18 16       	cp	r1, r24
    10fc:	0c f0       	brlt	.+2      	; 0x1100 <main+0x570>
    10fe:	43 c0       	rjmp	.+134    	; 0x1186 <main+0x5f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1100:	fe 01       	movw	r30, r28
    1102:	e3 59       	subi	r30, 0x93	; 147
    1104:	ff 4f       	sbci	r31, 0xFF	; 255
    1106:	60 81       	ld	r22, Z
    1108:	71 81       	ldd	r23, Z+1	; 0x01
    110a:	82 81       	ldd	r24, Z+2	; 0x02
    110c:	93 81       	ldd	r25, Z+3	; 0x03
    110e:	20 e0       	ldi	r18, 0x00	; 0
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	40 e2       	ldi	r20, 0x20	; 32
    1114:	51 e4       	ldi	r21, 0x41	; 65
    1116:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    111a:	dc 01       	movw	r26, r24
    111c:	cb 01       	movw	r24, r22
    111e:	8e 01       	movw	r16, r28
    1120:	09 59       	subi	r16, 0x99	; 153
    1122:	1f 4f       	sbci	r17, 0xFF	; 255
    1124:	bc 01       	movw	r22, r24
    1126:	cd 01       	movw	r24, r26
    1128:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    112c:	dc 01       	movw	r26, r24
    112e:	cb 01       	movw	r24, r22
    1130:	f8 01       	movw	r30, r16
    1132:	91 83       	std	Z+1, r25	; 0x01
    1134:	80 83       	st	Z, r24
    1136:	1f c0       	rjmp	.+62     	; 0x1176 <main+0x5e6>
    1138:	fe 01       	movw	r30, r28
    113a:	eb 59       	subi	r30, 0x9B	; 155
    113c:	ff 4f       	sbci	r31, 0xFF	; 255
    113e:	89 e1       	ldi	r24, 0x19	; 25
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	91 83       	std	Z+1, r25	; 0x01
    1144:	80 83       	st	Z, r24
    1146:	fe 01       	movw	r30, r28
    1148:	eb 59       	subi	r30, 0x9B	; 155
    114a:	ff 4f       	sbci	r31, 0xFF	; 255
    114c:	80 81       	ld	r24, Z
    114e:	91 81       	ldd	r25, Z+1	; 0x01
    1150:	01 97       	sbiw	r24, 0x01	; 1
    1152:	f1 f7       	brne	.-4      	; 0x1150 <main+0x5c0>
    1154:	fe 01       	movw	r30, r28
    1156:	eb 59       	subi	r30, 0x9B	; 155
    1158:	ff 4f       	sbci	r31, 0xFF	; 255
    115a:	91 83       	std	Z+1, r25	; 0x01
    115c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    115e:	de 01       	movw	r26, r28
    1160:	a9 59       	subi	r26, 0x99	; 153
    1162:	bf 4f       	sbci	r27, 0xFF	; 255
    1164:	fe 01       	movw	r30, r28
    1166:	e9 59       	subi	r30, 0x99	; 153
    1168:	ff 4f       	sbci	r31, 0xFF	; 255
    116a:	80 81       	ld	r24, Z
    116c:	91 81       	ldd	r25, Z+1	; 0x01
    116e:	01 97       	sbiw	r24, 0x01	; 1
    1170:	11 96       	adiw	r26, 0x01	; 1
    1172:	9c 93       	st	X, r25
    1174:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1176:	fe 01       	movw	r30, r28
    1178:	e9 59       	subi	r30, 0x99	; 153
    117a:	ff 4f       	sbci	r31, 0xFF	; 255
    117c:	80 81       	ld	r24, Z
    117e:	91 81       	ldd	r25, Z+1	; 0x01
    1180:	00 97       	sbiw	r24, 0x00	; 0
    1182:	d1 f6       	brne	.-76     	; 0x1138 <main+0x5a8>
    1184:	27 c0       	rjmp	.+78     	; 0x11d4 <main+0x644>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1186:	8e 01       	movw	r16, r28
    1188:	09 59       	subi	r16, 0x99	; 153
    118a:	1f 4f       	sbci	r17, 0xFF	; 255
    118c:	fe 01       	movw	r30, r28
    118e:	e7 59       	subi	r30, 0x97	; 151
    1190:	ff 4f       	sbci	r31, 0xFF	; 255
    1192:	60 81       	ld	r22, Z
    1194:	71 81       	ldd	r23, Z+1	; 0x01
    1196:	82 81       	ldd	r24, Z+2	; 0x02
    1198:	93 81       	ldd	r25, Z+3	; 0x03
    119a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    119e:	dc 01       	movw	r26, r24
    11a0:	cb 01       	movw	r24, r22
    11a2:	f8 01       	movw	r30, r16
    11a4:	91 83       	std	Z+1, r25	; 0x01
    11a6:	80 83       	st	Z, r24
    11a8:	de 01       	movw	r26, r28
    11aa:	ad 59       	subi	r26, 0x9D	; 157
    11ac:	bf 4f       	sbci	r27, 0xFF	; 255
    11ae:	fe 01       	movw	r30, r28
    11b0:	e9 59       	subi	r30, 0x99	; 153
    11b2:	ff 4f       	sbci	r31, 0xFF	; 255
    11b4:	80 81       	ld	r24, Z
    11b6:	91 81       	ldd	r25, Z+1	; 0x01
    11b8:	8d 93       	st	X+, r24
    11ba:	9c 93       	st	X, r25
    11bc:	fe 01       	movw	r30, r28
    11be:	ed 59       	subi	r30, 0x9D	; 157
    11c0:	ff 4f       	sbci	r31, 0xFF	; 255
    11c2:	80 81       	ld	r24, Z
    11c4:	91 81       	ldd	r25, Z+1	; 0x01
    11c6:	01 97       	sbiw	r24, 0x01	; 1
    11c8:	f1 f7       	brne	.-4      	; 0x11c6 <main+0x636>
    11ca:	fe 01       	movw	r30, r28
    11cc:	ed 59       	subi	r30, 0x9D	; 157
    11ce:	ff 4f       	sbci	r31, 0xFF	; 255
    11d0:	91 83       	std	Z+1, r25	; 0x01
    11d2:	80 83       	st	Z, r24
				_delay_ms(10000);

				trials = 0;		/*Reset trials*/
    11d4:	fe 01       	movw	r30, r28
    11d6:	e3 57       	subi	r30, 0x73	; 115
    11d8:	ff 4f       	sbci	r31, 0xFF	; 255
    11da:	10 82       	st	Z, r1
			}

			/*Display the main options*/
			LCD_clearScreen();
    11dc:	0e 94 8a 18 	call	0x3114	; 0x3114 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"+ : Open Door");
    11e0:	25 e9       	ldi	r18, 0x95	; 149
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	80 e0       	ldi	r24, 0x00	; 0
    11e6:	60 e0       	ldi	r22, 0x00	; 0
    11e8:	a9 01       	movw	r20, r18
    11ea:	0e 94 46 18 	call	0x308c	; 0x308c <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1,0,"- : Change Pass");
    11ee:	23 ea       	ldi	r18, 0xA3	; 163
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	60 e0       	ldi	r22, 0x00	; 0
    11f6:	a9 01       	movw	r20, r18
    11f8:	0e 94 46 18 	call	0x308c	; 0x308c <LCD_displayStringRowColumn>

			keyButton = KEYPAD_getPressedKey();
    11fc:	0e 94 62 12 	call	0x24c4	; 0x24c4 <KEYPAD_getPressedKey>
    1200:	fe 01       	movw	r30, r28
    1202:	e1 57       	subi	r30, 0x71	; 113
    1204:	ff 4f       	sbci	r31, 0xFF	; 255
    1206:	80 83       	st	Z, r24
    1208:	fe 01       	movw	r30, r28
    120a:	e1 5a       	subi	r30, 0xA1	; 161
    120c:	ff 4f       	sbci	r31, 0xFF	; 255
    120e:	80 e0       	ldi	r24, 0x00	; 0
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	aa ef       	ldi	r26, 0xFA	; 250
    1214:	b3 e4       	ldi	r27, 0x43	; 67
    1216:	80 83       	st	Z, r24
    1218:	91 83       	std	Z+1, r25	; 0x01
    121a:	a2 83       	std	Z+2, r26	; 0x02
    121c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    121e:	8e 01       	movw	r16, r28
    1220:	05 5a       	subi	r16, 0xA5	; 165
    1222:	1f 4f       	sbci	r17, 0xFF	; 255
    1224:	fe 01       	movw	r30, r28
    1226:	e1 5a       	subi	r30, 0xA1	; 161
    1228:	ff 4f       	sbci	r31, 0xFF	; 255
    122a:	60 81       	ld	r22, Z
    122c:	71 81       	ldd	r23, Z+1	; 0x01
    122e:	82 81       	ldd	r24, Z+2	; 0x02
    1230:	93 81       	ldd	r25, Z+3	; 0x03
    1232:	20 e0       	ldi	r18, 0x00	; 0
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	4a e7       	ldi	r20, 0x7A	; 122
    1238:	53 e4       	ldi	r21, 0x43	; 67
    123a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    123e:	dc 01       	movw	r26, r24
    1240:	cb 01       	movw	r24, r22
    1242:	f8 01       	movw	r30, r16
    1244:	80 83       	st	Z, r24
    1246:	91 83       	std	Z+1, r25	; 0x01
    1248:	a2 83       	std	Z+2, r26	; 0x02
    124a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    124c:	fe 01       	movw	r30, r28
    124e:	e5 5a       	subi	r30, 0xA5	; 165
    1250:	ff 4f       	sbci	r31, 0xFF	; 255
    1252:	60 81       	ld	r22, Z
    1254:	71 81       	ldd	r23, Z+1	; 0x01
    1256:	82 81       	ldd	r24, Z+2	; 0x02
    1258:	93 81       	ldd	r25, Z+3	; 0x03
    125a:	20 e0       	ldi	r18, 0x00	; 0
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	40 e8       	ldi	r20, 0x80	; 128
    1260:	5f e3       	ldi	r21, 0x3F	; 63
    1262:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1266:	88 23       	and	r24, r24
    1268:	44 f4       	brge	.+16     	; 0x127a <main+0x6ea>
		__ticks = 1;
    126a:	fe 01       	movw	r30, r28
    126c:	e7 5a       	subi	r30, 0xA7	; 167
    126e:	ff 4f       	sbci	r31, 0xFF	; 255
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	91 83       	std	Z+1, r25	; 0x01
    1276:	80 83       	st	Z, r24
    1278:	64 c0       	rjmp	.+200    	; 0x1342 <main+0x7b2>
	else if (__tmp > 65535)
    127a:	fe 01       	movw	r30, r28
    127c:	e5 5a       	subi	r30, 0xA5	; 165
    127e:	ff 4f       	sbci	r31, 0xFF	; 255
    1280:	60 81       	ld	r22, Z
    1282:	71 81       	ldd	r23, Z+1	; 0x01
    1284:	82 81       	ldd	r24, Z+2	; 0x02
    1286:	93 81       	ldd	r25, Z+3	; 0x03
    1288:	20 e0       	ldi	r18, 0x00	; 0
    128a:	3f ef       	ldi	r19, 0xFF	; 255
    128c:	4f e7       	ldi	r20, 0x7F	; 127
    128e:	57 e4       	ldi	r21, 0x47	; 71
    1290:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1294:	18 16       	cp	r1, r24
    1296:	0c f0       	brlt	.+2      	; 0x129a <main+0x70a>
    1298:	43 c0       	rjmp	.+134    	; 0x1320 <main+0x790>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    129a:	fe 01       	movw	r30, r28
    129c:	e1 5a       	subi	r30, 0xA1	; 161
    129e:	ff 4f       	sbci	r31, 0xFF	; 255
    12a0:	60 81       	ld	r22, Z
    12a2:	71 81       	ldd	r23, Z+1	; 0x01
    12a4:	82 81       	ldd	r24, Z+2	; 0x02
    12a6:	93 81       	ldd	r25, Z+3	; 0x03
    12a8:	20 e0       	ldi	r18, 0x00	; 0
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	40 e2       	ldi	r20, 0x20	; 32
    12ae:	51 e4       	ldi	r21, 0x41	; 65
    12b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12b4:	dc 01       	movw	r26, r24
    12b6:	cb 01       	movw	r24, r22
    12b8:	8e 01       	movw	r16, r28
    12ba:	07 5a       	subi	r16, 0xA7	; 167
    12bc:	1f 4f       	sbci	r17, 0xFF	; 255
    12be:	bc 01       	movw	r22, r24
    12c0:	cd 01       	movw	r24, r26
    12c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12c6:	dc 01       	movw	r26, r24
    12c8:	cb 01       	movw	r24, r22
    12ca:	f8 01       	movw	r30, r16
    12cc:	91 83       	std	Z+1, r25	; 0x01
    12ce:	80 83       	st	Z, r24
    12d0:	1f c0       	rjmp	.+62     	; 0x1310 <main+0x780>
    12d2:	fe 01       	movw	r30, r28
    12d4:	e9 5a       	subi	r30, 0xA9	; 169
    12d6:	ff 4f       	sbci	r31, 0xFF	; 255
    12d8:	89 e1       	ldi	r24, 0x19	; 25
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	91 83       	std	Z+1, r25	; 0x01
    12de:	80 83       	st	Z, r24
    12e0:	fe 01       	movw	r30, r28
    12e2:	e9 5a       	subi	r30, 0xA9	; 169
    12e4:	ff 4f       	sbci	r31, 0xFF	; 255
    12e6:	80 81       	ld	r24, Z
    12e8:	91 81       	ldd	r25, Z+1	; 0x01
    12ea:	01 97       	sbiw	r24, 0x01	; 1
    12ec:	f1 f7       	brne	.-4      	; 0x12ea <main+0x75a>
    12ee:	fe 01       	movw	r30, r28
    12f0:	e9 5a       	subi	r30, 0xA9	; 169
    12f2:	ff 4f       	sbci	r31, 0xFF	; 255
    12f4:	91 83       	std	Z+1, r25	; 0x01
    12f6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12f8:	de 01       	movw	r26, r28
    12fa:	a7 5a       	subi	r26, 0xA7	; 167
    12fc:	bf 4f       	sbci	r27, 0xFF	; 255
    12fe:	fe 01       	movw	r30, r28
    1300:	e7 5a       	subi	r30, 0xA7	; 167
    1302:	ff 4f       	sbci	r31, 0xFF	; 255
    1304:	80 81       	ld	r24, Z
    1306:	91 81       	ldd	r25, Z+1	; 0x01
    1308:	01 97       	sbiw	r24, 0x01	; 1
    130a:	11 96       	adiw	r26, 0x01	; 1
    130c:	9c 93       	st	X, r25
    130e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1310:	fe 01       	movw	r30, r28
    1312:	e7 5a       	subi	r30, 0xA7	; 167
    1314:	ff 4f       	sbci	r31, 0xFF	; 255
    1316:	80 81       	ld	r24, Z
    1318:	91 81       	ldd	r25, Z+1	; 0x01
    131a:	00 97       	sbiw	r24, 0x00	; 0
    131c:	d1 f6       	brne	.-76     	; 0x12d2 <main+0x742>
    131e:	28 c0       	rjmp	.+80     	; 0x1370 <main+0x7e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1320:	8e 01       	movw	r16, r28
    1322:	07 5a       	subi	r16, 0xA7	; 167
    1324:	1f 4f       	sbci	r17, 0xFF	; 255
    1326:	fe 01       	movw	r30, r28
    1328:	e5 5a       	subi	r30, 0xA5	; 165
    132a:	ff 4f       	sbci	r31, 0xFF	; 255
    132c:	60 81       	ld	r22, Z
    132e:	71 81       	ldd	r23, Z+1	; 0x01
    1330:	82 81       	ldd	r24, Z+2	; 0x02
    1332:	93 81       	ldd	r25, Z+3	; 0x03
    1334:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1338:	dc 01       	movw	r26, r24
    133a:	cb 01       	movw	r24, r22
    133c:	f8 01       	movw	r30, r16
    133e:	91 83       	std	Z+1, r25	; 0x01
    1340:	80 83       	st	Z, r24
    1342:	de 01       	movw	r26, r28
    1344:	ab 5a       	subi	r26, 0xAB	; 171
    1346:	bf 4f       	sbci	r27, 0xFF	; 255
    1348:	fe 01       	movw	r30, r28
    134a:	e7 5a       	subi	r30, 0xA7	; 167
    134c:	ff 4f       	sbci	r31, 0xFF	; 255
    134e:	80 81       	ld	r24, Z
    1350:	91 81       	ldd	r25, Z+1	; 0x01
    1352:	11 96       	adiw	r26, 0x01	; 1
    1354:	9c 93       	st	X, r25
    1356:	8e 93       	st	-X, r24
    1358:	fe 01       	movw	r30, r28
    135a:	eb 5a       	subi	r30, 0xAB	; 171
    135c:	ff 4f       	sbci	r31, 0xFF	; 255
    135e:	80 81       	ld	r24, Z
    1360:	91 81       	ldd	r25, Z+1	; 0x01
    1362:	01 97       	sbiw	r24, 0x01	; 1
    1364:	f1 f7       	brne	.-4      	; 0x1362 <main+0x7d2>
    1366:	fe 01       	movw	r30, r28
    1368:	eb 5a       	subi	r30, 0xAB	; 171
    136a:	ff 4f       	sbci	r31, 0xFF	; 255
    136c:	91 83       	std	Z+1, r25	; 0x01
    136e:	80 83       	st	Z, r24
			_delay_ms(500);

			if(keyButton == '+')  /*Open the door*/
    1370:	fe 01       	movw	r30, r28
    1372:	e1 57       	subi	r30, 0x71	; 113
    1374:	ff 4f       	sbci	r31, 0xFF	; 255
    1376:	80 81       	ld	r24, Z
    1378:	8b 32       	cpi	r24, 0x2B	; 43
    137a:	09 f0       	breq	.+2      	; 0x137e <main+0x7ee>
    137c:	fe c2       	rjmp	.+1532   	; 0x197a <main+0xdea>
			{
				receivedByte = check_mainOptionPassword(pass1,trials,OPEN_DOOR);
    137e:	ce 01       	movw	r24, r28
    1380:	80 57       	subi	r24, 0x70	; 112
    1382:	9f 4f       	sbci	r25, 0xFF	; 255
    1384:	fe 01       	movw	r30, r28
    1386:	e3 57       	subi	r30, 0x73	; 115
    1388:	ff 4f       	sbci	r31, 0xFF	; 255
    138a:	60 81       	ld	r22, Z
    138c:	44 e0       	ldi	r20, 0x04	; 4
    138e:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <check_mainOptionPassword>
    1392:	fe 01       	movw	r30, r28
    1394:	e2 57       	subi	r30, 0x72	; 114
    1396:	ff 4f       	sbci	r31, 0xFF	; 255
    1398:	80 83       	st	Z, r24

				if(receivedByte == INCORRECT_PASS)
    139a:	fe 01       	movw	r30, r28
    139c:	e2 57       	subi	r30, 0x72	; 114
    139e:	ff 4f       	sbci	r31, 0xFF	; 255
    13a0:	80 81       	ld	r24, Z
    13a2:	83 30       	cpi	r24, 0x03	; 3
    13a4:	09 f0       	breq	.+2      	; 0x13a8 <main+0x818>
    13a6:	c7 c0       	rjmp	.+398    	; 0x1536 <main+0x9a6>
				{
					trials++;   /*Increment the incorrect trials counter*/
    13a8:	de 01       	movw	r26, r28
    13aa:	a3 57       	subi	r26, 0x73	; 115
    13ac:	bf 4f       	sbci	r27, 0xFF	; 255
    13ae:	fe 01       	movw	r30, r28
    13b0:	e3 57       	subi	r30, 0x73	; 115
    13b2:	ff 4f       	sbci	r31, 0xFF	; 255
    13b4:	80 81       	ld	r24, Z
    13b6:	8f 5f       	subi	r24, 0xFF	; 255
    13b8:	8c 93       	st	X, r24
					LCD_clearScreen();
    13ba:	0e 94 8a 18 	call	0x3114	; 0x3114 <LCD_clearScreen>
					LCD_displayStringRowColumn(0,0,"Incorrect Pass");
    13be:	23 eb       	ldi	r18, 0xB3	; 179
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	80 e0       	ldi	r24, 0x00	; 0
    13c4:	60 e0       	ldi	r22, 0x00	; 0
    13c6:	a9 01       	movw	r20, r18
    13c8:	0e 94 46 18 	call	0x308c	; 0x308c <LCD_displayStringRowColumn>
    13cc:	fe 01       	movw	r30, r28
    13ce:	ef 5a       	subi	r30, 0xAF	; 175
    13d0:	ff 4f       	sbci	r31, 0xFF	; 255
    13d2:	80 e0       	ldi	r24, 0x00	; 0
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	aa e7       	ldi	r26, 0x7A	; 122
    13d8:	b4 e4       	ldi	r27, 0x44	; 68
    13da:	80 83       	st	Z, r24
    13dc:	91 83       	std	Z+1, r25	; 0x01
    13de:	a2 83       	std	Z+2, r26	; 0x02
    13e0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13e2:	8e 01       	movw	r16, r28
    13e4:	03 5b       	subi	r16, 0xB3	; 179
    13e6:	1f 4f       	sbci	r17, 0xFF	; 255
    13e8:	fe 01       	movw	r30, r28
    13ea:	ef 5a       	subi	r30, 0xAF	; 175
    13ec:	ff 4f       	sbci	r31, 0xFF	; 255
    13ee:	60 81       	ld	r22, Z
    13f0:	71 81       	ldd	r23, Z+1	; 0x01
    13f2:	82 81       	ldd	r24, Z+2	; 0x02
    13f4:	93 81       	ldd	r25, Z+3	; 0x03
    13f6:	20 e0       	ldi	r18, 0x00	; 0
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	4a e7       	ldi	r20, 0x7A	; 122
    13fc:	53 e4       	ldi	r21, 0x43	; 67
    13fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1402:	dc 01       	movw	r26, r24
    1404:	cb 01       	movw	r24, r22
    1406:	f8 01       	movw	r30, r16
    1408:	80 83       	st	Z, r24
    140a:	91 83       	std	Z+1, r25	; 0x01
    140c:	a2 83       	std	Z+2, r26	; 0x02
    140e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1410:	fe 01       	movw	r30, r28
    1412:	e3 5b       	subi	r30, 0xB3	; 179
    1414:	ff 4f       	sbci	r31, 0xFF	; 255
    1416:	60 81       	ld	r22, Z
    1418:	71 81       	ldd	r23, Z+1	; 0x01
    141a:	82 81       	ldd	r24, Z+2	; 0x02
    141c:	93 81       	ldd	r25, Z+3	; 0x03
    141e:	20 e0       	ldi	r18, 0x00	; 0
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	40 e8       	ldi	r20, 0x80	; 128
    1424:	5f e3       	ldi	r21, 0x3F	; 63
    1426:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    142a:	88 23       	and	r24, r24
    142c:	44 f4       	brge	.+16     	; 0x143e <main+0x8ae>
		__ticks = 1;
    142e:	fe 01       	movw	r30, r28
    1430:	e5 5b       	subi	r30, 0xB5	; 181
    1432:	ff 4f       	sbci	r31, 0xFF	; 255
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	91 83       	std	Z+1, r25	; 0x01
    143a:	80 83       	st	Z, r24
    143c:	64 c0       	rjmp	.+200    	; 0x1506 <main+0x976>
	else if (__tmp > 65535)
    143e:	fe 01       	movw	r30, r28
    1440:	e3 5b       	subi	r30, 0xB3	; 179
    1442:	ff 4f       	sbci	r31, 0xFF	; 255
    1444:	60 81       	ld	r22, Z
    1446:	71 81       	ldd	r23, Z+1	; 0x01
    1448:	82 81       	ldd	r24, Z+2	; 0x02
    144a:	93 81       	ldd	r25, Z+3	; 0x03
    144c:	20 e0       	ldi	r18, 0x00	; 0
    144e:	3f ef       	ldi	r19, 0xFF	; 255
    1450:	4f e7       	ldi	r20, 0x7F	; 127
    1452:	57 e4       	ldi	r21, 0x47	; 71
    1454:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1458:	18 16       	cp	r1, r24
    145a:	0c f0       	brlt	.+2      	; 0x145e <main+0x8ce>
    145c:	43 c0       	rjmp	.+134    	; 0x14e4 <main+0x954>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    145e:	fe 01       	movw	r30, r28
    1460:	ef 5a       	subi	r30, 0xAF	; 175
    1462:	ff 4f       	sbci	r31, 0xFF	; 255
    1464:	60 81       	ld	r22, Z
    1466:	71 81       	ldd	r23, Z+1	; 0x01
    1468:	82 81       	ldd	r24, Z+2	; 0x02
    146a:	93 81       	ldd	r25, Z+3	; 0x03
    146c:	20 e0       	ldi	r18, 0x00	; 0
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	40 e2       	ldi	r20, 0x20	; 32
    1472:	51 e4       	ldi	r21, 0x41	; 65
    1474:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1478:	dc 01       	movw	r26, r24
    147a:	cb 01       	movw	r24, r22
    147c:	8e 01       	movw	r16, r28
    147e:	05 5b       	subi	r16, 0xB5	; 181
    1480:	1f 4f       	sbci	r17, 0xFF	; 255
    1482:	bc 01       	movw	r22, r24
    1484:	cd 01       	movw	r24, r26
    1486:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    148a:	dc 01       	movw	r26, r24
    148c:	cb 01       	movw	r24, r22
    148e:	f8 01       	movw	r30, r16
    1490:	91 83       	std	Z+1, r25	; 0x01
    1492:	80 83       	st	Z, r24
    1494:	1f c0       	rjmp	.+62     	; 0x14d4 <main+0x944>
    1496:	fe 01       	movw	r30, r28
    1498:	e7 5b       	subi	r30, 0xB7	; 183
    149a:	ff 4f       	sbci	r31, 0xFF	; 255
    149c:	89 e1       	ldi	r24, 0x19	; 25
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	91 83       	std	Z+1, r25	; 0x01
    14a2:	80 83       	st	Z, r24
    14a4:	fe 01       	movw	r30, r28
    14a6:	e7 5b       	subi	r30, 0xB7	; 183
    14a8:	ff 4f       	sbci	r31, 0xFF	; 255
    14aa:	80 81       	ld	r24, Z
    14ac:	91 81       	ldd	r25, Z+1	; 0x01
    14ae:	01 97       	sbiw	r24, 0x01	; 1
    14b0:	f1 f7       	brne	.-4      	; 0x14ae <main+0x91e>
    14b2:	fe 01       	movw	r30, r28
    14b4:	e7 5b       	subi	r30, 0xB7	; 183
    14b6:	ff 4f       	sbci	r31, 0xFF	; 255
    14b8:	91 83       	std	Z+1, r25	; 0x01
    14ba:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14bc:	de 01       	movw	r26, r28
    14be:	a5 5b       	subi	r26, 0xB5	; 181
    14c0:	bf 4f       	sbci	r27, 0xFF	; 255
    14c2:	fe 01       	movw	r30, r28
    14c4:	e5 5b       	subi	r30, 0xB5	; 181
    14c6:	ff 4f       	sbci	r31, 0xFF	; 255
    14c8:	80 81       	ld	r24, Z
    14ca:	91 81       	ldd	r25, Z+1	; 0x01
    14cc:	01 97       	sbiw	r24, 0x01	; 1
    14ce:	11 96       	adiw	r26, 0x01	; 1
    14d0:	9c 93       	st	X, r25
    14d2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14d4:	fe 01       	movw	r30, r28
    14d6:	e5 5b       	subi	r30, 0xB5	; 181
    14d8:	ff 4f       	sbci	r31, 0xFF	; 255
    14da:	80 81       	ld	r24, Z
    14dc:	91 81       	ldd	r25, Z+1	; 0x01
    14de:	00 97       	sbiw	r24, 0x00	; 0
    14e0:	d1 f6       	brne	.-76     	; 0x1496 <main+0x906>
    14e2:	b5 cd       	rjmp	.-1174   	; 0x104e <main+0x4be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14e4:	8e 01       	movw	r16, r28
    14e6:	05 5b       	subi	r16, 0xB5	; 181
    14e8:	1f 4f       	sbci	r17, 0xFF	; 255
    14ea:	fe 01       	movw	r30, r28
    14ec:	e3 5b       	subi	r30, 0xB3	; 179
    14ee:	ff 4f       	sbci	r31, 0xFF	; 255
    14f0:	60 81       	ld	r22, Z
    14f2:	71 81       	ldd	r23, Z+1	; 0x01
    14f4:	82 81       	ldd	r24, Z+2	; 0x02
    14f6:	93 81       	ldd	r25, Z+3	; 0x03
    14f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14fc:	dc 01       	movw	r26, r24
    14fe:	cb 01       	movw	r24, r22
    1500:	f8 01       	movw	r30, r16
    1502:	91 83       	std	Z+1, r25	; 0x01
    1504:	80 83       	st	Z, r24
    1506:	de 01       	movw	r26, r28
    1508:	a9 5b       	subi	r26, 0xB9	; 185
    150a:	bf 4f       	sbci	r27, 0xFF	; 255
    150c:	fe 01       	movw	r30, r28
    150e:	e5 5b       	subi	r30, 0xB5	; 181
    1510:	ff 4f       	sbci	r31, 0xFF	; 255
    1512:	80 81       	ld	r24, Z
    1514:	91 81       	ldd	r25, Z+1	; 0x01
    1516:	11 96       	adiw	r26, 0x01	; 1
    1518:	9c 93       	st	X, r25
    151a:	8e 93       	st	-X, r24
    151c:	fe 01       	movw	r30, r28
    151e:	e9 5b       	subi	r30, 0xB9	; 185
    1520:	ff 4f       	sbci	r31, 0xFF	; 255
    1522:	80 81       	ld	r24, Z
    1524:	91 81       	ldd	r25, Z+1	; 0x01
    1526:	01 97       	sbiw	r24, 0x01	; 1
    1528:	f1 f7       	brne	.-4      	; 0x1526 <main+0x996>
    152a:	fe 01       	movw	r30, r28
    152c:	e9 5b       	subi	r30, 0xB9	; 185
    152e:	ff 4f       	sbci	r31, 0xFF	; 255
    1530:	91 83       	std	Z+1, r25	; 0x01
    1532:	80 83       	st	Z, r24
    1534:	8c cd       	rjmp	.-1256   	; 0x104e <main+0x4be>

					_delay_ms(1000);  /*Wait 1 second*/
					continue;   /*Repeat the same steps of main options*/
				}
				else if(receivedByte == CORRECT_PASS)
    1536:	fe 01       	movw	r30, r28
    1538:	e2 57       	subi	r30, 0x72	; 114
    153a:	ff 4f       	sbci	r31, 0xFF	; 255
    153c:	80 81       	ld	r24, Z
    153e:	82 30       	cpi	r24, 0x02	; 2
    1540:	09 f0       	breq	.+2      	; 0x1544 <main+0x9b4>
    1542:	85 cd       	rjmp	.-1270   	; 0x104e <main+0x4be>
					UART_sendByte(CONTINUE);
					continue;
#endif

                   /* code using delay function */
					while(UART_receiveByte() != OPEN_DOOR);  /*Wait until control_ECU send to open the door*/
    1544:	0e 94 3a 1a 	call	0x3474	; 0x3474 <UART_receiveByte>
    1548:	84 30       	cpi	r24, 0x04	; 4
    154a:	e1 f7       	brne	.-8      	; 0x1544 <main+0x9b4>

					LCD_clearScreen();
    154c:	0e 94 8a 18 	call	0x3114	; 0x3114 <LCD_clearScreen>
					LCD_displayStringRowColumn(0,0,"Door is Unlocking");
    1550:	22 ec       	ldi	r18, 0xC2	; 194
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	80 e0       	ldi	r24, 0x00	; 0
    1556:	60 e0       	ldi	r22, 0x00	; 0
    1558:	a9 01       	movw	r20, r18
    155a:	0e 94 46 18 	call	0x308c	; 0x308c <LCD_displayStringRowColumn>

					while(UART_receiveByte() != READY);
    155e:	0e 94 3a 1a 	call	0x3474	; 0x3474 <UART_receiveByte>
    1562:	81 30       	cpi	r24, 0x01	; 1
    1564:	e1 f7       	brne	.-8      	; 0x155e <main+0x9ce>
    1566:	fe 01       	movw	r30, r28
    1568:	ed 5b       	subi	r30, 0xBD	; 189
    156a:	ff 4f       	sbci	r31, 0xFF	; 255
    156c:	80 e0       	ldi	r24, 0x00	; 0
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	a8 e4       	ldi	r26, 0x48	; 72
    1572:	b2 e4       	ldi	r27, 0x42	; 66
    1574:	80 83       	st	Z, r24
    1576:	91 83       	std	Z+1, r25	; 0x01
    1578:	a2 83       	std	Z+2, r26	; 0x02
    157a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    157c:	8e 01       	movw	r16, r28
    157e:	01 5c       	subi	r16, 0xC1	; 193
    1580:	1f 4f       	sbci	r17, 0xFF	; 255
    1582:	fe 01       	movw	r30, r28
    1584:	ed 5b       	subi	r30, 0xBD	; 189
    1586:	ff 4f       	sbci	r31, 0xFF	; 255
    1588:	60 81       	ld	r22, Z
    158a:	71 81       	ldd	r23, Z+1	; 0x01
    158c:	82 81       	ldd	r24, Z+2	; 0x02
    158e:	93 81       	ldd	r25, Z+3	; 0x03
    1590:	20 e0       	ldi	r18, 0x00	; 0
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	4a e7       	ldi	r20, 0x7A	; 122
    1596:	53 e4       	ldi	r21, 0x43	; 67
    1598:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    159c:	dc 01       	movw	r26, r24
    159e:	cb 01       	movw	r24, r22
    15a0:	f8 01       	movw	r30, r16
    15a2:	80 83       	st	Z, r24
    15a4:	91 83       	std	Z+1, r25	; 0x01
    15a6:	a2 83       	std	Z+2, r26	; 0x02
    15a8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15aa:	fe 01       	movw	r30, r28
    15ac:	ff 96       	adiw	r30, 0x3f	; 63
    15ae:	60 81       	ld	r22, Z
    15b0:	71 81       	ldd	r23, Z+1	; 0x01
    15b2:	82 81       	ldd	r24, Z+2	; 0x02
    15b4:	93 81       	ldd	r25, Z+3	; 0x03
    15b6:	20 e0       	ldi	r18, 0x00	; 0
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	40 e8       	ldi	r20, 0x80	; 128
    15bc:	5f e3       	ldi	r21, 0x3F	; 63
    15be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15c2:	88 23       	and	r24, r24
    15c4:	2c f4       	brge	.+10     	; 0x15d0 <main+0xa40>
		__ticks = 1;
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	9e af       	std	Y+62, r25	; 0x3e
    15cc:	8d af       	std	Y+61, r24	; 0x3d
    15ce:	46 c0       	rjmp	.+140    	; 0x165c <main+0xacc>
	else if (__tmp > 65535)
    15d0:	fe 01       	movw	r30, r28
    15d2:	ff 96       	adiw	r30, 0x3f	; 63
    15d4:	60 81       	ld	r22, Z
    15d6:	71 81       	ldd	r23, Z+1	; 0x01
    15d8:	82 81       	ldd	r24, Z+2	; 0x02
    15da:	93 81       	ldd	r25, Z+3	; 0x03
    15dc:	20 e0       	ldi	r18, 0x00	; 0
    15de:	3f ef       	ldi	r19, 0xFF	; 255
    15e0:	4f e7       	ldi	r20, 0x7F	; 127
    15e2:	57 e4       	ldi	r21, 0x47	; 71
    15e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15e8:	18 16       	cp	r1, r24
    15ea:	64 f5       	brge	.+88     	; 0x1644 <main+0xab4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15ec:	fe 01       	movw	r30, r28
    15ee:	ed 5b       	subi	r30, 0xBD	; 189
    15f0:	ff 4f       	sbci	r31, 0xFF	; 255
    15f2:	60 81       	ld	r22, Z
    15f4:	71 81       	ldd	r23, Z+1	; 0x01
    15f6:	82 81       	ldd	r24, Z+2	; 0x02
    15f8:	93 81       	ldd	r25, Z+3	; 0x03
    15fa:	20 e0       	ldi	r18, 0x00	; 0
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	40 e2       	ldi	r20, 0x20	; 32
    1600:	51 e4       	ldi	r21, 0x41	; 65
    1602:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1606:	dc 01       	movw	r26, r24
    1608:	cb 01       	movw	r24, r22
    160a:	bc 01       	movw	r22, r24
    160c:	cd 01       	movw	r24, r26
    160e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1612:	dc 01       	movw	r26, r24
    1614:	cb 01       	movw	r24, r22
    1616:	9e af       	std	Y+62, r25	; 0x3e
    1618:	8d af       	std	Y+61, r24	; 0x3d
    161a:	0f c0       	rjmp	.+30     	; 0x163a <main+0xaaa>
    161c:	89 e1       	ldi	r24, 0x19	; 25
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	9c af       	std	Y+60, r25	; 0x3c
    1622:	8b af       	std	Y+59, r24	; 0x3b
    1624:	8b ad       	ldd	r24, Y+59	; 0x3b
    1626:	9c ad       	ldd	r25, Y+60	; 0x3c
    1628:	01 97       	sbiw	r24, 0x01	; 1
    162a:	f1 f7       	brne	.-4      	; 0x1628 <main+0xa98>
    162c:	9c af       	std	Y+60, r25	; 0x3c
    162e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1630:	8d ad       	ldd	r24, Y+61	; 0x3d
    1632:	9e ad       	ldd	r25, Y+62	; 0x3e
    1634:	01 97       	sbiw	r24, 0x01	; 1
    1636:	9e af       	std	Y+62, r25	; 0x3e
    1638:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    163a:	8d ad       	ldd	r24, Y+61	; 0x3d
    163c:	9e ad       	ldd	r25, Y+62	; 0x3e
    163e:	00 97       	sbiw	r24, 0x00	; 0
    1640:	69 f7       	brne	.-38     	; 0x161c <main+0xa8c>
    1642:	16 c0       	rjmp	.+44     	; 0x1670 <main+0xae0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1644:	fe 01       	movw	r30, r28
    1646:	ff 96       	adiw	r30, 0x3f	; 63
    1648:	60 81       	ld	r22, Z
    164a:	71 81       	ldd	r23, Z+1	; 0x01
    164c:	82 81       	ldd	r24, Z+2	; 0x02
    164e:	93 81       	ldd	r25, Z+3	; 0x03
    1650:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1654:	dc 01       	movw	r26, r24
    1656:	cb 01       	movw	r24, r22
    1658:	9e af       	std	Y+62, r25	; 0x3e
    165a:	8d af       	std	Y+61, r24	; 0x3d
    165c:	8d ad       	ldd	r24, Y+61	; 0x3d
    165e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1660:	9a af       	std	Y+58, r25	; 0x3a
    1662:	89 af       	std	Y+57, r24	; 0x39
    1664:	89 ad       	ldd	r24, Y+57	; 0x39
    1666:	9a ad       	ldd	r25, Y+58	; 0x3a
    1668:	01 97       	sbiw	r24, 0x01	; 1
    166a:	f1 f7       	brne	.-4      	; 0x1668 <main+0xad8>
    166c:	9a af       	std	Y+58, r25	; 0x3a
    166e:	89 af       	std	Y+57, r24	; 0x39
					_delay_ms(50);

					LCD_clearScreen();
    1670:	0e 94 8a 18 	call	0x3114	; 0x3114 <LCD_clearScreen>
					LCD_displayStringRowColumn(0,0,"#Door Unlocked#");
    1674:	24 ed       	ldi	r18, 0xD4	; 212
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	80 e0       	ldi	r24, 0x00	; 0
    167a:	60 e0       	ldi	r22, 0x00	; 0
    167c:	a9 01       	movw	r20, r18
    167e:	0e 94 46 18 	call	0x308c	; 0x308c <LCD_displayStringRowColumn>

					while(UART_receiveByte() != READY);
    1682:	0e 94 3a 1a 	call	0x3474	; 0x3474 <UART_receiveByte>
    1686:	81 30       	cpi	r24, 0x01	; 1
    1688:	e1 f7       	brne	.-8      	; 0x1682 <main+0xaf2>
    168a:	80 e0       	ldi	r24, 0x00	; 0
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	a8 e4       	ldi	r26, 0x48	; 72
    1690:	b2 e4       	ldi	r27, 0x42	; 66
    1692:	8d ab       	std	Y+53, r24	; 0x35
    1694:	9e ab       	std	Y+54, r25	; 0x36
    1696:	af ab       	std	Y+55, r26	; 0x37
    1698:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    169a:	6d a9       	ldd	r22, Y+53	; 0x35
    169c:	7e a9       	ldd	r23, Y+54	; 0x36
    169e:	8f a9       	ldd	r24, Y+55	; 0x37
    16a0:	98 ad       	ldd	r25, Y+56	; 0x38
    16a2:	20 e0       	ldi	r18, 0x00	; 0
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	4a e7       	ldi	r20, 0x7A	; 122
    16a8:	53 e4       	ldi	r21, 0x43	; 67
    16aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ae:	dc 01       	movw	r26, r24
    16b0:	cb 01       	movw	r24, r22
    16b2:	89 ab       	std	Y+49, r24	; 0x31
    16b4:	9a ab       	std	Y+50, r25	; 0x32
    16b6:	ab ab       	std	Y+51, r26	; 0x33
    16b8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    16ba:	69 a9       	ldd	r22, Y+49	; 0x31
    16bc:	7a a9       	ldd	r23, Y+50	; 0x32
    16be:	8b a9       	ldd	r24, Y+51	; 0x33
    16c0:	9c a9       	ldd	r25, Y+52	; 0x34
    16c2:	20 e0       	ldi	r18, 0x00	; 0
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	40 e8       	ldi	r20, 0x80	; 128
    16c8:	5f e3       	ldi	r21, 0x3F	; 63
    16ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16ce:	88 23       	and	r24, r24
    16d0:	2c f4       	brge	.+10     	; 0x16dc <main+0xb4c>
		__ticks = 1;
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	98 ab       	std	Y+48, r25	; 0x30
    16d8:	8f a7       	std	Y+47, r24	; 0x2f
    16da:	3f c0       	rjmp	.+126    	; 0x175a <main+0xbca>
	else if (__tmp > 65535)
    16dc:	69 a9       	ldd	r22, Y+49	; 0x31
    16de:	7a a9       	ldd	r23, Y+50	; 0x32
    16e0:	8b a9       	ldd	r24, Y+51	; 0x33
    16e2:	9c a9       	ldd	r25, Y+52	; 0x34
    16e4:	20 e0       	ldi	r18, 0x00	; 0
    16e6:	3f ef       	ldi	r19, 0xFF	; 255
    16e8:	4f e7       	ldi	r20, 0x7F	; 127
    16ea:	57 e4       	ldi	r21, 0x47	; 71
    16ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16f0:	18 16       	cp	r1, r24
    16f2:	4c f5       	brge	.+82     	; 0x1746 <main+0xbb6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16f4:	6d a9       	ldd	r22, Y+53	; 0x35
    16f6:	7e a9       	ldd	r23, Y+54	; 0x36
    16f8:	8f a9       	ldd	r24, Y+55	; 0x37
    16fa:	98 ad       	ldd	r25, Y+56	; 0x38
    16fc:	20 e0       	ldi	r18, 0x00	; 0
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	40 e2       	ldi	r20, 0x20	; 32
    1702:	51 e4       	ldi	r21, 0x41	; 65
    1704:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1708:	dc 01       	movw	r26, r24
    170a:	cb 01       	movw	r24, r22
    170c:	bc 01       	movw	r22, r24
    170e:	cd 01       	movw	r24, r26
    1710:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1714:	dc 01       	movw	r26, r24
    1716:	cb 01       	movw	r24, r22
    1718:	98 ab       	std	Y+48, r25	; 0x30
    171a:	8f a7       	std	Y+47, r24	; 0x2f
    171c:	0f c0       	rjmp	.+30     	; 0x173c <main+0xbac>
    171e:	89 e1       	ldi	r24, 0x19	; 25
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	9e a7       	std	Y+46, r25	; 0x2e
    1724:	8d a7       	std	Y+45, r24	; 0x2d
    1726:	8d a5       	ldd	r24, Y+45	; 0x2d
    1728:	9e a5       	ldd	r25, Y+46	; 0x2e
    172a:	01 97       	sbiw	r24, 0x01	; 1
    172c:	f1 f7       	brne	.-4      	; 0x172a <main+0xb9a>
    172e:	9e a7       	std	Y+46, r25	; 0x2e
    1730:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1732:	8f a5       	ldd	r24, Y+47	; 0x2f
    1734:	98 a9       	ldd	r25, Y+48	; 0x30
    1736:	01 97       	sbiw	r24, 0x01	; 1
    1738:	98 ab       	std	Y+48, r25	; 0x30
    173a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    173c:	8f a5       	ldd	r24, Y+47	; 0x2f
    173e:	98 a9       	ldd	r25, Y+48	; 0x30
    1740:	00 97       	sbiw	r24, 0x00	; 0
    1742:	69 f7       	brne	.-38     	; 0x171e <main+0xb8e>
    1744:	14 c0       	rjmp	.+40     	; 0x176e <main+0xbde>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1746:	69 a9       	ldd	r22, Y+49	; 0x31
    1748:	7a a9       	ldd	r23, Y+50	; 0x32
    174a:	8b a9       	ldd	r24, Y+51	; 0x33
    174c:	9c a9       	ldd	r25, Y+52	; 0x34
    174e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1752:	dc 01       	movw	r26, r24
    1754:	cb 01       	movw	r24, r22
    1756:	98 ab       	std	Y+48, r25	; 0x30
    1758:	8f a7       	std	Y+47, r24	; 0x2f
    175a:	8f a5       	ldd	r24, Y+47	; 0x2f
    175c:	98 a9       	ldd	r25, Y+48	; 0x30
    175e:	9c a7       	std	Y+44, r25	; 0x2c
    1760:	8b a7       	std	Y+43, r24	; 0x2b
    1762:	8b a5       	ldd	r24, Y+43	; 0x2b
    1764:	9c a5       	ldd	r25, Y+44	; 0x2c
    1766:	01 97       	sbiw	r24, 0x01	; 1
    1768:	f1 f7       	brne	.-4      	; 0x1766 <main+0xbd6>
    176a:	9c a7       	std	Y+44, r25	; 0x2c
    176c:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(50);

					LCD_clearScreen();
    176e:	0e 94 8a 18 	call	0x3114	; 0x3114 <LCD_clearScreen>
					LCD_displayStringRowColumn(0,0,"Door is locking");
    1772:	24 ee       	ldi	r18, 0xE4	; 228
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	80 e0       	ldi	r24, 0x00	; 0
    1778:	60 e0       	ldi	r22, 0x00	; 0
    177a:	a9 01       	movw	r20, r18
    177c:	0e 94 46 18 	call	0x308c	; 0x308c <LCD_displayStringRowColumn>

					while(UART_receiveByte() != READY);
    1780:	0e 94 3a 1a 	call	0x3474	; 0x3474 <UART_receiveByte>
    1784:	81 30       	cpi	r24, 0x01	; 1
    1786:	e1 f7       	brne	.-8      	; 0x1780 <main+0xbf0>
    1788:	80 e0       	ldi	r24, 0x00	; 0
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	a8 e4       	ldi	r26, 0x48	; 72
    178e:	b2 e4       	ldi	r27, 0x42	; 66
    1790:	8f a3       	std	Y+39, r24	; 0x27
    1792:	98 a7       	std	Y+40, r25	; 0x28
    1794:	a9 a7       	std	Y+41, r26	; 0x29
    1796:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1798:	6f a1       	ldd	r22, Y+39	; 0x27
    179a:	78 a5       	ldd	r23, Y+40	; 0x28
    179c:	89 a5       	ldd	r24, Y+41	; 0x29
    179e:	9a a5       	ldd	r25, Y+42	; 0x2a
    17a0:	20 e0       	ldi	r18, 0x00	; 0
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	4a e7       	ldi	r20, 0x7A	; 122
    17a6:	53 e4       	ldi	r21, 0x43	; 67
    17a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ac:	dc 01       	movw	r26, r24
    17ae:	cb 01       	movw	r24, r22
    17b0:	8b a3       	std	Y+35, r24	; 0x23
    17b2:	9c a3       	std	Y+36, r25	; 0x24
    17b4:	ad a3       	std	Y+37, r26	; 0x25
    17b6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    17b8:	6b a1       	ldd	r22, Y+35	; 0x23
    17ba:	7c a1       	ldd	r23, Y+36	; 0x24
    17bc:	8d a1       	ldd	r24, Y+37	; 0x25
    17be:	9e a1       	ldd	r25, Y+38	; 0x26
    17c0:	20 e0       	ldi	r18, 0x00	; 0
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	40 e8       	ldi	r20, 0x80	; 128
    17c6:	5f e3       	ldi	r21, 0x3F	; 63
    17c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17cc:	88 23       	and	r24, r24
    17ce:	2c f4       	brge	.+10     	; 0x17da <main+0xc4a>
		__ticks = 1;
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	9a a3       	std	Y+34, r25	; 0x22
    17d6:	89 a3       	std	Y+33, r24	; 0x21
    17d8:	3f c0       	rjmp	.+126    	; 0x1858 <main+0xcc8>
	else if (__tmp > 65535)
    17da:	6b a1       	ldd	r22, Y+35	; 0x23
    17dc:	7c a1       	ldd	r23, Y+36	; 0x24
    17de:	8d a1       	ldd	r24, Y+37	; 0x25
    17e0:	9e a1       	ldd	r25, Y+38	; 0x26
    17e2:	20 e0       	ldi	r18, 0x00	; 0
    17e4:	3f ef       	ldi	r19, 0xFF	; 255
    17e6:	4f e7       	ldi	r20, 0x7F	; 127
    17e8:	57 e4       	ldi	r21, 0x47	; 71
    17ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17ee:	18 16       	cp	r1, r24
    17f0:	4c f5       	brge	.+82     	; 0x1844 <main+0xcb4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17f2:	6f a1       	ldd	r22, Y+39	; 0x27
    17f4:	78 a5       	ldd	r23, Y+40	; 0x28
    17f6:	89 a5       	ldd	r24, Y+41	; 0x29
    17f8:	9a a5       	ldd	r25, Y+42	; 0x2a
    17fa:	20 e0       	ldi	r18, 0x00	; 0
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	40 e2       	ldi	r20, 0x20	; 32
    1800:	51 e4       	ldi	r21, 0x41	; 65
    1802:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1806:	dc 01       	movw	r26, r24
    1808:	cb 01       	movw	r24, r22
    180a:	bc 01       	movw	r22, r24
    180c:	cd 01       	movw	r24, r26
    180e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1812:	dc 01       	movw	r26, r24
    1814:	cb 01       	movw	r24, r22
    1816:	9a a3       	std	Y+34, r25	; 0x22
    1818:	89 a3       	std	Y+33, r24	; 0x21
    181a:	0f c0       	rjmp	.+30     	; 0x183a <main+0xcaa>
    181c:	89 e1       	ldi	r24, 0x19	; 25
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	98 a3       	std	Y+32, r25	; 0x20
    1822:	8f 8f       	std	Y+31, r24	; 0x1f
    1824:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1826:	98 a1       	ldd	r25, Y+32	; 0x20
    1828:	01 97       	sbiw	r24, 0x01	; 1
    182a:	f1 f7       	brne	.-4      	; 0x1828 <main+0xc98>
    182c:	98 a3       	std	Y+32, r25	; 0x20
    182e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1830:	89 a1       	ldd	r24, Y+33	; 0x21
    1832:	9a a1       	ldd	r25, Y+34	; 0x22
    1834:	01 97       	sbiw	r24, 0x01	; 1
    1836:	9a a3       	std	Y+34, r25	; 0x22
    1838:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    183a:	89 a1       	ldd	r24, Y+33	; 0x21
    183c:	9a a1       	ldd	r25, Y+34	; 0x22
    183e:	00 97       	sbiw	r24, 0x00	; 0
    1840:	69 f7       	brne	.-38     	; 0x181c <main+0xc8c>
    1842:	14 c0       	rjmp	.+40     	; 0x186c <main+0xcdc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1844:	6b a1       	ldd	r22, Y+35	; 0x23
    1846:	7c a1       	ldd	r23, Y+36	; 0x24
    1848:	8d a1       	ldd	r24, Y+37	; 0x25
    184a:	9e a1       	ldd	r25, Y+38	; 0x26
    184c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1850:	dc 01       	movw	r26, r24
    1852:	cb 01       	movw	r24, r22
    1854:	9a a3       	std	Y+34, r25	; 0x22
    1856:	89 a3       	std	Y+33, r24	; 0x21
    1858:	89 a1       	ldd	r24, Y+33	; 0x21
    185a:	9a a1       	ldd	r25, Y+34	; 0x22
    185c:	9e 8f       	std	Y+30, r25	; 0x1e
    185e:	8d 8f       	std	Y+29, r24	; 0x1d
    1860:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1862:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1864:	01 97       	sbiw	r24, 0x01	; 1
    1866:	f1 f7       	brne	.-4      	; 0x1864 <main+0xcd4>
    1868:	9e 8f       	std	Y+30, r25	; 0x1e
    186a:	8d 8f       	std	Y+29, r24	; 0x1d
					_delay_ms(50);

					LCD_clearScreen();
    186c:	0e 94 8a 18 	call	0x3114	; 0x3114 <LCD_clearScreen>
					LCD_displayStringRowColumn(0,0,"#Door Locked#");
    1870:	24 ef       	ldi	r18, 0xF4	; 244
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	80 e0       	ldi	r24, 0x00	; 0
    1876:	60 e0       	ldi	r22, 0x00	; 0
    1878:	a9 01       	movw	r20, r18
    187a:	0e 94 46 18 	call	0x308c	; 0x308c <LCD_displayStringRowColumn>

					while(UART_receiveByte() != READY);
    187e:	0e 94 3a 1a 	call	0x3474	; 0x3474 <UART_receiveByte>
    1882:	81 30       	cpi	r24, 0x01	; 1
    1884:	e1 f7       	brne	.-8      	; 0x187e <main+0xcee>
    1886:	80 e0       	ldi	r24, 0x00	; 0
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	a8 e4       	ldi	r26, 0x48	; 72
    188c:	b2 e4       	ldi	r27, 0x42	; 66
    188e:	89 8f       	std	Y+25, r24	; 0x19
    1890:	9a 8f       	std	Y+26, r25	; 0x1a
    1892:	ab 8f       	std	Y+27, r26	; 0x1b
    1894:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1896:	69 8d       	ldd	r22, Y+25	; 0x19
    1898:	7a 8d       	ldd	r23, Y+26	; 0x1a
    189a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    189c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    189e:	20 e0       	ldi	r18, 0x00	; 0
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	4a e7       	ldi	r20, 0x7A	; 122
    18a4:	53 e4       	ldi	r21, 0x43	; 67
    18a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18aa:	dc 01       	movw	r26, r24
    18ac:	cb 01       	movw	r24, r22
    18ae:	8d 8b       	std	Y+21, r24	; 0x15
    18b0:	9e 8b       	std	Y+22, r25	; 0x16
    18b2:	af 8b       	std	Y+23, r26	; 0x17
    18b4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18b6:	6d 89       	ldd	r22, Y+21	; 0x15
    18b8:	7e 89       	ldd	r23, Y+22	; 0x16
    18ba:	8f 89       	ldd	r24, Y+23	; 0x17
    18bc:	98 8d       	ldd	r25, Y+24	; 0x18
    18be:	20 e0       	ldi	r18, 0x00	; 0
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	40 e8       	ldi	r20, 0x80	; 128
    18c4:	5f e3       	ldi	r21, 0x3F	; 63
    18c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18ca:	88 23       	and	r24, r24
    18cc:	2c f4       	brge	.+10     	; 0x18d8 <main+0xd48>
		__ticks = 1;
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	9c 8b       	std	Y+20, r25	; 0x14
    18d4:	8b 8b       	std	Y+19, r24	; 0x13
    18d6:	3f c0       	rjmp	.+126    	; 0x1956 <main+0xdc6>
	else if (__tmp > 65535)
    18d8:	6d 89       	ldd	r22, Y+21	; 0x15
    18da:	7e 89       	ldd	r23, Y+22	; 0x16
    18dc:	8f 89       	ldd	r24, Y+23	; 0x17
    18de:	98 8d       	ldd	r25, Y+24	; 0x18
    18e0:	20 e0       	ldi	r18, 0x00	; 0
    18e2:	3f ef       	ldi	r19, 0xFF	; 255
    18e4:	4f e7       	ldi	r20, 0x7F	; 127
    18e6:	57 e4       	ldi	r21, 0x47	; 71
    18e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18ec:	18 16       	cp	r1, r24
    18ee:	4c f5       	brge	.+82     	; 0x1942 <main+0xdb2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18f0:	69 8d       	ldd	r22, Y+25	; 0x19
    18f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18f8:	20 e0       	ldi	r18, 0x00	; 0
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	40 e2       	ldi	r20, 0x20	; 32
    18fe:	51 e4       	ldi	r21, 0x41	; 65
    1900:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1904:	dc 01       	movw	r26, r24
    1906:	cb 01       	movw	r24, r22
    1908:	bc 01       	movw	r22, r24
    190a:	cd 01       	movw	r24, r26
    190c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1910:	dc 01       	movw	r26, r24
    1912:	cb 01       	movw	r24, r22
    1914:	9c 8b       	std	Y+20, r25	; 0x14
    1916:	8b 8b       	std	Y+19, r24	; 0x13
    1918:	0f c0       	rjmp	.+30     	; 0x1938 <main+0xda8>
    191a:	89 e1       	ldi	r24, 0x19	; 25
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	9a 8b       	std	Y+18, r25	; 0x12
    1920:	89 8b       	std	Y+17, r24	; 0x11
    1922:	89 89       	ldd	r24, Y+17	; 0x11
    1924:	9a 89       	ldd	r25, Y+18	; 0x12
    1926:	01 97       	sbiw	r24, 0x01	; 1
    1928:	f1 f7       	brne	.-4      	; 0x1926 <main+0xd96>
    192a:	9a 8b       	std	Y+18, r25	; 0x12
    192c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    192e:	8b 89       	ldd	r24, Y+19	; 0x13
    1930:	9c 89       	ldd	r25, Y+20	; 0x14
    1932:	01 97       	sbiw	r24, 0x01	; 1
    1934:	9c 8b       	std	Y+20, r25	; 0x14
    1936:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1938:	8b 89       	ldd	r24, Y+19	; 0x13
    193a:	9c 89       	ldd	r25, Y+20	; 0x14
    193c:	00 97       	sbiw	r24, 0x00	; 0
    193e:	69 f7       	brne	.-38     	; 0x191a <main+0xd8a>
    1940:	14 c0       	rjmp	.+40     	; 0x196a <main+0xdda>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1942:	6d 89       	ldd	r22, Y+21	; 0x15
    1944:	7e 89       	ldd	r23, Y+22	; 0x16
    1946:	8f 89       	ldd	r24, Y+23	; 0x17
    1948:	98 8d       	ldd	r25, Y+24	; 0x18
    194a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    194e:	dc 01       	movw	r26, r24
    1950:	cb 01       	movw	r24, r22
    1952:	9c 8b       	std	Y+20, r25	; 0x14
    1954:	8b 8b       	std	Y+19, r24	; 0x13
    1956:	8b 89       	ldd	r24, Y+19	; 0x13
    1958:	9c 89       	ldd	r25, Y+20	; 0x14
    195a:	98 8b       	std	Y+16, r25	; 0x10
    195c:	8f 87       	std	Y+15, r24	; 0x0f
    195e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1960:	98 89       	ldd	r25, Y+16	; 0x10
    1962:	01 97       	sbiw	r24, 0x01	; 1
    1964:	f1 f7       	brne	.-4      	; 0x1962 <main+0xdd2>
    1966:	98 8b       	std	Y+16, r25	; 0x10
    1968:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(50);

					trials = 0;   /*Reset the trials counter*/
    196a:	fe 01       	movw	r30, r28
    196c:	e3 57       	subi	r30, 0x73	; 115
    196e:	ff 4f       	sbci	r31, 0xFF	; 255
    1970:	10 82       	st	Z, r1

					UART_sendByte(CONTINUE);
    1972:	86 e0       	ldi	r24, 0x06	; 6
    1974:	0e 94 23 1a 	call	0x3446	; 0x3446 <UART_sendByte>
    1978:	6a cb       	rjmp	.-2348   	; 0x104e <main+0x4be>

					continue;
				}
			}

			else if(keyButton == '-')  /*Change the password*/
    197a:	fe 01       	movw	r30, r28
    197c:	e1 57       	subi	r30, 0x71	; 113
    197e:	ff 4f       	sbci	r31, 0xFF	; 255
    1980:	80 81       	ld	r24, Z
    1982:	8d 32       	cpi	r24, 0x2D	; 45
    1984:	09 f0       	breq	.+2      	; 0x1988 <main+0xdf8>
    1986:	63 cb       	rjmp	.-2362   	; 0x104e <main+0x4be>
			{
				receivedByte = check_mainOptionPassword(pass1,trials,CHANGE_PASS);
    1988:	ce 01       	movw	r24, r28
    198a:	80 57       	subi	r24, 0x70	; 112
    198c:	9f 4f       	sbci	r25, 0xFF	; 255
    198e:	fe 01       	movw	r30, r28
    1990:	e3 57       	subi	r30, 0x73	; 115
    1992:	ff 4f       	sbci	r31, 0xFF	; 255
    1994:	60 81       	ld	r22, Z
    1996:	45 e0       	ldi	r20, 0x05	; 5
    1998:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <check_mainOptionPassword>
    199c:	fe 01       	movw	r30, r28
    199e:	e2 57       	subi	r30, 0x72	; 114
    19a0:	ff 4f       	sbci	r31, 0xFF	; 255
    19a2:	80 83       	st	Z, r24

				if(receivedByte == INCORRECT_PASS)
    19a4:	fe 01       	movw	r30, r28
    19a6:	e2 57       	subi	r30, 0x72	; 114
    19a8:	ff 4f       	sbci	r31, 0xFF	; 255
    19aa:	80 81       	ld	r24, Z
    19ac:	83 30       	cpi	r24, 0x03	; 3
    19ae:	09 f0       	breq	.+2      	; 0x19b2 <main+0xe22>
    19b0:	85 c0       	rjmp	.+266    	; 0x1abc <main+0xf2c>
				{
					trials++;   /*Increment the incorrect trials counter*/
    19b2:	de 01       	movw	r26, r28
    19b4:	a3 57       	subi	r26, 0x73	; 115
    19b6:	bf 4f       	sbci	r27, 0xFF	; 255
    19b8:	fe 01       	movw	r30, r28
    19ba:	e3 57       	subi	r30, 0x73	; 115
    19bc:	ff 4f       	sbci	r31, 0xFF	; 255
    19be:	80 81       	ld	r24, Z
    19c0:	8f 5f       	subi	r24, 0xFF	; 255
    19c2:	8c 93       	st	X, r24
					LCD_clearScreen();
    19c4:	0e 94 8a 18 	call	0x3114	; 0x3114 <LCD_clearScreen>
					LCD_displayStringRowColumn(0,0,"Incorrect Pass");
    19c8:	23 eb       	ldi	r18, 0xB3	; 179
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	80 e0       	ldi	r24, 0x00	; 0
    19ce:	60 e0       	ldi	r22, 0x00	; 0
    19d0:	a9 01       	movw	r20, r18
    19d2:	0e 94 46 18 	call	0x308c	; 0x308c <LCD_displayStringRowColumn>
    19d6:	80 e0       	ldi	r24, 0x00	; 0
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	aa e7       	ldi	r26, 0x7A	; 122
    19dc:	b4 e4       	ldi	r27, 0x44	; 68
    19de:	8b 87       	std	Y+11, r24	; 0x0b
    19e0:	9c 87       	std	Y+12, r25	; 0x0c
    19e2:	ad 87       	std	Y+13, r26	; 0x0d
    19e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    19e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    19ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    19ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    19ee:	20 e0       	ldi	r18, 0x00	; 0
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	4a e7       	ldi	r20, 0x7A	; 122
    19f4:	53 e4       	ldi	r21, 0x43	; 67
    19f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19fa:	dc 01       	movw	r26, r24
    19fc:	cb 01       	movw	r24, r22
    19fe:	8f 83       	std	Y+7, r24	; 0x07
    1a00:	98 87       	std	Y+8, r25	; 0x08
    1a02:	a9 87       	std	Y+9, r26	; 0x09
    1a04:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a06:	6f 81       	ldd	r22, Y+7	; 0x07
    1a08:	78 85       	ldd	r23, Y+8	; 0x08
    1a0a:	89 85       	ldd	r24, Y+9	; 0x09
    1a0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a0e:	20 e0       	ldi	r18, 0x00	; 0
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	40 e8       	ldi	r20, 0x80	; 128
    1a14:	5f e3       	ldi	r21, 0x3F	; 63
    1a16:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a1a:	88 23       	and	r24, r24
    1a1c:	2c f4       	brge	.+10     	; 0x1a28 <main+0xe98>
		__ticks = 1;
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	9e 83       	std	Y+6, r25	; 0x06
    1a24:	8d 83       	std	Y+5, r24	; 0x05
    1a26:	3f c0       	rjmp	.+126    	; 0x1aa6 <main+0xf16>
	else if (__tmp > 65535)
    1a28:	6f 81       	ldd	r22, Y+7	; 0x07
    1a2a:	78 85       	ldd	r23, Y+8	; 0x08
    1a2c:	89 85       	ldd	r24, Y+9	; 0x09
    1a2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a30:	20 e0       	ldi	r18, 0x00	; 0
    1a32:	3f ef       	ldi	r19, 0xFF	; 255
    1a34:	4f e7       	ldi	r20, 0x7F	; 127
    1a36:	57 e4       	ldi	r21, 0x47	; 71
    1a38:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a3c:	18 16       	cp	r1, r24
    1a3e:	4c f5       	brge	.+82     	; 0x1a92 <main+0xf02>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a40:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a42:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a44:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a46:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a48:	20 e0       	ldi	r18, 0x00	; 0
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	40 e2       	ldi	r20, 0x20	; 32
    1a4e:	51 e4       	ldi	r21, 0x41	; 65
    1a50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a54:	dc 01       	movw	r26, r24
    1a56:	cb 01       	movw	r24, r22
    1a58:	bc 01       	movw	r22, r24
    1a5a:	cd 01       	movw	r24, r26
    1a5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a60:	dc 01       	movw	r26, r24
    1a62:	cb 01       	movw	r24, r22
    1a64:	9e 83       	std	Y+6, r25	; 0x06
    1a66:	8d 83       	std	Y+5, r24	; 0x05
    1a68:	0f c0       	rjmp	.+30     	; 0x1a88 <main+0xef8>
    1a6a:	89 e1       	ldi	r24, 0x19	; 25
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	9c 83       	std	Y+4, r25	; 0x04
    1a70:	8b 83       	std	Y+3, r24	; 0x03
    1a72:	8b 81       	ldd	r24, Y+3	; 0x03
    1a74:	9c 81       	ldd	r25, Y+4	; 0x04
    1a76:	01 97       	sbiw	r24, 0x01	; 1
    1a78:	f1 f7       	brne	.-4      	; 0x1a76 <main+0xee6>
    1a7a:	9c 83       	std	Y+4, r25	; 0x04
    1a7c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a80:	9e 81       	ldd	r25, Y+6	; 0x06
    1a82:	01 97       	sbiw	r24, 0x01	; 1
    1a84:	9e 83       	std	Y+6, r25	; 0x06
    1a86:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a88:	8d 81       	ldd	r24, Y+5	; 0x05
    1a8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a8c:	00 97       	sbiw	r24, 0x00	; 0
    1a8e:	69 f7       	brne	.-38     	; 0x1a6a <main+0xeda>
    1a90:	de ca       	rjmp	.-2628   	; 0x104e <main+0x4be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a92:	6f 81       	ldd	r22, Y+7	; 0x07
    1a94:	78 85       	ldd	r23, Y+8	; 0x08
    1a96:	89 85       	ldd	r24, Y+9	; 0x09
    1a98:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a9e:	dc 01       	movw	r26, r24
    1aa0:	cb 01       	movw	r24, r22
    1aa2:	9e 83       	std	Y+6, r25	; 0x06
    1aa4:	8d 83       	std	Y+5, r24	; 0x05
    1aa6:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa8:	9e 81       	ldd	r25, Y+6	; 0x06
    1aaa:	9a 83       	std	Y+2, r25	; 0x02
    1aac:	89 83       	std	Y+1, r24	; 0x01
    1aae:	89 81       	ldd	r24, Y+1	; 0x01
    1ab0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab2:	01 97       	sbiw	r24, 0x01	; 1
    1ab4:	f1 f7       	brne	.-4      	; 0x1ab2 <main+0xf22>
    1ab6:	9a 83       	std	Y+2, r25	; 0x02
    1ab8:	89 83       	std	Y+1, r24	; 0x01
    1aba:	c9 ca       	rjmp	.-2670   	; 0x104e <main+0x4be>

					_delay_ms(1000);  /*Wait 1 second*/
					continue; /*Repeat the same steps of main options*/
				}
				else if(receivedByte == CORRECT_PASS)
    1abc:	fe 01       	movw	r30, r28
    1abe:	e2 57       	subi	r30, 0x72	; 114
    1ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac2:	80 81       	ld	r24, Z
    1ac4:	82 30       	cpi	r24, 0x02	; 2
    1ac6:	09 f0       	breq	.+2      	; 0x1aca <main+0xf3a>
    1ac8:	c2 ca       	rjmp	.-2684   	; 0x104e <main+0x4be>
				{
					trials = 0;
    1aca:	fe 01       	movw	r30, r28
    1acc:	e3 57       	subi	r30, 0x73	; 115
    1ace:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad0:	10 82       	st	Z, r1
    1ad2:	19 c9       	rjmp	.-3534   	; 0xd06 <main+0x176>

00001ad4 <get_password>:
/*
 * Description:
 * Function to get the password from user by keypad.
 */
void get_password(uint8 *a_str)
{
    1ad4:	0f 93       	push	r16
    1ad6:	1f 93       	push	r17
    1ad8:	df 93       	push	r29
    1ada:	cf 93       	push	r28
    1adc:	cd b7       	in	r28, 0x3d	; 61
    1ade:	de b7       	in	r29, 0x3e	; 62
    1ae0:	6f 97       	sbiw	r28, 0x1f	; 31
    1ae2:	0f b6       	in	r0, 0x3f	; 63
    1ae4:	f8 94       	cli
    1ae6:	de bf       	out	0x3e, r29	; 62
    1ae8:	0f be       	out	0x3f, r0	; 63
    1aea:	cd bf       	out	0x3d, r28	; 61
    1aec:	9f 8f       	std	Y+31, r25	; 0x1f
    1aee:	8e 8f       	std	Y+30, r24	; 0x1e
	uint8 i = 0;
    1af0:	1d 8e       	std	Y+29, r1	; 0x1d

	for(i=0;i<ARR_SIZE-1;i++)  /*Password consists of 5 characters*/
    1af2:	1d 8e       	std	Y+29, r1	; 0x1d
    1af4:	84 c0       	rjmp	.+264    	; 0x1bfe <get_password+0x12a>
	{
		a_str[i] = KEYPAD_getPressedKey();
    1af6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1af8:	28 2f       	mov	r18, r24
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1afe:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1b00:	8c 01       	movw	r16, r24
    1b02:	02 0f       	add	r16, r18
    1b04:	13 1f       	adc	r17, r19
    1b06:	0e 94 62 12 	call	0x24c4	; 0x24c4 <KEYPAD_getPressedKey>
    1b0a:	f8 01       	movw	r30, r16
    1b0c:	80 83       	st	Z, r24
		LCD_displayCharacter('*');
    1b0e:	8a e2       	ldi	r24, 0x2A	; 42
    1b10:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <LCD_displayCharacter>
    1b14:	80 e0       	ldi	r24, 0x00	; 0
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	aa ef       	ldi	r26, 0xFA	; 250
    1b1a:	b3 e4       	ldi	r27, 0x43	; 67
    1b1c:	89 8f       	std	Y+25, r24	; 0x19
    1b1e:	9a 8f       	std	Y+26, r25	; 0x1a
    1b20:	ab 8f       	std	Y+27, r26	; 0x1b
    1b22:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b24:	69 8d       	ldd	r22, Y+25	; 0x19
    1b26:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b28:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b2a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b2c:	20 e0       	ldi	r18, 0x00	; 0
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	4a e7       	ldi	r20, 0x7A	; 122
    1b32:	53 e4       	ldi	r21, 0x43	; 67
    1b34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b38:	dc 01       	movw	r26, r24
    1b3a:	cb 01       	movw	r24, r22
    1b3c:	8d 8b       	std	Y+21, r24	; 0x15
    1b3e:	9e 8b       	std	Y+22, r25	; 0x16
    1b40:	af 8b       	std	Y+23, r26	; 0x17
    1b42:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b44:	6d 89       	ldd	r22, Y+21	; 0x15
    1b46:	7e 89       	ldd	r23, Y+22	; 0x16
    1b48:	8f 89       	ldd	r24, Y+23	; 0x17
    1b4a:	98 8d       	ldd	r25, Y+24	; 0x18
    1b4c:	20 e0       	ldi	r18, 0x00	; 0
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	40 e8       	ldi	r20, 0x80	; 128
    1b52:	5f e3       	ldi	r21, 0x3F	; 63
    1b54:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b58:	88 23       	and	r24, r24
    1b5a:	2c f4       	brge	.+10     	; 0x1b66 <get_password+0x92>
		__ticks = 1;
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	9c 8b       	std	Y+20, r25	; 0x14
    1b62:	8b 8b       	std	Y+19, r24	; 0x13
    1b64:	3f c0       	rjmp	.+126    	; 0x1be4 <get_password+0x110>
	else if (__tmp > 65535)
    1b66:	6d 89       	ldd	r22, Y+21	; 0x15
    1b68:	7e 89       	ldd	r23, Y+22	; 0x16
    1b6a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b6c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b6e:	20 e0       	ldi	r18, 0x00	; 0
    1b70:	3f ef       	ldi	r19, 0xFF	; 255
    1b72:	4f e7       	ldi	r20, 0x7F	; 127
    1b74:	57 e4       	ldi	r21, 0x47	; 71
    1b76:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b7a:	18 16       	cp	r1, r24
    1b7c:	4c f5       	brge	.+82     	; 0x1bd0 <get_password+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b7e:	69 8d       	ldd	r22, Y+25	; 0x19
    1b80:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b82:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b84:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b86:	20 e0       	ldi	r18, 0x00	; 0
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	40 e2       	ldi	r20, 0x20	; 32
    1b8c:	51 e4       	ldi	r21, 0x41	; 65
    1b8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b92:	dc 01       	movw	r26, r24
    1b94:	cb 01       	movw	r24, r22
    1b96:	bc 01       	movw	r22, r24
    1b98:	cd 01       	movw	r24, r26
    1b9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b9e:	dc 01       	movw	r26, r24
    1ba0:	cb 01       	movw	r24, r22
    1ba2:	9c 8b       	std	Y+20, r25	; 0x14
    1ba4:	8b 8b       	std	Y+19, r24	; 0x13
    1ba6:	0f c0       	rjmp	.+30     	; 0x1bc6 <get_password+0xf2>
    1ba8:	89 e1       	ldi	r24, 0x19	; 25
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	9a 8b       	std	Y+18, r25	; 0x12
    1bae:	89 8b       	std	Y+17, r24	; 0x11
    1bb0:	89 89       	ldd	r24, Y+17	; 0x11
    1bb2:	9a 89       	ldd	r25, Y+18	; 0x12
    1bb4:	01 97       	sbiw	r24, 0x01	; 1
    1bb6:	f1 f7       	brne	.-4      	; 0x1bb4 <get_password+0xe0>
    1bb8:	9a 8b       	std	Y+18, r25	; 0x12
    1bba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bbc:	8b 89       	ldd	r24, Y+19	; 0x13
    1bbe:	9c 89       	ldd	r25, Y+20	; 0x14
    1bc0:	01 97       	sbiw	r24, 0x01	; 1
    1bc2:	9c 8b       	std	Y+20, r25	; 0x14
    1bc4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bc6:	8b 89       	ldd	r24, Y+19	; 0x13
    1bc8:	9c 89       	ldd	r25, Y+20	; 0x14
    1bca:	00 97       	sbiw	r24, 0x00	; 0
    1bcc:	69 f7       	brne	.-38     	; 0x1ba8 <get_password+0xd4>
    1bce:	14 c0       	rjmp	.+40     	; 0x1bf8 <get_password+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bd0:	6d 89       	ldd	r22, Y+21	; 0x15
    1bd2:	7e 89       	ldd	r23, Y+22	; 0x16
    1bd4:	8f 89       	ldd	r24, Y+23	; 0x17
    1bd6:	98 8d       	ldd	r25, Y+24	; 0x18
    1bd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bdc:	dc 01       	movw	r26, r24
    1bde:	cb 01       	movw	r24, r22
    1be0:	9c 8b       	std	Y+20, r25	; 0x14
    1be2:	8b 8b       	std	Y+19, r24	; 0x13
    1be4:	8b 89       	ldd	r24, Y+19	; 0x13
    1be6:	9c 89       	ldd	r25, Y+20	; 0x14
    1be8:	98 8b       	std	Y+16, r25	; 0x10
    1bea:	8f 87       	std	Y+15, r24	; 0x0f
    1bec:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bee:	98 89       	ldd	r25, Y+16	; 0x10
    1bf0:	01 97       	sbiw	r24, 0x01	; 1
    1bf2:	f1 f7       	brne	.-4      	; 0x1bf0 <get_password+0x11c>
    1bf4:	98 8b       	std	Y+16, r25	; 0x10
    1bf6:	8f 87       	std	Y+15, r24	; 0x0f
 */
void get_password(uint8 *a_str)
{
	uint8 i = 0;

	for(i=0;i<ARR_SIZE-1;i++)  /*Password consists of 5 characters*/
    1bf8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bfa:	8f 5f       	subi	r24, 0xFF	; 255
    1bfc:	8d 8f       	std	Y+29, r24	; 0x1d
    1bfe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c00:	85 30       	cpi	r24, 0x05	; 5
    1c02:	08 f4       	brcc	.+2      	; 0x1c06 <get_password+0x132>
    1c04:	78 cf       	rjmp	.-272    	; 0x1af6 <get_password+0x22>
	{
		a_str[i] = KEYPAD_getPressedKey();
		LCD_displayCharacter('*');
		_delay_ms(500);
	}
	while(KEYPAD_getPressedKey() != ENTER_BUTTON);  /*Wait until enter button is pressed*/
    1c06:	0e 94 62 12 	call	0x24c4	; 0x24c4 <KEYPAD_getPressedKey>
    1c0a:	8d 33       	cpi	r24, 0x3D	; 61
    1c0c:	e1 f7       	brne	.-8      	; 0x1c06 <get_password+0x132>
    1c0e:	80 e0       	ldi	r24, 0x00	; 0
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	a6 e9       	ldi	r26, 0x96	; 150
    1c14:	b3 e4       	ldi	r27, 0x43	; 67
    1c16:	8b 87       	std	Y+11, r24	; 0x0b
    1c18:	9c 87       	std	Y+12, r25	; 0x0c
    1c1a:	ad 87       	std	Y+13, r26	; 0x0d
    1c1c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c20:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c22:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c24:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c26:	20 e0       	ldi	r18, 0x00	; 0
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	4a e7       	ldi	r20, 0x7A	; 122
    1c2c:	53 e4       	ldi	r21, 0x43	; 67
    1c2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c32:	dc 01       	movw	r26, r24
    1c34:	cb 01       	movw	r24, r22
    1c36:	8f 83       	std	Y+7, r24	; 0x07
    1c38:	98 87       	std	Y+8, r25	; 0x08
    1c3a:	a9 87       	std	Y+9, r26	; 0x09
    1c3c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1c40:	78 85       	ldd	r23, Y+8	; 0x08
    1c42:	89 85       	ldd	r24, Y+9	; 0x09
    1c44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c46:	20 e0       	ldi	r18, 0x00	; 0
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	40 e8       	ldi	r20, 0x80	; 128
    1c4c:	5f e3       	ldi	r21, 0x3F	; 63
    1c4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c52:	88 23       	and	r24, r24
    1c54:	2c f4       	brge	.+10     	; 0x1c60 <get_password+0x18c>
		__ticks = 1;
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	9e 83       	std	Y+6, r25	; 0x06
    1c5c:	8d 83       	std	Y+5, r24	; 0x05
    1c5e:	3f c0       	rjmp	.+126    	; 0x1cde <get_password+0x20a>
	else if (__tmp > 65535)
    1c60:	6f 81       	ldd	r22, Y+7	; 0x07
    1c62:	78 85       	ldd	r23, Y+8	; 0x08
    1c64:	89 85       	ldd	r24, Y+9	; 0x09
    1c66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c68:	20 e0       	ldi	r18, 0x00	; 0
    1c6a:	3f ef       	ldi	r19, 0xFF	; 255
    1c6c:	4f e7       	ldi	r20, 0x7F	; 127
    1c6e:	57 e4       	ldi	r21, 0x47	; 71
    1c70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c74:	18 16       	cp	r1, r24
    1c76:	4c f5       	brge	.+82     	; 0x1cca <get_password+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c78:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c80:	20 e0       	ldi	r18, 0x00	; 0
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	40 e2       	ldi	r20, 0x20	; 32
    1c86:	51 e4       	ldi	r21, 0x41	; 65
    1c88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c8c:	dc 01       	movw	r26, r24
    1c8e:	cb 01       	movw	r24, r22
    1c90:	bc 01       	movw	r22, r24
    1c92:	cd 01       	movw	r24, r26
    1c94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c98:	dc 01       	movw	r26, r24
    1c9a:	cb 01       	movw	r24, r22
    1c9c:	9e 83       	std	Y+6, r25	; 0x06
    1c9e:	8d 83       	std	Y+5, r24	; 0x05
    1ca0:	0f c0       	rjmp	.+30     	; 0x1cc0 <get_password+0x1ec>
    1ca2:	89 e1       	ldi	r24, 0x19	; 25
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	9c 83       	std	Y+4, r25	; 0x04
    1ca8:	8b 83       	std	Y+3, r24	; 0x03
    1caa:	8b 81       	ldd	r24, Y+3	; 0x03
    1cac:	9c 81       	ldd	r25, Y+4	; 0x04
    1cae:	01 97       	sbiw	r24, 0x01	; 1
    1cb0:	f1 f7       	brne	.-4      	; 0x1cae <get_password+0x1da>
    1cb2:	9c 83       	std	Y+4, r25	; 0x04
    1cb4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1cb8:	9e 81       	ldd	r25, Y+6	; 0x06
    1cba:	01 97       	sbiw	r24, 0x01	; 1
    1cbc:	9e 83       	std	Y+6, r25	; 0x06
    1cbe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cc0:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc2:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc4:	00 97       	sbiw	r24, 0x00	; 0
    1cc6:	69 f7       	brne	.-38     	; 0x1ca2 <get_password+0x1ce>
    1cc8:	14 c0       	rjmp	.+40     	; 0x1cf2 <get_password+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cca:	6f 81       	ldd	r22, Y+7	; 0x07
    1ccc:	78 85       	ldd	r23, Y+8	; 0x08
    1cce:	89 85       	ldd	r24, Y+9	; 0x09
    1cd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd6:	dc 01       	movw	r26, r24
    1cd8:	cb 01       	movw	r24, r22
    1cda:	9e 83       	std	Y+6, r25	; 0x06
    1cdc:	8d 83       	std	Y+5, r24	; 0x05
    1cde:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce2:	9a 83       	std	Y+2, r25	; 0x02
    1ce4:	89 83       	std	Y+1, r24	; 0x01
    1ce6:	89 81       	ldd	r24, Y+1	; 0x01
    1ce8:	9a 81       	ldd	r25, Y+2	; 0x02
    1cea:	01 97       	sbiw	r24, 0x01	; 1
    1cec:	f1 f7       	brne	.-4      	; 0x1cea <get_password+0x216>
    1cee:	9a 83       	std	Y+2, r25	; 0x02
    1cf0:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(300);

	a_str[ARR_SIZE-1] = '#';   /*In ordered to received correct string by UART*/
    1cf2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1cf4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1cf6:	fc 01       	movw	r30, r24
    1cf8:	35 96       	adiw	r30, 0x05	; 5
    1cfa:	83 e2       	ldi	r24, 0x23	; 35
    1cfc:	80 83       	st	Z, r24
	a_str[ARR_SIZE] = '\0';   /*Put Null inside the array to become a string*/
    1cfe:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d00:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1d02:	fc 01       	movw	r30, r24
    1d04:	36 96       	adiw	r30, 0x06	; 6
    1d06:	10 82       	st	Z, r1
}
    1d08:	6f 96       	adiw	r28, 0x1f	; 31
    1d0a:	0f b6       	in	r0, 0x3f	; 63
    1d0c:	f8 94       	cli
    1d0e:	de bf       	out	0x3e, r29	; 62
    1d10:	0f be       	out	0x3f, r0	; 63
    1d12:	cd bf       	out	0x3d, r28	; 61
    1d14:	cf 91       	pop	r28
    1d16:	df 91       	pop	r29
    1d18:	1f 91       	pop	r17
    1d1a:	0f 91       	pop	r16
    1d1c:	08 95       	ret

00001d1e <check_createdPassword>:
 * Function that takes two passwords.
 * Send them by UART to control_ECU to check if they are the same.
 * Return byte that describe if password are correct or not.
 */
uint8 check_createdPassword(uint8 *a_str1,uint8 *a_str2)
{
    1d1e:	df 93       	push	r29
    1d20:	cf 93       	push	r28
    1d22:	00 d0       	rcall	.+0      	; 0x1d24 <check_createdPassword+0x6>
    1d24:	00 d0       	rcall	.+0      	; 0x1d26 <check_createdPassword+0x8>
    1d26:	cd b7       	in	r28, 0x3d	; 61
    1d28:	de b7       	in	r29, 0x3e	; 62
    1d2a:	9a 83       	std	Y+2, r25	; 0x02
    1d2c:	89 83       	std	Y+1, r24	; 0x01
    1d2e:	7c 83       	std	Y+4, r23	; 0x04
    1d30:	6b 83       	std	Y+3, r22	; 0x03
	UART_sendByte(READY);
    1d32:	81 e0       	ldi	r24, 0x01	; 1
    1d34:	0e 94 23 1a 	call	0x3446	; 0x3446 <UART_sendByte>
	UART_sendString(a_str1);
    1d38:	89 81       	ldd	r24, Y+1	; 0x01
    1d3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d3c:	0e 94 49 1a 	call	0x3492	; 0x3492 <UART_sendString>
	UART_sendString(a_str2);
    1d40:	8b 81       	ldd	r24, Y+3	; 0x03
    1d42:	9c 81       	ldd	r25, Y+4	; 0x04
    1d44:	0e 94 49 1a 	call	0x3492	; 0x3492 <UART_sendString>

	while(UART_receiveByte() != READY);   /*Wait until the control_ECU check the two passwords*/
    1d48:	0e 94 3a 1a 	call	0x3474	; 0x3474 <UART_receiveByte>
    1d4c:	81 30       	cpi	r24, 0x01	; 1
    1d4e:	e1 f7       	brne	.-8      	; 0x1d48 <check_createdPassword+0x2a>

	return UART_receiveByte();     /*Read the byte received from control_ECU*/
    1d50:	0e 94 3a 1a 	call	0x3474	; 0x3474 <UART_receiveByte>
}
    1d54:	0f 90       	pop	r0
    1d56:	0f 90       	pop	r0
    1d58:	0f 90       	pop	r0
    1d5a:	0f 90       	pop	r0
    1d5c:	cf 91       	pop	r28
    1d5e:	df 91       	pop	r29
    1d60:	08 95       	ret

00001d62 <check_mainOptionPassword>:
 * It takes our current step and the number of trials we have.
 * Send it by UART to control_ECU to check if it is correct.
 * Return byte that describe if password are correct or not.
 */
uint8 check_mainOptionPassword(uint8 *a_str,uint8 trials,uint8 step)
{
    1d62:	df 93       	push	r29
    1d64:	cf 93       	push	r28
    1d66:	00 d0       	rcall	.+0      	; 0x1d68 <check_mainOptionPassword+0x6>
    1d68:	00 d0       	rcall	.+0      	; 0x1d6a <check_mainOptionPassword+0x8>
    1d6a:	00 d0       	rcall	.+0      	; 0x1d6c <check_mainOptionPassword+0xa>
    1d6c:	cd b7       	in	r28, 0x3d	; 61
    1d6e:	de b7       	in	r29, 0x3e	; 62
    1d70:	9a 83       	std	Y+2, r25	; 0x02
    1d72:	89 83       	std	Y+1, r24	; 0x01
    1d74:	6b 83       	std	Y+3, r22	; 0x03
    1d76:	4c 83       	std	Y+4, r20	; 0x04
	/*Ask the user to write the password*/
	LCD_clearScreen();
    1d78:	0e 94 8a 18 	call	0x3114	; 0x3114 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"PLZ Enter Pass:");
    1d7c:	22 e0       	ldi	r18, 0x02	; 2
    1d7e:	31 e0       	ldi	r19, 0x01	; 1
    1d80:	80 e0       	ldi	r24, 0x00	; 0
    1d82:	60 e0       	ldi	r22, 0x00	; 0
    1d84:	a9 01       	movw	r20, r18
    1d86:	0e 94 46 18 	call	0x308c	; 0x308c <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"[ ]:");
    1d8a:	22 e1       	ldi	r18, 0x12	; 18
    1d8c:	31 e0       	ldi	r19, 0x01	; 1
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
    1d90:	60 e0       	ldi	r22, 0x00	; 0
    1d92:	a9 01       	movw	r20, r18
    1d94:	0e 94 46 18 	call	0x308c	; 0x308c <LCD_displayStringRowColumn>
	LCD_moveCursor(1,1);
    1d98:	81 e0       	ldi	r24, 0x01	; 1
    1d9a:	61 e0       	ldi	r22, 0x01	; 1
    1d9c:	0e 94 04 18 	call	0x3008	; 0x3008 <LCD_moveCursor>
	LCD_intgerToString(trials+1);
    1da0:	8b 81       	ldd	r24, Y+3	; 0x03
    1da2:	88 2f       	mov	r24, r24
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	01 96       	adiw	r24, 0x01	; 1
    1da8:	0e 94 5f 18 	call	0x30be	; 0x30be <LCD_intgerToString>

	LCD_moveCursor(1,4);  /*Set the display screen before calling the function*/
    1dac:	81 e0       	ldi	r24, 0x01	; 1
    1dae:	64 e0       	ldi	r22, 0x04	; 4
    1db0:	0e 94 04 18 	call	0x3008	; 0x3008 <LCD_moveCursor>
	get_password(a_str);  /*Get the password*/
    1db4:	89 81       	ldd	r24, Y+1	; 0x01
    1db6:	9a 81       	ldd	r25, Y+2	; 0x02
    1db8:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <get_password>

	/*Send the password to control_ECU to compare it with one saved in EEPROM*/
	UART_sendByte(READY);
    1dbc:	81 e0       	ldi	r24, 0x01	; 1
    1dbe:	0e 94 23 1a 	call	0x3446	; 0x3446 <UART_sendByte>

	/*Switch on the current step in the operation*/
	switch (step)
    1dc2:	8c 81       	ldd	r24, Y+4	; 0x04
    1dc4:	28 2f       	mov	r18, r24
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	3e 83       	std	Y+6, r19	; 0x06
    1dca:	2d 83       	std	Y+5, r18	; 0x05
    1dcc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dce:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd0:	84 30       	cpi	r24, 0x04	; 4
    1dd2:	91 05       	cpc	r25, r1
    1dd4:	31 f0       	breq	.+12     	; 0x1de2 <check_mainOptionPassword+0x80>
    1dd6:	2d 81       	ldd	r18, Y+5	; 0x05
    1dd8:	3e 81       	ldd	r19, Y+6	; 0x06
    1dda:	25 30       	cpi	r18, 0x05	; 5
    1ddc:	31 05       	cpc	r19, r1
    1dde:	29 f0       	breq	.+10     	; 0x1dea <check_mainOptionPassword+0x88>
    1de0:	07 c0       	rjmp	.+14     	; 0x1df0 <check_mainOptionPassword+0x8e>
	{
	case OPEN_DOOR:
		UART_sendByte(OPEN_DOOR);
    1de2:	84 e0       	ldi	r24, 0x04	; 4
    1de4:	0e 94 23 1a 	call	0x3446	; 0x3446 <UART_sendByte>
    1de8:	03 c0       	rjmp	.+6      	; 0x1df0 <check_mainOptionPassword+0x8e>
		break;

	case CHANGE_PASS:
		UART_sendByte(CHANGE_PASS);
    1dea:	85 e0       	ldi	r24, 0x05	; 5
    1dec:	0e 94 23 1a 	call	0x3446	; 0x3446 <UART_sendByte>
		break;
	}

	UART_sendString(a_str);    /*Send the password to the control_ECU*/
    1df0:	89 81       	ldd	r24, Y+1	; 0x01
    1df2:	9a 81       	ldd	r25, Y+2	; 0x02
    1df4:	0e 94 49 1a 	call	0x3492	; 0x3492 <UART_sendString>

	while(UART_receiveByte() != READY);   /*Wait until the control_ECU check the password*/
    1df8:	0e 94 3a 1a 	call	0x3474	; 0x3474 <UART_receiveByte>
    1dfc:	81 30       	cpi	r24, 0x01	; 1
    1dfe:	e1 f7       	brne	.-8      	; 0x1df8 <check_mainOptionPassword+0x96>

	return UART_receiveByte();   /*Read the byte received from control_ECU*/
    1e00:	0e 94 3a 1a 	call	0x3474	; 0x3474 <UART_receiveByte>
}
    1e04:	26 96       	adiw	r28, 0x06	; 6
    1e06:	0f b6       	in	r0, 0x3f	; 63
    1e08:	f8 94       	cli
    1e0a:	de bf       	out	0x3e, r29	; 62
    1e0c:	0f be       	out	0x3f, r0	; 63
    1e0e:	cd bf       	out	0x3d, r28	; 61
    1e10:	cf 91       	pop	r28
    1e12:	df 91       	pop	r29
    1e14:	08 95       	ret

00001e16 <GPIO_setupPinDirection>:
 * Description:
 * Setup the direction of the required pin input/output.
 * If input port number or pin number are not correct, the function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 a_portNum,uint8 a_pinNum,GPIO_PinDirectionType a_direction)
{
    1e16:	df 93       	push	r29
    1e18:	cf 93       	push	r28
    1e1a:	00 d0       	rcall	.+0      	; 0x1e1c <GPIO_setupPinDirection+0x6>
    1e1c:	00 d0       	rcall	.+0      	; 0x1e1e <GPIO_setupPinDirection+0x8>
    1e1e:	0f 92       	push	r0
    1e20:	cd b7       	in	r28, 0x3d	; 61
    1e22:	de b7       	in	r29, 0x3e	; 62
    1e24:	89 83       	std	Y+1, r24	; 0x01
    1e26:	6a 83       	std	Y+2, r22	; 0x02
    1e28:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((a_portNum >= NUM_OF_PORTS) || (a_pinNum >= NUM_OF_PINS_PER_PORT))
    1e2a:	89 81       	ldd	r24, Y+1	; 0x01
    1e2c:	84 30       	cpi	r24, 0x04	; 4
    1e2e:	08 f0       	brcs	.+2      	; 0x1e32 <GPIO_setupPinDirection+0x1c>
    1e30:	d5 c0       	rjmp	.+426    	; 0x1fdc <GPIO_setupPinDirection+0x1c6>
    1e32:	8a 81       	ldd	r24, Y+2	; 0x02
    1e34:	88 30       	cpi	r24, 0x08	; 8
    1e36:	08 f0       	brcs	.+2      	; 0x1e3a <GPIO_setupPinDirection+0x24>
    1e38:	d1 c0       	rjmp	.+418    	; 0x1fdc <GPIO_setupPinDirection+0x1c6>
		/*Do Nothing*/
	}
	else
	{
		/*Setup the pin direction as required*/
		switch(a_portNum)
    1e3a:	89 81       	ldd	r24, Y+1	; 0x01
    1e3c:	28 2f       	mov	r18, r24
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	3d 83       	std	Y+5, r19	; 0x05
    1e42:	2c 83       	std	Y+4, r18	; 0x04
    1e44:	8c 81       	ldd	r24, Y+4	; 0x04
    1e46:	9d 81       	ldd	r25, Y+5	; 0x05
    1e48:	81 30       	cpi	r24, 0x01	; 1
    1e4a:	91 05       	cpc	r25, r1
    1e4c:	09 f4       	brne	.+2      	; 0x1e50 <GPIO_setupPinDirection+0x3a>
    1e4e:	43 c0       	rjmp	.+134    	; 0x1ed6 <GPIO_setupPinDirection+0xc0>
    1e50:	2c 81       	ldd	r18, Y+4	; 0x04
    1e52:	3d 81       	ldd	r19, Y+5	; 0x05
    1e54:	22 30       	cpi	r18, 0x02	; 2
    1e56:	31 05       	cpc	r19, r1
    1e58:	2c f4       	brge	.+10     	; 0x1e64 <GPIO_setupPinDirection+0x4e>
    1e5a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e5c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e5e:	00 97       	sbiw	r24, 0x00	; 0
    1e60:	71 f0       	breq	.+28     	; 0x1e7e <GPIO_setupPinDirection+0x68>
    1e62:	bc c0       	rjmp	.+376    	; 0x1fdc <GPIO_setupPinDirection+0x1c6>
    1e64:	2c 81       	ldd	r18, Y+4	; 0x04
    1e66:	3d 81       	ldd	r19, Y+5	; 0x05
    1e68:	22 30       	cpi	r18, 0x02	; 2
    1e6a:	31 05       	cpc	r19, r1
    1e6c:	09 f4       	brne	.+2      	; 0x1e70 <GPIO_setupPinDirection+0x5a>
    1e6e:	5f c0       	rjmp	.+190    	; 0x1f2e <GPIO_setupPinDirection+0x118>
    1e70:	8c 81       	ldd	r24, Y+4	; 0x04
    1e72:	9d 81       	ldd	r25, Y+5	; 0x05
    1e74:	83 30       	cpi	r24, 0x03	; 3
    1e76:	91 05       	cpc	r25, r1
    1e78:	09 f4       	brne	.+2      	; 0x1e7c <GPIO_setupPinDirection+0x66>
    1e7a:	85 c0       	rjmp	.+266    	; 0x1f86 <GPIO_setupPinDirection+0x170>
    1e7c:	af c0       	rjmp	.+350    	; 0x1fdc <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(a_direction == PIN_OUTPUT)
    1e7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e80:	81 30       	cpi	r24, 0x01	; 1
    1e82:	a1 f4       	brne	.+40     	; 0x1eac <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,a_pinNum);
    1e84:	aa e3       	ldi	r26, 0x3A	; 58
    1e86:	b0 e0       	ldi	r27, 0x00	; 0
    1e88:	ea e3       	ldi	r30, 0x3A	; 58
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	80 81       	ld	r24, Z
    1e8e:	48 2f       	mov	r20, r24
    1e90:	8a 81       	ldd	r24, Y+2	; 0x02
    1e92:	28 2f       	mov	r18, r24
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	02 2e       	mov	r0, r18
    1e9c:	02 c0       	rjmp	.+4      	; 0x1ea2 <GPIO_setupPinDirection+0x8c>
    1e9e:	88 0f       	add	r24, r24
    1ea0:	99 1f       	adc	r25, r25
    1ea2:	0a 94       	dec	r0
    1ea4:	e2 f7       	brpl	.-8      	; 0x1e9e <GPIO_setupPinDirection+0x88>
    1ea6:	84 2b       	or	r24, r20
    1ea8:	8c 93       	st	X, r24
    1eaa:	98 c0       	rjmp	.+304    	; 0x1fdc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,a_pinNum);
    1eac:	aa e3       	ldi	r26, 0x3A	; 58
    1eae:	b0 e0       	ldi	r27, 0x00	; 0
    1eb0:	ea e3       	ldi	r30, 0x3A	; 58
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
    1eb4:	80 81       	ld	r24, Z
    1eb6:	48 2f       	mov	r20, r24
    1eb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eba:	28 2f       	mov	r18, r24
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	02 2e       	mov	r0, r18
    1ec4:	02 c0       	rjmp	.+4      	; 0x1eca <GPIO_setupPinDirection+0xb4>
    1ec6:	88 0f       	add	r24, r24
    1ec8:	99 1f       	adc	r25, r25
    1eca:	0a 94       	dec	r0
    1ecc:	e2 f7       	brpl	.-8      	; 0x1ec6 <GPIO_setupPinDirection+0xb0>
    1ece:	80 95       	com	r24
    1ed0:	84 23       	and	r24, r20
    1ed2:	8c 93       	st	X, r24
    1ed4:	83 c0       	rjmp	.+262    	; 0x1fdc <GPIO_setupPinDirection+0x1c6>
			}
			break;

		case PORTB_ID:
			if(a_direction == PIN_OUTPUT)
    1ed6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed8:	81 30       	cpi	r24, 0x01	; 1
    1eda:	a1 f4       	brne	.+40     	; 0x1f04 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,a_pinNum);
    1edc:	a7 e3       	ldi	r26, 0x37	; 55
    1ede:	b0 e0       	ldi	r27, 0x00	; 0
    1ee0:	e7 e3       	ldi	r30, 0x37	; 55
    1ee2:	f0 e0       	ldi	r31, 0x00	; 0
    1ee4:	80 81       	ld	r24, Z
    1ee6:	48 2f       	mov	r20, r24
    1ee8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eea:	28 2f       	mov	r18, r24
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	02 2e       	mov	r0, r18
    1ef4:	02 c0       	rjmp	.+4      	; 0x1efa <GPIO_setupPinDirection+0xe4>
    1ef6:	88 0f       	add	r24, r24
    1ef8:	99 1f       	adc	r25, r25
    1efa:	0a 94       	dec	r0
    1efc:	e2 f7       	brpl	.-8      	; 0x1ef6 <GPIO_setupPinDirection+0xe0>
    1efe:	84 2b       	or	r24, r20
    1f00:	8c 93       	st	X, r24
    1f02:	6c c0       	rjmp	.+216    	; 0x1fdc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,a_pinNum);
    1f04:	a7 e3       	ldi	r26, 0x37	; 55
    1f06:	b0 e0       	ldi	r27, 0x00	; 0
    1f08:	e7 e3       	ldi	r30, 0x37	; 55
    1f0a:	f0 e0       	ldi	r31, 0x00	; 0
    1f0c:	80 81       	ld	r24, Z
    1f0e:	48 2f       	mov	r20, r24
    1f10:	8a 81       	ldd	r24, Y+2	; 0x02
    1f12:	28 2f       	mov	r18, r24
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	81 e0       	ldi	r24, 0x01	; 1
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	02 2e       	mov	r0, r18
    1f1c:	02 c0       	rjmp	.+4      	; 0x1f22 <GPIO_setupPinDirection+0x10c>
    1f1e:	88 0f       	add	r24, r24
    1f20:	99 1f       	adc	r25, r25
    1f22:	0a 94       	dec	r0
    1f24:	e2 f7       	brpl	.-8      	; 0x1f1e <GPIO_setupPinDirection+0x108>
    1f26:	80 95       	com	r24
    1f28:	84 23       	and	r24, r20
    1f2a:	8c 93       	st	X, r24
    1f2c:	57 c0       	rjmp	.+174    	; 0x1fdc <GPIO_setupPinDirection+0x1c6>
			}
			break;

		case PORTC_ID:
			if(a_direction == PIN_OUTPUT)
    1f2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f30:	81 30       	cpi	r24, 0x01	; 1
    1f32:	a1 f4       	brne	.+40     	; 0x1f5c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,a_pinNum);
    1f34:	a4 e3       	ldi	r26, 0x34	; 52
    1f36:	b0 e0       	ldi	r27, 0x00	; 0
    1f38:	e4 e3       	ldi	r30, 0x34	; 52
    1f3a:	f0 e0       	ldi	r31, 0x00	; 0
    1f3c:	80 81       	ld	r24, Z
    1f3e:	48 2f       	mov	r20, r24
    1f40:	8a 81       	ldd	r24, Y+2	; 0x02
    1f42:	28 2f       	mov	r18, r24
    1f44:	30 e0       	ldi	r19, 0x00	; 0
    1f46:	81 e0       	ldi	r24, 0x01	; 1
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	02 2e       	mov	r0, r18
    1f4c:	02 c0       	rjmp	.+4      	; 0x1f52 <GPIO_setupPinDirection+0x13c>
    1f4e:	88 0f       	add	r24, r24
    1f50:	99 1f       	adc	r25, r25
    1f52:	0a 94       	dec	r0
    1f54:	e2 f7       	brpl	.-8      	; 0x1f4e <GPIO_setupPinDirection+0x138>
    1f56:	84 2b       	or	r24, r20
    1f58:	8c 93       	st	X, r24
    1f5a:	40 c0       	rjmp	.+128    	; 0x1fdc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,a_pinNum);
    1f5c:	a4 e3       	ldi	r26, 0x34	; 52
    1f5e:	b0 e0       	ldi	r27, 0x00	; 0
    1f60:	e4 e3       	ldi	r30, 0x34	; 52
    1f62:	f0 e0       	ldi	r31, 0x00	; 0
    1f64:	80 81       	ld	r24, Z
    1f66:	48 2f       	mov	r20, r24
    1f68:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6a:	28 2f       	mov	r18, r24
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	81 e0       	ldi	r24, 0x01	; 1
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	02 2e       	mov	r0, r18
    1f74:	02 c0       	rjmp	.+4      	; 0x1f7a <GPIO_setupPinDirection+0x164>
    1f76:	88 0f       	add	r24, r24
    1f78:	99 1f       	adc	r25, r25
    1f7a:	0a 94       	dec	r0
    1f7c:	e2 f7       	brpl	.-8      	; 0x1f76 <GPIO_setupPinDirection+0x160>
    1f7e:	80 95       	com	r24
    1f80:	84 23       	and	r24, r20
    1f82:	8c 93       	st	X, r24
    1f84:	2b c0       	rjmp	.+86     	; 0x1fdc <GPIO_setupPinDirection+0x1c6>
			}
			break;

		case PORTD_ID:
			if(a_direction == PIN_OUTPUT)
    1f86:	8b 81       	ldd	r24, Y+3	; 0x03
    1f88:	81 30       	cpi	r24, 0x01	; 1
    1f8a:	a1 f4       	brne	.+40     	; 0x1fb4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,a_pinNum);
    1f8c:	a1 e3       	ldi	r26, 0x31	; 49
    1f8e:	b0 e0       	ldi	r27, 0x00	; 0
    1f90:	e1 e3       	ldi	r30, 0x31	; 49
    1f92:	f0 e0       	ldi	r31, 0x00	; 0
    1f94:	80 81       	ld	r24, Z
    1f96:	48 2f       	mov	r20, r24
    1f98:	8a 81       	ldd	r24, Y+2	; 0x02
    1f9a:	28 2f       	mov	r18, r24
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	02 2e       	mov	r0, r18
    1fa4:	02 c0       	rjmp	.+4      	; 0x1faa <GPIO_setupPinDirection+0x194>
    1fa6:	88 0f       	add	r24, r24
    1fa8:	99 1f       	adc	r25, r25
    1faa:	0a 94       	dec	r0
    1fac:	e2 f7       	brpl	.-8      	; 0x1fa6 <GPIO_setupPinDirection+0x190>
    1fae:	84 2b       	or	r24, r20
    1fb0:	8c 93       	st	X, r24
    1fb2:	14 c0       	rjmp	.+40     	; 0x1fdc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,a_pinNum);
    1fb4:	a1 e3       	ldi	r26, 0x31	; 49
    1fb6:	b0 e0       	ldi	r27, 0x00	; 0
    1fb8:	e1 e3       	ldi	r30, 0x31	; 49
    1fba:	f0 e0       	ldi	r31, 0x00	; 0
    1fbc:	80 81       	ld	r24, Z
    1fbe:	48 2f       	mov	r20, r24
    1fc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc2:	28 2f       	mov	r18, r24
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	81 e0       	ldi	r24, 0x01	; 1
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	02 2e       	mov	r0, r18
    1fcc:	02 c0       	rjmp	.+4      	; 0x1fd2 <GPIO_setupPinDirection+0x1bc>
    1fce:	88 0f       	add	r24, r24
    1fd0:	99 1f       	adc	r25, r25
    1fd2:	0a 94       	dec	r0
    1fd4:	e2 f7       	brpl	.-8      	; 0x1fce <GPIO_setupPinDirection+0x1b8>
    1fd6:	80 95       	com	r24
    1fd8:	84 23       	and	r24, r20
    1fda:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1fdc:	0f 90       	pop	r0
    1fde:	0f 90       	pop	r0
    1fe0:	0f 90       	pop	r0
    1fe2:	0f 90       	pop	r0
    1fe4:	0f 90       	pop	r0
    1fe6:	cf 91       	pop	r28
    1fe8:	df 91       	pop	r29
    1fea:	08 95       	ret

00001fec <GPIO_writePin>:
 * Write the value logic high or logic low on the required pin.
 * If input port number or pin number are not correct, the function will not handle the request.
 * If the pin is input , this function enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 a_portNum,uint8 a_pinNum,uint8 a_value)
{
    1fec:	df 93       	push	r29
    1fee:	cf 93       	push	r28
    1ff0:	00 d0       	rcall	.+0      	; 0x1ff2 <GPIO_writePin+0x6>
    1ff2:	00 d0       	rcall	.+0      	; 0x1ff4 <GPIO_writePin+0x8>
    1ff4:	0f 92       	push	r0
    1ff6:	cd b7       	in	r28, 0x3d	; 61
    1ff8:	de b7       	in	r29, 0x3e	; 62
    1ffa:	89 83       	std	Y+1, r24	; 0x01
    1ffc:	6a 83       	std	Y+2, r22	; 0x02
    1ffe:	4b 83       	std	Y+3, r20	; 0x03
	if((a_portNum >= NUM_OF_PORTS) || (a_pinNum >= NUM_OF_PINS_PER_PORT))
    2000:	89 81       	ldd	r24, Y+1	; 0x01
    2002:	84 30       	cpi	r24, 0x04	; 4
    2004:	08 f0       	brcs	.+2      	; 0x2008 <GPIO_writePin+0x1c>
    2006:	d5 c0       	rjmp	.+426    	; 0x21b2 <GPIO_writePin+0x1c6>
    2008:	8a 81       	ldd	r24, Y+2	; 0x02
    200a:	88 30       	cpi	r24, 0x08	; 8
    200c:	08 f0       	brcs	.+2      	; 0x2010 <GPIO_writePin+0x24>
    200e:	d1 c0       	rjmp	.+418    	; 0x21b2 <GPIO_writePin+0x1c6>
		/*Do Nothing*/
	}
	else
	{
		/*Write the pin value as required*/
		switch(a_portNum)
    2010:	89 81       	ldd	r24, Y+1	; 0x01
    2012:	28 2f       	mov	r18, r24
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	3d 83       	std	Y+5, r19	; 0x05
    2018:	2c 83       	std	Y+4, r18	; 0x04
    201a:	8c 81       	ldd	r24, Y+4	; 0x04
    201c:	9d 81       	ldd	r25, Y+5	; 0x05
    201e:	81 30       	cpi	r24, 0x01	; 1
    2020:	91 05       	cpc	r25, r1
    2022:	09 f4       	brne	.+2      	; 0x2026 <GPIO_writePin+0x3a>
    2024:	43 c0       	rjmp	.+134    	; 0x20ac <GPIO_writePin+0xc0>
    2026:	2c 81       	ldd	r18, Y+4	; 0x04
    2028:	3d 81       	ldd	r19, Y+5	; 0x05
    202a:	22 30       	cpi	r18, 0x02	; 2
    202c:	31 05       	cpc	r19, r1
    202e:	2c f4       	brge	.+10     	; 0x203a <GPIO_writePin+0x4e>
    2030:	8c 81       	ldd	r24, Y+4	; 0x04
    2032:	9d 81       	ldd	r25, Y+5	; 0x05
    2034:	00 97       	sbiw	r24, 0x00	; 0
    2036:	71 f0       	breq	.+28     	; 0x2054 <GPIO_writePin+0x68>
    2038:	bc c0       	rjmp	.+376    	; 0x21b2 <GPIO_writePin+0x1c6>
    203a:	2c 81       	ldd	r18, Y+4	; 0x04
    203c:	3d 81       	ldd	r19, Y+5	; 0x05
    203e:	22 30       	cpi	r18, 0x02	; 2
    2040:	31 05       	cpc	r19, r1
    2042:	09 f4       	brne	.+2      	; 0x2046 <GPIO_writePin+0x5a>
    2044:	5f c0       	rjmp	.+190    	; 0x2104 <GPIO_writePin+0x118>
    2046:	8c 81       	ldd	r24, Y+4	; 0x04
    2048:	9d 81       	ldd	r25, Y+5	; 0x05
    204a:	83 30       	cpi	r24, 0x03	; 3
    204c:	91 05       	cpc	r25, r1
    204e:	09 f4       	brne	.+2      	; 0x2052 <GPIO_writePin+0x66>
    2050:	85 c0       	rjmp	.+266    	; 0x215c <GPIO_writePin+0x170>
    2052:	af c0       	rjmp	.+350    	; 0x21b2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(a_value == LOGIC_HIGH)
    2054:	8b 81       	ldd	r24, Y+3	; 0x03
    2056:	81 30       	cpi	r24, 0x01	; 1
    2058:	a1 f4       	brne	.+40     	; 0x2082 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,a_pinNum);
    205a:	ab e3       	ldi	r26, 0x3B	; 59
    205c:	b0 e0       	ldi	r27, 0x00	; 0
    205e:	eb e3       	ldi	r30, 0x3B	; 59
    2060:	f0 e0       	ldi	r31, 0x00	; 0
    2062:	80 81       	ld	r24, Z
    2064:	48 2f       	mov	r20, r24
    2066:	8a 81       	ldd	r24, Y+2	; 0x02
    2068:	28 2f       	mov	r18, r24
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	81 e0       	ldi	r24, 0x01	; 1
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	02 2e       	mov	r0, r18
    2072:	02 c0       	rjmp	.+4      	; 0x2078 <GPIO_writePin+0x8c>
    2074:	88 0f       	add	r24, r24
    2076:	99 1f       	adc	r25, r25
    2078:	0a 94       	dec	r0
    207a:	e2 f7       	brpl	.-8      	; 0x2074 <GPIO_writePin+0x88>
    207c:	84 2b       	or	r24, r20
    207e:	8c 93       	st	X, r24
    2080:	98 c0       	rjmp	.+304    	; 0x21b2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,a_pinNum);
    2082:	ab e3       	ldi	r26, 0x3B	; 59
    2084:	b0 e0       	ldi	r27, 0x00	; 0
    2086:	eb e3       	ldi	r30, 0x3B	; 59
    2088:	f0 e0       	ldi	r31, 0x00	; 0
    208a:	80 81       	ld	r24, Z
    208c:	48 2f       	mov	r20, r24
    208e:	8a 81       	ldd	r24, Y+2	; 0x02
    2090:	28 2f       	mov	r18, r24
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	81 e0       	ldi	r24, 0x01	; 1
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	02 2e       	mov	r0, r18
    209a:	02 c0       	rjmp	.+4      	; 0x20a0 <GPIO_writePin+0xb4>
    209c:	88 0f       	add	r24, r24
    209e:	99 1f       	adc	r25, r25
    20a0:	0a 94       	dec	r0
    20a2:	e2 f7       	brpl	.-8      	; 0x209c <GPIO_writePin+0xb0>
    20a4:	80 95       	com	r24
    20a6:	84 23       	and	r24, r20
    20a8:	8c 93       	st	X, r24
    20aa:	83 c0       	rjmp	.+262    	; 0x21b2 <GPIO_writePin+0x1c6>
			}
			break;

		case PORTB_ID:
			if(a_value == LOGIC_HIGH)
    20ac:	8b 81       	ldd	r24, Y+3	; 0x03
    20ae:	81 30       	cpi	r24, 0x01	; 1
    20b0:	a1 f4       	brne	.+40     	; 0x20da <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,a_pinNum);
    20b2:	a8 e3       	ldi	r26, 0x38	; 56
    20b4:	b0 e0       	ldi	r27, 0x00	; 0
    20b6:	e8 e3       	ldi	r30, 0x38	; 56
    20b8:	f0 e0       	ldi	r31, 0x00	; 0
    20ba:	80 81       	ld	r24, Z
    20bc:	48 2f       	mov	r20, r24
    20be:	8a 81       	ldd	r24, Y+2	; 0x02
    20c0:	28 2f       	mov	r18, r24
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	81 e0       	ldi	r24, 0x01	; 1
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	02 2e       	mov	r0, r18
    20ca:	02 c0       	rjmp	.+4      	; 0x20d0 <GPIO_writePin+0xe4>
    20cc:	88 0f       	add	r24, r24
    20ce:	99 1f       	adc	r25, r25
    20d0:	0a 94       	dec	r0
    20d2:	e2 f7       	brpl	.-8      	; 0x20cc <GPIO_writePin+0xe0>
    20d4:	84 2b       	or	r24, r20
    20d6:	8c 93       	st	X, r24
    20d8:	6c c0       	rjmp	.+216    	; 0x21b2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,a_pinNum);
    20da:	a8 e3       	ldi	r26, 0x38	; 56
    20dc:	b0 e0       	ldi	r27, 0x00	; 0
    20de:	e8 e3       	ldi	r30, 0x38	; 56
    20e0:	f0 e0       	ldi	r31, 0x00	; 0
    20e2:	80 81       	ld	r24, Z
    20e4:	48 2f       	mov	r20, r24
    20e6:	8a 81       	ldd	r24, Y+2	; 0x02
    20e8:	28 2f       	mov	r18, r24
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	81 e0       	ldi	r24, 0x01	; 1
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	02 2e       	mov	r0, r18
    20f2:	02 c0       	rjmp	.+4      	; 0x20f8 <GPIO_writePin+0x10c>
    20f4:	88 0f       	add	r24, r24
    20f6:	99 1f       	adc	r25, r25
    20f8:	0a 94       	dec	r0
    20fa:	e2 f7       	brpl	.-8      	; 0x20f4 <GPIO_writePin+0x108>
    20fc:	80 95       	com	r24
    20fe:	84 23       	and	r24, r20
    2100:	8c 93       	st	X, r24
    2102:	57 c0       	rjmp	.+174    	; 0x21b2 <GPIO_writePin+0x1c6>
			}
			break;

		case PORTC_ID:
			if(a_value == LOGIC_HIGH)
    2104:	8b 81       	ldd	r24, Y+3	; 0x03
    2106:	81 30       	cpi	r24, 0x01	; 1
    2108:	a1 f4       	brne	.+40     	; 0x2132 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,a_pinNum);
    210a:	a5 e3       	ldi	r26, 0x35	; 53
    210c:	b0 e0       	ldi	r27, 0x00	; 0
    210e:	e5 e3       	ldi	r30, 0x35	; 53
    2110:	f0 e0       	ldi	r31, 0x00	; 0
    2112:	80 81       	ld	r24, Z
    2114:	48 2f       	mov	r20, r24
    2116:	8a 81       	ldd	r24, Y+2	; 0x02
    2118:	28 2f       	mov	r18, r24
    211a:	30 e0       	ldi	r19, 0x00	; 0
    211c:	81 e0       	ldi	r24, 0x01	; 1
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	02 2e       	mov	r0, r18
    2122:	02 c0       	rjmp	.+4      	; 0x2128 <GPIO_writePin+0x13c>
    2124:	88 0f       	add	r24, r24
    2126:	99 1f       	adc	r25, r25
    2128:	0a 94       	dec	r0
    212a:	e2 f7       	brpl	.-8      	; 0x2124 <GPIO_writePin+0x138>
    212c:	84 2b       	or	r24, r20
    212e:	8c 93       	st	X, r24
    2130:	40 c0       	rjmp	.+128    	; 0x21b2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,a_pinNum);
    2132:	a5 e3       	ldi	r26, 0x35	; 53
    2134:	b0 e0       	ldi	r27, 0x00	; 0
    2136:	e5 e3       	ldi	r30, 0x35	; 53
    2138:	f0 e0       	ldi	r31, 0x00	; 0
    213a:	80 81       	ld	r24, Z
    213c:	48 2f       	mov	r20, r24
    213e:	8a 81       	ldd	r24, Y+2	; 0x02
    2140:	28 2f       	mov	r18, r24
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	81 e0       	ldi	r24, 0x01	; 1
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	02 2e       	mov	r0, r18
    214a:	02 c0       	rjmp	.+4      	; 0x2150 <GPIO_writePin+0x164>
    214c:	88 0f       	add	r24, r24
    214e:	99 1f       	adc	r25, r25
    2150:	0a 94       	dec	r0
    2152:	e2 f7       	brpl	.-8      	; 0x214c <GPIO_writePin+0x160>
    2154:	80 95       	com	r24
    2156:	84 23       	and	r24, r20
    2158:	8c 93       	st	X, r24
    215a:	2b c0       	rjmp	.+86     	; 0x21b2 <GPIO_writePin+0x1c6>
			}
			break;

		case PORTD_ID:
			if(a_value == LOGIC_HIGH)
    215c:	8b 81       	ldd	r24, Y+3	; 0x03
    215e:	81 30       	cpi	r24, 0x01	; 1
    2160:	a1 f4       	brne	.+40     	; 0x218a <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,a_pinNum);
    2162:	a2 e3       	ldi	r26, 0x32	; 50
    2164:	b0 e0       	ldi	r27, 0x00	; 0
    2166:	e2 e3       	ldi	r30, 0x32	; 50
    2168:	f0 e0       	ldi	r31, 0x00	; 0
    216a:	80 81       	ld	r24, Z
    216c:	48 2f       	mov	r20, r24
    216e:	8a 81       	ldd	r24, Y+2	; 0x02
    2170:	28 2f       	mov	r18, r24
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	81 e0       	ldi	r24, 0x01	; 1
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	02 2e       	mov	r0, r18
    217a:	02 c0       	rjmp	.+4      	; 0x2180 <GPIO_writePin+0x194>
    217c:	88 0f       	add	r24, r24
    217e:	99 1f       	adc	r25, r25
    2180:	0a 94       	dec	r0
    2182:	e2 f7       	brpl	.-8      	; 0x217c <GPIO_writePin+0x190>
    2184:	84 2b       	or	r24, r20
    2186:	8c 93       	st	X, r24
    2188:	14 c0       	rjmp	.+40     	; 0x21b2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,a_pinNum);
    218a:	a2 e3       	ldi	r26, 0x32	; 50
    218c:	b0 e0       	ldi	r27, 0x00	; 0
    218e:	e2 e3       	ldi	r30, 0x32	; 50
    2190:	f0 e0       	ldi	r31, 0x00	; 0
    2192:	80 81       	ld	r24, Z
    2194:	48 2f       	mov	r20, r24
    2196:	8a 81       	ldd	r24, Y+2	; 0x02
    2198:	28 2f       	mov	r18, r24
    219a:	30 e0       	ldi	r19, 0x00	; 0
    219c:	81 e0       	ldi	r24, 0x01	; 1
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	02 2e       	mov	r0, r18
    21a2:	02 c0       	rjmp	.+4      	; 0x21a8 <GPIO_writePin+0x1bc>
    21a4:	88 0f       	add	r24, r24
    21a6:	99 1f       	adc	r25, r25
    21a8:	0a 94       	dec	r0
    21aa:	e2 f7       	brpl	.-8      	; 0x21a4 <GPIO_writePin+0x1b8>
    21ac:	80 95       	com	r24
    21ae:	84 23       	and	r24, r20
    21b0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    21b2:	0f 90       	pop	r0
    21b4:	0f 90       	pop	r0
    21b6:	0f 90       	pop	r0
    21b8:	0f 90       	pop	r0
    21ba:	0f 90       	pop	r0
    21bc:	cf 91       	pop	r28
    21be:	df 91       	pop	r29
    21c0:	08 95       	ret

000021c2 <GPIO_readPin>:
 * Description:
 * Read and return the value for the required pin , it should be logic low/logic high.
 * If the input port number or pin number are not correct, The function will return Logic low.
 */
uint8 GPIO_readPin(uint8 a_portNum,uint8 a_pinNum)
{
    21c2:	df 93       	push	r29
    21c4:	cf 93       	push	r28
    21c6:	00 d0       	rcall	.+0      	; 0x21c8 <GPIO_readPin+0x6>
    21c8:	00 d0       	rcall	.+0      	; 0x21ca <GPIO_readPin+0x8>
    21ca:	0f 92       	push	r0
    21cc:	cd b7       	in	r28, 0x3d	; 61
    21ce:	de b7       	in	r29, 0x3e	; 62
    21d0:	8a 83       	std	Y+2, r24	; 0x02
    21d2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pinValue = LOGIC_LOW;
    21d4:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number and return logic low.
	 */
	if((a_portNum >= NUM_OF_PORTS) || (a_pinNum >= NUM_OF_PINS_PER_PORT))
    21d6:	8a 81       	ldd	r24, Y+2	; 0x02
    21d8:	84 30       	cpi	r24, 0x04	; 4
    21da:	08 f0       	brcs	.+2      	; 0x21de <GPIO_readPin+0x1c>
    21dc:	9d c0       	rjmp	.+314    	; 0x2318 <GPIO_readPin+0x156>
    21de:	8b 81       	ldd	r24, Y+3	; 0x03
    21e0:	88 30       	cpi	r24, 0x08	; 8
    21e2:	08 f0       	brcs	.+2      	; 0x21e6 <GPIO_readPin+0x24>
    21e4:	99 c0       	rjmp	.+306    	; 0x2318 <GPIO_readPin+0x156>
	{
		/*Do Nothing*/
	}
	else
	{
		switch(a_portNum)
    21e6:	8a 81       	ldd	r24, Y+2	; 0x02
    21e8:	28 2f       	mov	r18, r24
    21ea:	30 e0       	ldi	r19, 0x00	; 0
    21ec:	3d 83       	std	Y+5, r19	; 0x05
    21ee:	2c 83       	std	Y+4, r18	; 0x04
    21f0:	4c 81       	ldd	r20, Y+4	; 0x04
    21f2:	5d 81       	ldd	r21, Y+5	; 0x05
    21f4:	41 30       	cpi	r20, 0x01	; 1
    21f6:	51 05       	cpc	r21, r1
    21f8:	b1 f1       	breq	.+108    	; 0x2266 <GPIO_readPin+0xa4>
    21fa:	8c 81       	ldd	r24, Y+4	; 0x04
    21fc:	9d 81       	ldd	r25, Y+5	; 0x05
    21fe:	82 30       	cpi	r24, 0x02	; 2
    2200:	91 05       	cpc	r25, r1
    2202:	34 f4       	brge	.+12     	; 0x2210 <GPIO_readPin+0x4e>
    2204:	2c 81       	ldd	r18, Y+4	; 0x04
    2206:	3d 81       	ldd	r19, Y+5	; 0x05
    2208:	21 15       	cp	r18, r1
    220a:	31 05       	cpc	r19, r1
    220c:	71 f0       	breq	.+28     	; 0x222a <GPIO_readPin+0x68>
    220e:	84 c0       	rjmp	.+264    	; 0x2318 <GPIO_readPin+0x156>
    2210:	4c 81       	ldd	r20, Y+4	; 0x04
    2212:	5d 81       	ldd	r21, Y+5	; 0x05
    2214:	42 30       	cpi	r20, 0x02	; 2
    2216:	51 05       	cpc	r21, r1
    2218:	09 f4       	brne	.+2      	; 0x221c <GPIO_readPin+0x5a>
    221a:	43 c0       	rjmp	.+134    	; 0x22a2 <GPIO_readPin+0xe0>
    221c:	8c 81       	ldd	r24, Y+4	; 0x04
    221e:	9d 81       	ldd	r25, Y+5	; 0x05
    2220:	83 30       	cpi	r24, 0x03	; 3
    2222:	91 05       	cpc	r25, r1
    2224:	09 f4       	brne	.+2      	; 0x2228 <GPIO_readPin+0x66>
    2226:	5b c0       	rjmp	.+182    	; 0x22de <GPIO_readPin+0x11c>
    2228:	77 c0       	rjmp	.+238    	; 0x2318 <GPIO_readPin+0x156>
		{
		case PORTA_ID:
			pinValue = GET_BIT(PINA,a_pinNum);
    222a:	e9 e3       	ldi	r30, 0x39	; 57
    222c:	f0 e0       	ldi	r31, 0x00	; 0
    222e:	80 81       	ld	r24, Z
    2230:	48 2f       	mov	r20, r24
    2232:	50 e0       	ldi	r21, 0x00	; 0
    2234:	8b 81       	ldd	r24, Y+3	; 0x03
    2236:	28 2f       	mov	r18, r24
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	81 e0       	ldi	r24, 0x01	; 1
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	02 c0       	rjmp	.+4      	; 0x2244 <GPIO_readPin+0x82>
    2240:	88 0f       	add	r24, r24
    2242:	99 1f       	adc	r25, r25
    2244:	2a 95       	dec	r18
    2246:	e2 f7       	brpl	.-8      	; 0x2240 <GPIO_readPin+0x7e>
    2248:	9a 01       	movw	r18, r20
    224a:	28 23       	and	r18, r24
    224c:	39 23       	and	r19, r25
    224e:	8b 81       	ldd	r24, Y+3	; 0x03
    2250:	88 2f       	mov	r24, r24
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	a9 01       	movw	r20, r18
    2256:	02 c0       	rjmp	.+4      	; 0x225c <GPIO_readPin+0x9a>
    2258:	55 95       	asr	r21
    225a:	47 95       	ror	r20
    225c:	8a 95       	dec	r24
    225e:	e2 f7       	brpl	.-8      	; 0x2258 <GPIO_readPin+0x96>
    2260:	ca 01       	movw	r24, r20
    2262:	89 83       	std	Y+1, r24	; 0x01
    2264:	59 c0       	rjmp	.+178    	; 0x2318 <GPIO_readPin+0x156>
			break;

		case PORTB_ID:
			pinValue = GET_BIT(PINB,a_pinNum);
    2266:	e6 e3       	ldi	r30, 0x36	; 54
    2268:	f0 e0       	ldi	r31, 0x00	; 0
    226a:	80 81       	ld	r24, Z
    226c:	48 2f       	mov	r20, r24
    226e:	50 e0       	ldi	r21, 0x00	; 0
    2270:	8b 81       	ldd	r24, Y+3	; 0x03
    2272:	28 2f       	mov	r18, r24
    2274:	30 e0       	ldi	r19, 0x00	; 0
    2276:	81 e0       	ldi	r24, 0x01	; 1
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	02 c0       	rjmp	.+4      	; 0x2280 <GPIO_readPin+0xbe>
    227c:	88 0f       	add	r24, r24
    227e:	99 1f       	adc	r25, r25
    2280:	2a 95       	dec	r18
    2282:	e2 f7       	brpl	.-8      	; 0x227c <GPIO_readPin+0xba>
    2284:	9a 01       	movw	r18, r20
    2286:	28 23       	and	r18, r24
    2288:	39 23       	and	r19, r25
    228a:	8b 81       	ldd	r24, Y+3	; 0x03
    228c:	88 2f       	mov	r24, r24
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	a9 01       	movw	r20, r18
    2292:	02 c0       	rjmp	.+4      	; 0x2298 <GPIO_readPin+0xd6>
    2294:	55 95       	asr	r21
    2296:	47 95       	ror	r20
    2298:	8a 95       	dec	r24
    229a:	e2 f7       	brpl	.-8      	; 0x2294 <GPIO_readPin+0xd2>
    229c:	ca 01       	movw	r24, r20
    229e:	89 83       	std	Y+1, r24	; 0x01
    22a0:	3b c0       	rjmp	.+118    	; 0x2318 <GPIO_readPin+0x156>
			break;

		case PORTC_ID:
			pinValue = GET_BIT(PINC,a_pinNum);
    22a2:	e3 e3       	ldi	r30, 0x33	; 51
    22a4:	f0 e0       	ldi	r31, 0x00	; 0
    22a6:	80 81       	ld	r24, Z
    22a8:	48 2f       	mov	r20, r24
    22aa:	50 e0       	ldi	r21, 0x00	; 0
    22ac:	8b 81       	ldd	r24, Y+3	; 0x03
    22ae:	28 2f       	mov	r18, r24
    22b0:	30 e0       	ldi	r19, 0x00	; 0
    22b2:	81 e0       	ldi	r24, 0x01	; 1
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	02 c0       	rjmp	.+4      	; 0x22bc <GPIO_readPin+0xfa>
    22b8:	88 0f       	add	r24, r24
    22ba:	99 1f       	adc	r25, r25
    22bc:	2a 95       	dec	r18
    22be:	e2 f7       	brpl	.-8      	; 0x22b8 <GPIO_readPin+0xf6>
    22c0:	9a 01       	movw	r18, r20
    22c2:	28 23       	and	r18, r24
    22c4:	39 23       	and	r19, r25
    22c6:	8b 81       	ldd	r24, Y+3	; 0x03
    22c8:	88 2f       	mov	r24, r24
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	a9 01       	movw	r20, r18
    22ce:	02 c0       	rjmp	.+4      	; 0x22d4 <GPIO_readPin+0x112>
    22d0:	55 95       	asr	r21
    22d2:	47 95       	ror	r20
    22d4:	8a 95       	dec	r24
    22d6:	e2 f7       	brpl	.-8      	; 0x22d0 <GPIO_readPin+0x10e>
    22d8:	ca 01       	movw	r24, r20
    22da:	89 83       	std	Y+1, r24	; 0x01
    22dc:	1d c0       	rjmp	.+58     	; 0x2318 <GPIO_readPin+0x156>
			break;

		case PORTD_ID:
			pinValue = GET_BIT(PIND,a_pinNum);
    22de:	e0 e3       	ldi	r30, 0x30	; 48
    22e0:	f0 e0       	ldi	r31, 0x00	; 0
    22e2:	80 81       	ld	r24, Z
    22e4:	48 2f       	mov	r20, r24
    22e6:	50 e0       	ldi	r21, 0x00	; 0
    22e8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ea:	28 2f       	mov	r18, r24
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	81 e0       	ldi	r24, 0x01	; 1
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	02 c0       	rjmp	.+4      	; 0x22f8 <GPIO_readPin+0x136>
    22f4:	88 0f       	add	r24, r24
    22f6:	99 1f       	adc	r25, r25
    22f8:	2a 95       	dec	r18
    22fa:	e2 f7       	brpl	.-8      	; 0x22f4 <GPIO_readPin+0x132>
    22fc:	9a 01       	movw	r18, r20
    22fe:	28 23       	and	r18, r24
    2300:	39 23       	and	r19, r25
    2302:	8b 81       	ldd	r24, Y+3	; 0x03
    2304:	88 2f       	mov	r24, r24
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	a9 01       	movw	r20, r18
    230a:	02 c0       	rjmp	.+4      	; 0x2310 <GPIO_readPin+0x14e>
    230c:	55 95       	asr	r21
    230e:	47 95       	ror	r20
    2310:	8a 95       	dec	r24
    2312:	e2 f7       	brpl	.-8      	; 0x230c <GPIO_readPin+0x14a>
    2314:	ca 01       	movw	r24, r20
    2316:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return pinValue;
    2318:	89 81       	ldd	r24, Y+1	; 0x01
}
    231a:	0f 90       	pop	r0
    231c:	0f 90       	pop	r0
    231e:	0f 90       	pop	r0
    2320:	0f 90       	pop	r0
    2322:	0f 90       	pop	r0
    2324:	cf 91       	pop	r28
    2326:	df 91       	pop	r29
    2328:	08 95       	ret

0000232a <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 a_portNum,GPIO_PortDirectionType a_direction)
{
    232a:	df 93       	push	r29
    232c:	cf 93       	push	r28
    232e:	00 d0       	rcall	.+0      	; 0x2330 <GPIO_setupPortDirection+0x6>
    2330:	00 d0       	rcall	.+0      	; 0x2332 <GPIO_setupPortDirection+0x8>
    2332:	cd b7       	in	r28, 0x3d	; 61
    2334:	de b7       	in	r29, 0x3e	; 62
    2336:	89 83       	std	Y+1, r24	; 0x01
    2338:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid and function will not handle the request.
	 */
	if(a_portNum >= NUM_OF_PORTS)
    233a:	89 81       	ldd	r24, Y+1	; 0x01
    233c:	84 30       	cpi	r24, 0x04	; 4
    233e:	90 f5       	brcc	.+100    	; 0x23a4 <GPIO_setupPortDirection+0x7a>
		/*Do Nothing*/
	}
	else
	{
		/*Setup the port direction as required*/
		switch(a_portNum)
    2340:	89 81       	ldd	r24, Y+1	; 0x01
    2342:	28 2f       	mov	r18, r24
    2344:	30 e0       	ldi	r19, 0x00	; 0
    2346:	3c 83       	std	Y+4, r19	; 0x04
    2348:	2b 83       	std	Y+3, r18	; 0x03
    234a:	8b 81       	ldd	r24, Y+3	; 0x03
    234c:	9c 81       	ldd	r25, Y+4	; 0x04
    234e:	81 30       	cpi	r24, 0x01	; 1
    2350:	91 05       	cpc	r25, r1
    2352:	d1 f0       	breq	.+52     	; 0x2388 <GPIO_setupPortDirection+0x5e>
    2354:	2b 81       	ldd	r18, Y+3	; 0x03
    2356:	3c 81       	ldd	r19, Y+4	; 0x04
    2358:	22 30       	cpi	r18, 0x02	; 2
    235a:	31 05       	cpc	r19, r1
    235c:	2c f4       	brge	.+10     	; 0x2368 <GPIO_setupPortDirection+0x3e>
    235e:	8b 81       	ldd	r24, Y+3	; 0x03
    2360:	9c 81       	ldd	r25, Y+4	; 0x04
    2362:	00 97       	sbiw	r24, 0x00	; 0
    2364:	61 f0       	breq	.+24     	; 0x237e <GPIO_setupPortDirection+0x54>
    2366:	1e c0       	rjmp	.+60     	; 0x23a4 <GPIO_setupPortDirection+0x7a>
    2368:	2b 81       	ldd	r18, Y+3	; 0x03
    236a:	3c 81       	ldd	r19, Y+4	; 0x04
    236c:	22 30       	cpi	r18, 0x02	; 2
    236e:	31 05       	cpc	r19, r1
    2370:	81 f0       	breq	.+32     	; 0x2392 <GPIO_setupPortDirection+0x68>
    2372:	8b 81       	ldd	r24, Y+3	; 0x03
    2374:	9c 81       	ldd	r25, Y+4	; 0x04
    2376:	83 30       	cpi	r24, 0x03	; 3
    2378:	91 05       	cpc	r25, r1
    237a:	81 f0       	breq	.+32     	; 0x239c <GPIO_setupPortDirection+0x72>
    237c:	13 c0       	rjmp	.+38     	; 0x23a4 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = a_direction;
    237e:	ea e3       	ldi	r30, 0x3A	; 58
    2380:	f0 e0       	ldi	r31, 0x00	; 0
    2382:	8a 81       	ldd	r24, Y+2	; 0x02
    2384:	80 83       	st	Z, r24
    2386:	0e c0       	rjmp	.+28     	; 0x23a4 <GPIO_setupPortDirection+0x7a>
			break;

		case PORTB_ID:
			DDRB = a_direction;
    2388:	e7 e3       	ldi	r30, 0x37	; 55
    238a:	f0 e0       	ldi	r31, 0x00	; 0
    238c:	8a 81       	ldd	r24, Y+2	; 0x02
    238e:	80 83       	st	Z, r24
    2390:	09 c0       	rjmp	.+18     	; 0x23a4 <GPIO_setupPortDirection+0x7a>
			break;

		case PORTC_ID:
			DDRC = a_direction;
    2392:	e4 e3       	ldi	r30, 0x34	; 52
    2394:	f0 e0       	ldi	r31, 0x00	; 0
    2396:	8a 81       	ldd	r24, Y+2	; 0x02
    2398:	80 83       	st	Z, r24
    239a:	04 c0       	rjmp	.+8      	; 0x23a4 <GPIO_setupPortDirection+0x7a>
			break;

		case PORTD_ID:
			DDRD = a_direction;
    239c:	e1 e3       	ldi	r30, 0x31	; 49
    239e:	f0 e0       	ldi	r31, 0x00	; 0
    23a0:	8a 81       	ldd	r24, Y+2	; 0x02
    23a2:	80 83       	st	Z, r24
			break;
		}
	}
}
    23a4:	0f 90       	pop	r0
    23a6:	0f 90       	pop	r0
    23a8:	0f 90       	pop	r0
    23aa:	0f 90       	pop	r0
    23ac:	cf 91       	pop	r28
    23ae:	df 91       	pop	r29
    23b0:	08 95       	ret

000023b2 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 a_portNum, uint8 a_value)
{
    23b2:	df 93       	push	r29
    23b4:	cf 93       	push	r28
    23b6:	00 d0       	rcall	.+0      	; 0x23b8 <GPIO_writePort+0x6>
    23b8:	00 d0       	rcall	.+0      	; 0x23ba <GPIO_writePort+0x8>
    23ba:	cd b7       	in	r28, 0x3d	; 61
    23bc:	de b7       	in	r29, 0x3e	; 62
    23be:	89 83       	std	Y+1, r24	; 0x01
    23c0:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid and function will not handle the request.
	 */
	if(a_portNum >= NUM_OF_PORTS)
    23c2:	89 81       	ldd	r24, Y+1	; 0x01
    23c4:	84 30       	cpi	r24, 0x04	; 4
    23c6:	90 f5       	brcc	.+100    	; 0x242c <GPIO_writePort+0x7a>
		/*Do Nothing*/
	}
	else
	{
		/*Write the port value as required*/
		switch(a_portNum)
    23c8:	89 81       	ldd	r24, Y+1	; 0x01
    23ca:	28 2f       	mov	r18, r24
    23cc:	30 e0       	ldi	r19, 0x00	; 0
    23ce:	3c 83       	std	Y+4, r19	; 0x04
    23d0:	2b 83       	std	Y+3, r18	; 0x03
    23d2:	8b 81       	ldd	r24, Y+3	; 0x03
    23d4:	9c 81       	ldd	r25, Y+4	; 0x04
    23d6:	81 30       	cpi	r24, 0x01	; 1
    23d8:	91 05       	cpc	r25, r1
    23da:	d1 f0       	breq	.+52     	; 0x2410 <GPIO_writePort+0x5e>
    23dc:	2b 81       	ldd	r18, Y+3	; 0x03
    23de:	3c 81       	ldd	r19, Y+4	; 0x04
    23e0:	22 30       	cpi	r18, 0x02	; 2
    23e2:	31 05       	cpc	r19, r1
    23e4:	2c f4       	brge	.+10     	; 0x23f0 <GPIO_writePort+0x3e>
    23e6:	8b 81       	ldd	r24, Y+3	; 0x03
    23e8:	9c 81       	ldd	r25, Y+4	; 0x04
    23ea:	00 97       	sbiw	r24, 0x00	; 0
    23ec:	61 f0       	breq	.+24     	; 0x2406 <GPIO_writePort+0x54>
    23ee:	1e c0       	rjmp	.+60     	; 0x242c <GPIO_writePort+0x7a>
    23f0:	2b 81       	ldd	r18, Y+3	; 0x03
    23f2:	3c 81       	ldd	r19, Y+4	; 0x04
    23f4:	22 30       	cpi	r18, 0x02	; 2
    23f6:	31 05       	cpc	r19, r1
    23f8:	81 f0       	breq	.+32     	; 0x241a <GPIO_writePort+0x68>
    23fa:	8b 81       	ldd	r24, Y+3	; 0x03
    23fc:	9c 81       	ldd	r25, Y+4	; 0x04
    23fe:	83 30       	cpi	r24, 0x03	; 3
    2400:	91 05       	cpc	r25, r1
    2402:	81 f0       	breq	.+32     	; 0x2424 <GPIO_writePort+0x72>
    2404:	13 c0       	rjmp	.+38     	; 0x242c <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = a_value;
    2406:	eb e3       	ldi	r30, 0x3B	; 59
    2408:	f0 e0       	ldi	r31, 0x00	; 0
    240a:	8a 81       	ldd	r24, Y+2	; 0x02
    240c:	80 83       	st	Z, r24
    240e:	0e c0       	rjmp	.+28     	; 0x242c <GPIO_writePort+0x7a>
			break;

		case PORTB_ID:
			PORTB = a_value;
    2410:	e8 e3       	ldi	r30, 0x38	; 56
    2412:	f0 e0       	ldi	r31, 0x00	; 0
    2414:	8a 81       	ldd	r24, Y+2	; 0x02
    2416:	80 83       	st	Z, r24
    2418:	09 c0       	rjmp	.+18     	; 0x242c <GPIO_writePort+0x7a>
			break;

		case PORTC_ID:
			PORTC = a_value;
    241a:	e5 e3       	ldi	r30, 0x35	; 53
    241c:	f0 e0       	ldi	r31, 0x00	; 0
    241e:	8a 81       	ldd	r24, Y+2	; 0x02
    2420:	80 83       	st	Z, r24
    2422:	04 c0       	rjmp	.+8      	; 0x242c <GPIO_writePort+0x7a>
			break;

		case PORTD_ID:
			PORTD = a_value;
    2424:	e2 e3       	ldi	r30, 0x32	; 50
    2426:	f0 e0       	ldi	r31, 0x00	; 0
    2428:	8a 81       	ldd	r24, Y+2	; 0x02
    242a:	80 83       	st	Z, r24
			break;
		}
	}
}
    242c:	0f 90       	pop	r0
    242e:	0f 90       	pop	r0
    2430:	0f 90       	pop	r0
    2432:	0f 90       	pop	r0
    2434:	cf 91       	pop	r28
    2436:	df 91       	pop	r29
    2438:	08 95       	ret

0000243a <GPIO_readPort>:
 * Description:
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 a_portNum)
{
    243a:	df 93       	push	r29
    243c:	cf 93       	push	r28
    243e:	00 d0       	rcall	.+0      	; 0x2440 <GPIO_readPort+0x6>
    2440:	00 d0       	rcall	.+0      	; 0x2442 <GPIO_readPort+0x8>
    2442:	cd b7       	in	r28, 0x3d	; 61
    2444:	de b7       	in	r29, 0x3e	; 62
    2446:	8a 83       	std	Y+2, r24	; 0x02
	uint8 pinValue = LOGIC_LOW;
    2448:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number and return zero.
	 */
	if(a_portNum >= NUM_OF_PORTS)
    244a:	8a 81       	ldd	r24, Y+2	; 0x02
    244c:	84 30       	cpi	r24, 0x04	; 4
    244e:	90 f5       	brcc	.+100    	; 0x24b4 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/*Read the port value as required*/
		switch(a_portNum)
    2450:	8a 81       	ldd	r24, Y+2	; 0x02
    2452:	28 2f       	mov	r18, r24
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	3c 83       	std	Y+4, r19	; 0x04
    2458:	2b 83       	std	Y+3, r18	; 0x03
    245a:	8b 81       	ldd	r24, Y+3	; 0x03
    245c:	9c 81       	ldd	r25, Y+4	; 0x04
    245e:	81 30       	cpi	r24, 0x01	; 1
    2460:	91 05       	cpc	r25, r1
    2462:	d1 f0       	breq	.+52     	; 0x2498 <GPIO_readPort+0x5e>
    2464:	2b 81       	ldd	r18, Y+3	; 0x03
    2466:	3c 81       	ldd	r19, Y+4	; 0x04
    2468:	22 30       	cpi	r18, 0x02	; 2
    246a:	31 05       	cpc	r19, r1
    246c:	2c f4       	brge	.+10     	; 0x2478 <GPIO_readPort+0x3e>
    246e:	8b 81       	ldd	r24, Y+3	; 0x03
    2470:	9c 81       	ldd	r25, Y+4	; 0x04
    2472:	00 97       	sbiw	r24, 0x00	; 0
    2474:	61 f0       	breq	.+24     	; 0x248e <GPIO_readPort+0x54>
    2476:	1e c0       	rjmp	.+60     	; 0x24b4 <GPIO_readPort+0x7a>
    2478:	2b 81       	ldd	r18, Y+3	; 0x03
    247a:	3c 81       	ldd	r19, Y+4	; 0x04
    247c:	22 30       	cpi	r18, 0x02	; 2
    247e:	31 05       	cpc	r19, r1
    2480:	81 f0       	breq	.+32     	; 0x24a2 <GPIO_readPort+0x68>
    2482:	8b 81       	ldd	r24, Y+3	; 0x03
    2484:	9c 81       	ldd	r25, Y+4	; 0x04
    2486:	83 30       	cpi	r24, 0x03	; 3
    2488:	91 05       	cpc	r25, r1
    248a:	81 f0       	breq	.+32     	; 0x24ac <GPIO_readPort+0x72>
    248c:	13 c0       	rjmp	.+38     	; 0x24b4 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			pinValue = PINA;
    248e:	e9 e3       	ldi	r30, 0x39	; 57
    2490:	f0 e0       	ldi	r31, 0x00	; 0
    2492:	80 81       	ld	r24, Z
    2494:	89 83       	std	Y+1, r24	; 0x01
    2496:	0e c0       	rjmp	.+28     	; 0x24b4 <GPIO_readPort+0x7a>
			break;

		case PORTB_ID:
			pinValue = PINB;
    2498:	e6 e3       	ldi	r30, 0x36	; 54
    249a:	f0 e0       	ldi	r31, 0x00	; 0
    249c:	80 81       	ld	r24, Z
    249e:	89 83       	std	Y+1, r24	; 0x01
    24a0:	09 c0       	rjmp	.+18     	; 0x24b4 <GPIO_readPort+0x7a>
			break;

		case PORTC_ID:
			pinValue = PINC;
    24a2:	e3 e3       	ldi	r30, 0x33	; 51
    24a4:	f0 e0       	ldi	r31, 0x00	; 0
    24a6:	80 81       	ld	r24, Z
    24a8:	89 83       	std	Y+1, r24	; 0x01
    24aa:	04 c0       	rjmp	.+8      	; 0x24b4 <GPIO_readPort+0x7a>
			break;

		case PORTD_ID:
			pinValue = PIND;
    24ac:	e0 e3       	ldi	r30, 0x30	; 48
    24ae:	f0 e0       	ldi	r31, 0x00	; 0
    24b0:	80 81       	ld	r24, Z
    24b2:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return pinValue;
    24b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    24b6:	0f 90       	pop	r0
    24b8:	0f 90       	pop	r0
    24ba:	0f 90       	pop	r0
    24bc:	0f 90       	pop	r0
    24be:	cf 91       	pop	r28
    24c0:	df 91       	pop	r29
    24c2:	08 95       	ret

000024c4 <KEYPAD_getPressedKey>:
/*
 * Description:
 * Get the number of the pressed button.
 */
uint8 KEYPAD_getPressedKey(void)
{
    24c4:	df 93       	push	r29
    24c6:	cf 93       	push	r28
    24c8:	cd b7       	in	r28, 0x3d	; 61
    24ca:	de b7       	in	r29, 0x3e	; 62
    24cc:	60 97       	sbiw	r28, 0x10	; 16
    24ce:	0f b6       	in	r0, 0x3f	; 63
    24d0:	f8 94       	cli
    24d2:	de bf       	out	0x3e, r29	; 62
    24d4:	0f be       	out	0x3f, r0	; 63
    24d6:	cd bf       	out	0x3d, r28	; 61
	uint8 row,col;

	/*Setup all rows and columns as input pins*/
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID,PIN_INPUT);
    24d8:	80 e0       	ldi	r24, 0x00	; 0
    24da:	60 e0       	ldi	r22, 0x00	; 0
    24dc:	40 e0       	ldi	r20, 0x00	; 0
    24de:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+1,PIN_INPUT);
    24e2:	80 e0       	ldi	r24, 0x00	; 0
    24e4:	61 e0       	ldi	r22, 0x01	; 1
    24e6:	40 e0       	ldi	r20, 0x00	; 0
    24e8:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+2,PIN_INPUT);
    24ec:	80 e0       	ldi	r24, 0x00	; 0
    24ee:	62 e0       	ldi	r22, 0x02	; 2
    24f0:	40 e0       	ldi	r20, 0x00	; 0
    24f2:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+3,PIN_INPUT);
    24f6:	80 e0       	ldi	r24, 0x00	; 0
    24f8:	63 e0       	ldi	r22, 0x03	; 3
    24fa:	40 e0       	ldi	r20, 0x00	; 0
    24fc:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COLUMN_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID,PIN_INPUT);
    2500:	80 e0       	ldi	r24, 0x00	; 0
    2502:	64 e0       	ldi	r22, 0x04	; 4
    2504:	40 e0       	ldi	r20, 0x00	; 0
    2506:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COLUMN_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+1,PIN_INPUT);
    250a:	80 e0       	ldi	r24, 0x00	; 0
    250c:	65 e0       	ldi	r22, 0x05	; 5
    250e:	40 e0       	ldi	r20, 0x00	; 0
    2510:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COLUMN_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+2,PIN_INPUT);
    2514:	80 e0       	ldi	r24, 0x00	; 0
    2516:	66 e0       	ldi	r22, 0x06	; 6
    2518:	40 e0       	ldi	r20, 0x00	; 0
    251a:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <GPIO_setupPinDirection>

#if(NUM_OF_COLUMNS == 4)
	GPIO_setupPinDirection(KEYPAD_COLUMN_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+3,PIN_INPUT);
    251e:	80 e0       	ldi	r24, 0x00	; 0
    2520:	67 e0       	ldi	r22, 0x07	; 7
    2522:	40 e0       	ldi	r20, 0x00	; 0
    2524:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <GPIO_setupPinDirection>
    2528:	80 e0       	ldi	r24, 0x00	; 0
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	a8 e4       	ldi	r26, 0x48	; 72
    252e:	b2 e4       	ldi	r27, 0x42	; 66
    2530:	8b 87       	std	Y+11, r24	; 0x0b
    2532:	9c 87       	std	Y+12, r25	; 0x0c
    2534:	ad 87       	std	Y+13, r26	; 0x0d
    2536:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2538:	6b 85       	ldd	r22, Y+11	; 0x0b
    253a:	7c 85       	ldd	r23, Y+12	; 0x0c
    253c:	8d 85       	ldd	r24, Y+13	; 0x0d
    253e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2540:	20 e0       	ldi	r18, 0x00	; 0
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	4a e7       	ldi	r20, 0x7A	; 122
    2546:	53 e4       	ldi	r21, 0x43	; 67
    2548:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    254c:	dc 01       	movw	r26, r24
    254e:	cb 01       	movw	r24, r22
    2550:	8f 83       	std	Y+7, r24	; 0x07
    2552:	98 87       	std	Y+8, r25	; 0x08
    2554:	a9 87       	std	Y+9, r26	; 0x09
    2556:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2558:	6f 81       	ldd	r22, Y+7	; 0x07
    255a:	78 85       	ldd	r23, Y+8	; 0x08
    255c:	89 85       	ldd	r24, Y+9	; 0x09
    255e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2560:	20 e0       	ldi	r18, 0x00	; 0
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	40 e8       	ldi	r20, 0x80	; 128
    2566:	5f e3       	ldi	r21, 0x3F	; 63
    2568:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    256c:	88 23       	and	r24, r24
    256e:	2c f4       	brge	.+10     	; 0x257a <KEYPAD_getPressedKey+0xb6>
		__ticks = 1;
    2570:	81 e0       	ldi	r24, 0x01	; 1
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	9e 83       	std	Y+6, r25	; 0x06
    2576:	8d 83       	std	Y+5, r24	; 0x05
    2578:	3f c0       	rjmp	.+126    	; 0x25f8 <KEYPAD_getPressedKey+0x134>
	else if (__tmp > 65535)
    257a:	6f 81       	ldd	r22, Y+7	; 0x07
    257c:	78 85       	ldd	r23, Y+8	; 0x08
    257e:	89 85       	ldd	r24, Y+9	; 0x09
    2580:	9a 85       	ldd	r25, Y+10	; 0x0a
    2582:	20 e0       	ldi	r18, 0x00	; 0
    2584:	3f ef       	ldi	r19, 0xFF	; 255
    2586:	4f e7       	ldi	r20, 0x7F	; 127
    2588:	57 e4       	ldi	r21, 0x47	; 71
    258a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    258e:	18 16       	cp	r1, r24
    2590:	4c f5       	brge	.+82     	; 0x25e4 <KEYPAD_getPressedKey+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2592:	6b 85       	ldd	r22, Y+11	; 0x0b
    2594:	7c 85       	ldd	r23, Y+12	; 0x0c
    2596:	8d 85       	ldd	r24, Y+13	; 0x0d
    2598:	9e 85       	ldd	r25, Y+14	; 0x0e
    259a:	20 e0       	ldi	r18, 0x00	; 0
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	40 e2       	ldi	r20, 0x20	; 32
    25a0:	51 e4       	ldi	r21, 0x41	; 65
    25a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a6:	dc 01       	movw	r26, r24
    25a8:	cb 01       	movw	r24, r22
    25aa:	bc 01       	movw	r22, r24
    25ac:	cd 01       	movw	r24, r26
    25ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25b2:	dc 01       	movw	r26, r24
    25b4:	cb 01       	movw	r24, r22
    25b6:	9e 83       	std	Y+6, r25	; 0x06
    25b8:	8d 83       	std	Y+5, r24	; 0x05
    25ba:	0f c0       	rjmp	.+30     	; 0x25da <KEYPAD_getPressedKey+0x116>
    25bc:	89 e1       	ldi	r24, 0x19	; 25
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	9c 83       	std	Y+4, r25	; 0x04
    25c2:	8b 83       	std	Y+3, r24	; 0x03
    25c4:	8b 81       	ldd	r24, Y+3	; 0x03
    25c6:	9c 81       	ldd	r25, Y+4	; 0x04
    25c8:	01 97       	sbiw	r24, 0x01	; 1
    25ca:	f1 f7       	brne	.-4      	; 0x25c8 <KEYPAD_getPressedKey+0x104>
    25cc:	9c 83       	std	Y+4, r25	; 0x04
    25ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25d0:	8d 81       	ldd	r24, Y+5	; 0x05
    25d2:	9e 81       	ldd	r25, Y+6	; 0x06
    25d4:	01 97       	sbiw	r24, 0x01	; 1
    25d6:	9e 83       	std	Y+6, r25	; 0x06
    25d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25da:	8d 81       	ldd	r24, Y+5	; 0x05
    25dc:	9e 81       	ldd	r25, Y+6	; 0x06
    25de:	00 97       	sbiw	r24, 0x00	; 0
    25e0:	69 f7       	brne	.-38     	; 0x25bc <KEYPAD_getPressedKey+0xf8>
    25e2:	14 c0       	rjmp	.+40     	; 0x260c <KEYPAD_getPressedKey+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25e4:	6f 81       	ldd	r22, Y+7	; 0x07
    25e6:	78 85       	ldd	r23, Y+8	; 0x08
    25e8:	89 85       	ldd	r24, Y+9	; 0x09
    25ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f0:	dc 01       	movw	r26, r24
    25f2:	cb 01       	movw	r24, r22
    25f4:	9e 83       	std	Y+6, r25	; 0x06
    25f6:	8d 83       	std	Y+5, r24	; 0x05
    25f8:	8d 81       	ldd	r24, Y+5	; 0x05
    25fa:	9e 81       	ldd	r25, Y+6	; 0x06
    25fc:	9a 83       	std	Y+2, r25	; 0x02
    25fe:	89 83       	std	Y+1, r24	; 0x01
    2600:	89 81       	ldd	r24, Y+1	; 0x01
    2602:	9a 81       	ldd	r25, Y+2	; 0x02
    2604:	01 97       	sbiw	r24, 0x01	; 1
    2606:	f1 f7       	brne	.-4      	; 0x2604 <KEYPAD_getPressedKey+0x140>
    2608:	9a 83       	std	Y+2, r25	; 0x02
    260a:	89 83       	std	Y+1, r24	; 0x01
#endif

	while(1)
	{
		_delay_ms(50);
		for(row=0; row<NUM_OF_ROWS; row++)
    260c:	18 8a       	std	Y+16, r1	; 0x10
    260e:	39 c0       	rjmp	.+114    	; 0x2682 <KEYPAD_getPressedKey+0x1be>
		{
			/*Each time setup the only one row as output pin*/
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    2610:	80 e0       	ldi	r24, 0x00	; 0
    2612:	68 89       	ldd	r22, Y+16	; 0x10
    2614:	41 e0       	ldi	r20, 0x01	; 1
    2616:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <GPIO_setupPinDirection>

			/*Set/Clear the row output pin*/
			GPIO_writePin(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,KEYPAD_BUTTON_PRESSED);
    261a:	80 e0       	ldi	r24, 0x00	; 0
    261c:	68 89       	ldd	r22, Y+16	; 0x10
    261e:	40 e0       	ldi	r20, 0x00	; 0
    2620:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <GPIO_writePin>

			/*Check if the button is pressed in every column*/
			for(col=0; col<NUM_OF_COLUMNS; col++)
    2624:	1f 86       	std	Y+15, r1	; 0x0f
    2626:	22 c0       	rjmp	.+68     	; 0x266c <KEYPAD_getPressedKey+0x1a8>
			{
				if(GPIO_readPin(KEYPAD_COLUMN_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    2628:	8f 85       	ldd	r24, Y+15	; 0x0f
    262a:	98 2f       	mov	r25, r24
    262c:	9c 5f       	subi	r25, 0xFC	; 252
    262e:	80 e0       	ldi	r24, 0x00	; 0
    2630:	69 2f       	mov	r22, r25
    2632:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <GPIO_readPin>
    2636:	88 23       	and	r24, r24
    2638:	b1 f4       	brne	.+44     	; 0x2666 <KEYPAD_getPressedKey+0x1a2>
#ifdef STANDARD_KEYPAD
					return ((row*NUM_OF_COLUMNS)+col+1);   /*return number of the pressed key*/
#elif(NUM_OF_COLUMNS == 3)
					return KEYPAD_4x3_adjustKeyNumber((row*NUM_OF_COLUMNS)+col+1);
#elif(NUM_OF_COLUMNS == 4)
					return KEYPAD_4x4_adjustKeyNumber((row*NUM_OF_COLUMNS)+col+1);
    263a:	88 89       	ldd	r24, Y+16	; 0x10
    263c:	88 2f       	mov	r24, r24
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	88 0f       	add	r24, r24
    2642:	99 1f       	adc	r25, r25
    2644:	88 0f       	add	r24, r24
    2646:	99 1f       	adc	r25, r25
    2648:	98 2f       	mov	r25, r24
    264a:	8f 85       	ldd	r24, Y+15	; 0x0f
    264c:	89 0f       	add	r24, r25
    264e:	8f 5f       	subi	r24, 0xFF	; 255
    2650:	0e 94 45 13 	call	0x268a	; 0x268a <KEYPAD_4x4_adjustKeyNumber>
			}
			/*Return this row to be input pin again*/
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
		}
	}
}
    2654:	60 96       	adiw	r28, 0x10	; 16
    2656:	0f b6       	in	r0, 0x3f	; 63
    2658:	f8 94       	cli
    265a:	de bf       	out	0x3e, r29	; 62
    265c:	0f be       	out	0x3f, r0	; 63
    265e:	cd bf       	out	0x3d, r28	; 61
    2660:	cf 91       	pop	r28
    2662:	df 91       	pop	r29
    2664:	08 95       	ret

			/*Set/Clear the row output pin*/
			GPIO_writePin(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,KEYPAD_BUTTON_PRESSED);

			/*Check if the button is pressed in every column*/
			for(col=0; col<NUM_OF_COLUMNS; col++)
    2666:	8f 85       	ldd	r24, Y+15	; 0x0f
    2668:	8f 5f       	subi	r24, 0xFF	; 255
    266a:	8f 87       	std	Y+15, r24	; 0x0f
    266c:	8f 85       	ldd	r24, Y+15	; 0x0f
    266e:	84 30       	cpi	r24, 0x04	; 4
    2670:	d8 f2       	brcs	.-74     	; 0x2628 <KEYPAD_getPressedKey+0x164>
					return KEYPAD_4x4_adjustKeyNumber((row*NUM_OF_COLUMNS)+col+1);
#endif
				}
			}
			/*Return this row to be input pin again*/
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    2672:	80 e0       	ldi	r24, 0x00	; 0
    2674:	68 89       	ldd	r22, Y+16	; 0x10
    2676:	40 e0       	ldi	r20, 0x00	; 0
    2678:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <GPIO_setupPinDirection>
#endif

	while(1)
	{
		_delay_ms(50);
		for(row=0; row<NUM_OF_ROWS; row++)
    267c:	88 89       	ldd	r24, Y+16	; 0x10
    267e:	8f 5f       	subi	r24, 0xFF	; 255
    2680:	88 8b       	std	Y+16, r24	; 0x10
    2682:	88 89       	ldd	r24, Y+16	; 0x10
    2684:	84 30       	cpi	r24, 0x04	; 4
    2686:	20 f2       	brcs	.-120    	; 0x2610 <KEYPAD_getPressedKey+0x14c>
    2688:	4f cf       	rjmp	.-354    	; 0x2528 <KEYPAD_getPressedKey+0x64>

0000268a <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Function responsible for mapping the switch number in the keypad to
 * its corresponding functional number in the proteus for 4x4 keypad
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 a_buttonNumber)
{
    268a:	df 93       	push	r29
    268c:	cf 93       	push	r28
    268e:	00 d0       	rcall	.+0      	; 0x2690 <KEYPAD_4x4_adjustKeyNumber+0x6>
    2690:	00 d0       	rcall	.+0      	; 0x2692 <KEYPAD_4x4_adjustKeyNumber+0x8>
    2692:	cd b7       	in	r28, 0x3d	; 61
    2694:	de b7       	in	r29, 0x3e	; 62
    2696:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2698:	19 82       	std	Y+1, r1	; 0x01
	switch(a_buttonNumber)
    269a:	8a 81       	ldd	r24, Y+2	; 0x02
    269c:	28 2f       	mov	r18, r24
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	3c 83       	std	Y+4, r19	; 0x04
    26a2:	2b 83       	std	Y+3, r18	; 0x03
    26a4:	8b 81       	ldd	r24, Y+3	; 0x03
    26a6:	9c 81       	ldd	r25, Y+4	; 0x04
    26a8:	88 30       	cpi	r24, 0x08	; 8
    26aa:	91 05       	cpc	r25, r1
    26ac:	09 f4       	brne	.+2      	; 0x26b0 <KEYPAD_4x4_adjustKeyNumber+0x26>
    26ae:	70 c0       	rjmp	.+224    	; 0x2790 <KEYPAD_4x4_adjustKeyNumber+0x106>
    26b0:	2b 81       	ldd	r18, Y+3	; 0x03
    26b2:	3c 81       	ldd	r19, Y+4	; 0x04
    26b4:	29 30       	cpi	r18, 0x09	; 9
    26b6:	31 05       	cpc	r19, r1
    26b8:	5c f5       	brge	.+86     	; 0x2710 <KEYPAD_4x4_adjustKeyNumber+0x86>
    26ba:	8b 81       	ldd	r24, Y+3	; 0x03
    26bc:	9c 81       	ldd	r25, Y+4	; 0x04
    26be:	84 30       	cpi	r24, 0x04	; 4
    26c0:	91 05       	cpc	r25, r1
    26c2:	09 f4       	brne	.+2      	; 0x26c6 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    26c4:	59 c0       	rjmp	.+178    	; 0x2778 <KEYPAD_4x4_adjustKeyNumber+0xee>
    26c6:	2b 81       	ldd	r18, Y+3	; 0x03
    26c8:	3c 81       	ldd	r19, Y+4	; 0x04
    26ca:	25 30       	cpi	r18, 0x05	; 5
    26cc:	31 05       	cpc	r19, r1
    26ce:	9c f4       	brge	.+38     	; 0x26f6 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    26d0:	8b 81       	ldd	r24, Y+3	; 0x03
    26d2:	9c 81       	ldd	r25, Y+4	; 0x04
    26d4:	82 30       	cpi	r24, 0x02	; 2
    26d6:	91 05       	cpc	r25, r1
    26d8:	09 f4       	brne	.+2      	; 0x26dc <KEYPAD_4x4_adjustKeyNumber+0x52>
    26da:	48 c0       	rjmp	.+144    	; 0x276c <KEYPAD_4x4_adjustKeyNumber+0xe2>
    26dc:	2b 81       	ldd	r18, Y+3	; 0x03
    26de:	3c 81       	ldd	r19, Y+4	; 0x04
    26e0:	23 30       	cpi	r18, 0x03	; 3
    26e2:	31 05       	cpc	r19, r1
    26e4:	0c f0       	brlt	.+2      	; 0x26e8 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    26e6:	45 c0       	rjmp	.+138    	; 0x2772 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    26e8:	8b 81       	ldd	r24, Y+3	; 0x03
    26ea:	9c 81       	ldd	r25, Y+4	; 0x04
    26ec:	81 30       	cpi	r24, 0x01	; 1
    26ee:	91 05       	cpc	r25, r1
    26f0:	09 f4       	brne	.+2      	; 0x26f4 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    26f2:	39 c0       	rjmp	.+114    	; 0x2766 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    26f4:	67 c0       	rjmp	.+206    	; 0x27c4 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    26f6:	2b 81       	ldd	r18, Y+3	; 0x03
    26f8:	3c 81       	ldd	r19, Y+4	; 0x04
    26fa:	26 30       	cpi	r18, 0x06	; 6
    26fc:	31 05       	cpc	r19, r1
    26fe:	09 f4       	brne	.+2      	; 0x2702 <KEYPAD_4x4_adjustKeyNumber+0x78>
    2700:	41 c0       	rjmp	.+130    	; 0x2784 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2702:	8b 81       	ldd	r24, Y+3	; 0x03
    2704:	9c 81       	ldd	r25, Y+4	; 0x04
    2706:	87 30       	cpi	r24, 0x07	; 7
    2708:	91 05       	cpc	r25, r1
    270a:	0c f0       	brlt	.+2      	; 0x270e <KEYPAD_4x4_adjustKeyNumber+0x84>
    270c:	3e c0       	rjmp	.+124    	; 0x278a <KEYPAD_4x4_adjustKeyNumber+0x100>
    270e:	37 c0       	rjmp	.+110    	; 0x277e <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2710:	2b 81       	ldd	r18, Y+3	; 0x03
    2712:	3c 81       	ldd	r19, Y+4	; 0x04
    2714:	2c 30       	cpi	r18, 0x0C	; 12
    2716:	31 05       	cpc	r19, r1
    2718:	09 f4       	brne	.+2      	; 0x271c <KEYPAD_4x4_adjustKeyNumber+0x92>
    271a:	46 c0       	rjmp	.+140    	; 0x27a8 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    271c:	8b 81       	ldd	r24, Y+3	; 0x03
    271e:	9c 81       	ldd	r25, Y+4	; 0x04
    2720:	8d 30       	cpi	r24, 0x0D	; 13
    2722:	91 05       	cpc	r25, r1
    2724:	5c f4       	brge	.+22     	; 0x273c <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2726:	2b 81       	ldd	r18, Y+3	; 0x03
    2728:	3c 81       	ldd	r19, Y+4	; 0x04
    272a:	2a 30       	cpi	r18, 0x0A	; 10
    272c:	31 05       	cpc	r19, r1
    272e:	b1 f1       	breq	.+108    	; 0x279c <KEYPAD_4x4_adjustKeyNumber+0x112>
    2730:	8b 81       	ldd	r24, Y+3	; 0x03
    2732:	9c 81       	ldd	r25, Y+4	; 0x04
    2734:	8b 30       	cpi	r24, 0x0B	; 11
    2736:	91 05       	cpc	r25, r1
    2738:	a4 f5       	brge	.+104    	; 0x27a2 <KEYPAD_4x4_adjustKeyNumber+0x118>
    273a:	2d c0       	rjmp	.+90     	; 0x2796 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    273c:	2b 81       	ldd	r18, Y+3	; 0x03
    273e:	3c 81       	ldd	r19, Y+4	; 0x04
    2740:	2e 30       	cpi	r18, 0x0E	; 14
    2742:	31 05       	cpc	r19, r1
    2744:	b9 f1       	breq	.+110    	; 0x27b4 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2746:	8b 81       	ldd	r24, Y+3	; 0x03
    2748:	9c 81       	ldd	r25, Y+4	; 0x04
    274a:	8e 30       	cpi	r24, 0x0E	; 14
    274c:	91 05       	cpc	r25, r1
    274e:	7c f1       	brlt	.+94     	; 0x27ae <KEYPAD_4x4_adjustKeyNumber+0x124>
    2750:	2b 81       	ldd	r18, Y+3	; 0x03
    2752:	3c 81       	ldd	r19, Y+4	; 0x04
    2754:	2f 30       	cpi	r18, 0x0F	; 15
    2756:	31 05       	cpc	r19, r1
    2758:	79 f1       	breq	.+94     	; 0x27b8 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    275a:	8b 81       	ldd	r24, Y+3	; 0x03
    275c:	9c 81       	ldd	r25, Y+4	; 0x04
    275e:	80 31       	cpi	r24, 0x10	; 16
    2760:	91 05       	cpc	r25, r1
    2762:	69 f1       	breq	.+90     	; 0x27be <KEYPAD_4x4_adjustKeyNumber+0x134>
    2764:	2f c0       	rjmp	.+94     	; 0x27c4 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    2766:	87 e0       	ldi	r24, 0x07	; 7
    2768:	89 83       	std	Y+1, r24	; 0x01
    276a:	2e c0       	rjmp	.+92     	; 0x27c8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    276c:	88 e0       	ldi	r24, 0x08	; 8
    276e:	89 83       	std	Y+1, r24	; 0x01
    2770:	2b c0       	rjmp	.+86     	; 0x27c8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    2772:	89 e0       	ldi	r24, 0x09	; 9
    2774:	89 83       	std	Y+1, r24	; 0x01
    2776:	28 c0       	rjmp	.+80     	; 0x27c8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    2778:	85 e2       	ldi	r24, 0x25	; 37
    277a:	89 83       	std	Y+1, r24	; 0x01
    277c:	25 c0       	rjmp	.+74     	; 0x27c8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    277e:	84 e0       	ldi	r24, 0x04	; 4
    2780:	89 83       	std	Y+1, r24	; 0x01
    2782:	22 c0       	rjmp	.+68     	; 0x27c8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    2784:	85 e0       	ldi	r24, 0x05	; 5
    2786:	89 83       	std	Y+1, r24	; 0x01
    2788:	1f c0       	rjmp	.+62     	; 0x27c8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    278a:	86 e0       	ldi	r24, 0x06	; 6
    278c:	89 83       	std	Y+1, r24	; 0x01
    278e:	1c c0       	rjmp	.+56     	; 0x27c8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    2790:	8a e2       	ldi	r24, 0x2A	; 42
    2792:	89 83       	std	Y+1, r24	; 0x01
    2794:	19 c0       	rjmp	.+50     	; 0x27c8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    2796:	81 e0       	ldi	r24, 0x01	; 1
    2798:	89 83       	std	Y+1, r24	; 0x01
    279a:	16 c0       	rjmp	.+44     	; 0x27c8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    279c:	82 e0       	ldi	r24, 0x02	; 2
    279e:	89 83       	std	Y+1, r24	; 0x01
    27a0:	13 c0       	rjmp	.+38     	; 0x27c8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    27a2:	83 e0       	ldi	r24, 0x03	; 3
    27a4:	89 83       	std	Y+1, r24	; 0x01
    27a6:	10 c0       	rjmp	.+32     	; 0x27c8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    27a8:	8d e2       	ldi	r24, 0x2D	; 45
    27aa:	89 83       	std	Y+1, r24	; 0x01
    27ac:	0d c0       	rjmp	.+26     	; 0x27c8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    27ae:	8d e0       	ldi	r24, 0x0D	; 13
    27b0:	89 83       	std	Y+1, r24	; 0x01
    27b2:	0a c0       	rjmp	.+20     	; 0x27c8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    27b4:	19 82       	std	Y+1, r1	; 0x01
    27b6:	08 c0       	rjmp	.+16     	; 0x27c8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    27b8:	8d e3       	ldi	r24, 0x3D	; 61
    27ba:	89 83       	std	Y+1, r24	; 0x01
    27bc:	05 c0       	rjmp	.+10     	; 0x27c8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    27be:	8b e2       	ldi	r24, 0x2B	; 43
    27c0:	89 83       	std	Y+1, r24	; 0x01
    27c2:	02 c0       	rjmp	.+4      	; 0x27c8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = a_buttonNumber;
    27c4:	8a 81       	ldd	r24, Y+2	; 0x02
    27c6:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    27c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    27ca:	0f 90       	pop	r0
    27cc:	0f 90       	pop	r0
    27ce:	0f 90       	pop	r0
    27d0:	0f 90       	pop	r0
    27d2:	cf 91       	pop	r28
    27d4:	df 91       	pop	r29
    27d6:	08 95       	ret

000027d8 <LCD_init>:
 * Initialize the LCD.
 * Setup the LCD pins direction by use the GPIO driver.
 * Setup the LCD data mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    27d8:	df 93       	push	r29
    27da:	cf 93       	push	r28
    27dc:	cd b7       	in	r28, 0x3d	; 61
    27de:	de b7       	in	r29, 0x3e	; 62
	/*Setup the direction of RS and E pins as output pins*/
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    27e0:	83 e0       	ldi	r24, 0x03	; 3
    27e2:	64 e0       	ldi	r22, 0x04	; 4
    27e4:	41 e0       	ldi	r20, 0x01	; 1
    27e6:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    27ea:	83 e0       	ldi	r24, 0x03	; 3
    27ec:	66 e0       	ldi	r22, 0x06	; 6
    27ee:	41 e0       	ldi	r20, 0x01	; 1
    27f0:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <GPIO_setupPinDirection>
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BIT_MODE == 8)
	/* Setup the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    27f4:	82 e0       	ldi	r24, 0x02	; 2
    27f6:	6f ef       	ldi	r22, 0xFF	; 255
    27f8:	0e 94 95 11 	call	0x232a	; 0x232a <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    27fc:	88 e3       	ldi	r24, 0x38	; 56
    27fe:	0e 94 0a 14 	call	0x2814	; 0x2814 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF);  /*Cursor OFF*/
    2802:	8c e0       	ldi	r24, 0x0C	; 12
    2804:	0e 94 0a 14 	call	0x2814	; 0x2814 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND);  /*Clear the screen at the beginning*/
    2808:	81 e0       	ldi	r24, 0x01	; 1
    280a:	0e 94 0a 14 	call	0x2814	; 0x2814 <LCD_sendCommand>
}
    280e:	cf 91       	pop	r28
    2810:	df 91       	pop	r29
    2812:	08 95       	ret

00002814 <LCD_sendCommand>:
/*
 * Description:
 * Send the required command to the LCD.
 */
void LCD_sendCommand(const uint8 a_command)
{
    2814:	df 93       	push	r29
    2816:	cf 93       	push	r28
    2818:	cd b7       	in	r28, 0x3d	; 61
    281a:	de b7       	in	r29, 0x3e	; 62
    281c:	e9 97       	sbiw	r28, 0x39	; 57
    281e:	0f b6       	in	r0, 0x3f	; 63
    2820:	f8 94       	cli
    2822:	de bf       	out	0x3e, r29	; 62
    2824:	0f be       	out	0x3f, r0	; 63
    2826:	cd bf       	out	0x3d, r28	; 61
    2828:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW);  /*Instruction Mode RS=0 */
    282a:	83 e0       	ldi	r24, 0x03	; 3
    282c:	64 e0       	ldi	r22, 0x04	; 4
    282e:	40 e0       	ldi	r20, 0x00	; 0
    2830:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <GPIO_writePin>
    2834:	80 e0       	ldi	r24, 0x00	; 0
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	a0 e8       	ldi	r26, 0x80	; 128
    283a:	bf e3       	ldi	r27, 0x3F	; 63
    283c:	8d ab       	std	Y+53, r24	; 0x35
    283e:	9e ab       	std	Y+54, r25	; 0x36
    2840:	af ab       	std	Y+55, r26	; 0x37
    2842:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2844:	6d a9       	ldd	r22, Y+53	; 0x35
    2846:	7e a9       	ldd	r23, Y+54	; 0x36
    2848:	8f a9       	ldd	r24, Y+55	; 0x37
    284a:	98 ad       	ldd	r25, Y+56	; 0x38
    284c:	20 e0       	ldi	r18, 0x00	; 0
    284e:	30 e0       	ldi	r19, 0x00	; 0
    2850:	4a e7       	ldi	r20, 0x7A	; 122
    2852:	53 e4       	ldi	r21, 0x43	; 67
    2854:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2858:	dc 01       	movw	r26, r24
    285a:	cb 01       	movw	r24, r22
    285c:	89 ab       	std	Y+49, r24	; 0x31
    285e:	9a ab       	std	Y+50, r25	; 0x32
    2860:	ab ab       	std	Y+51, r26	; 0x33
    2862:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2864:	69 a9       	ldd	r22, Y+49	; 0x31
    2866:	7a a9       	ldd	r23, Y+50	; 0x32
    2868:	8b a9       	ldd	r24, Y+51	; 0x33
    286a:	9c a9       	ldd	r25, Y+52	; 0x34
    286c:	20 e0       	ldi	r18, 0x00	; 0
    286e:	30 e0       	ldi	r19, 0x00	; 0
    2870:	40 e8       	ldi	r20, 0x80	; 128
    2872:	5f e3       	ldi	r21, 0x3F	; 63
    2874:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2878:	88 23       	and	r24, r24
    287a:	2c f4       	brge	.+10     	; 0x2886 <LCD_sendCommand+0x72>
		__ticks = 1;
    287c:	81 e0       	ldi	r24, 0x01	; 1
    287e:	90 e0       	ldi	r25, 0x00	; 0
    2880:	98 ab       	std	Y+48, r25	; 0x30
    2882:	8f a7       	std	Y+47, r24	; 0x2f
    2884:	3f c0       	rjmp	.+126    	; 0x2904 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    2886:	69 a9       	ldd	r22, Y+49	; 0x31
    2888:	7a a9       	ldd	r23, Y+50	; 0x32
    288a:	8b a9       	ldd	r24, Y+51	; 0x33
    288c:	9c a9       	ldd	r25, Y+52	; 0x34
    288e:	20 e0       	ldi	r18, 0x00	; 0
    2890:	3f ef       	ldi	r19, 0xFF	; 255
    2892:	4f e7       	ldi	r20, 0x7F	; 127
    2894:	57 e4       	ldi	r21, 0x47	; 71
    2896:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    289a:	18 16       	cp	r1, r24
    289c:	4c f5       	brge	.+82     	; 0x28f0 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    289e:	6d a9       	ldd	r22, Y+53	; 0x35
    28a0:	7e a9       	ldd	r23, Y+54	; 0x36
    28a2:	8f a9       	ldd	r24, Y+55	; 0x37
    28a4:	98 ad       	ldd	r25, Y+56	; 0x38
    28a6:	20 e0       	ldi	r18, 0x00	; 0
    28a8:	30 e0       	ldi	r19, 0x00	; 0
    28aa:	40 e2       	ldi	r20, 0x20	; 32
    28ac:	51 e4       	ldi	r21, 0x41	; 65
    28ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28b2:	dc 01       	movw	r26, r24
    28b4:	cb 01       	movw	r24, r22
    28b6:	bc 01       	movw	r22, r24
    28b8:	cd 01       	movw	r24, r26
    28ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28be:	dc 01       	movw	r26, r24
    28c0:	cb 01       	movw	r24, r22
    28c2:	98 ab       	std	Y+48, r25	; 0x30
    28c4:	8f a7       	std	Y+47, r24	; 0x2f
    28c6:	0f c0       	rjmp	.+30     	; 0x28e6 <LCD_sendCommand+0xd2>
    28c8:	89 e1       	ldi	r24, 0x19	; 25
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	9e a7       	std	Y+46, r25	; 0x2e
    28ce:	8d a7       	std	Y+45, r24	; 0x2d
    28d0:	8d a5       	ldd	r24, Y+45	; 0x2d
    28d2:	9e a5       	ldd	r25, Y+46	; 0x2e
    28d4:	01 97       	sbiw	r24, 0x01	; 1
    28d6:	f1 f7       	brne	.-4      	; 0x28d4 <LCD_sendCommand+0xc0>
    28d8:	9e a7       	std	Y+46, r25	; 0x2e
    28da:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    28de:	98 a9       	ldd	r25, Y+48	; 0x30
    28e0:	01 97       	sbiw	r24, 0x01	; 1
    28e2:	98 ab       	std	Y+48, r25	; 0x30
    28e4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    28e8:	98 a9       	ldd	r25, Y+48	; 0x30
    28ea:	00 97       	sbiw	r24, 0x00	; 0
    28ec:	69 f7       	brne	.-38     	; 0x28c8 <LCD_sendCommand+0xb4>
    28ee:	14 c0       	rjmp	.+40     	; 0x2918 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28f0:	69 a9       	ldd	r22, Y+49	; 0x31
    28f2:	7a a9       	ldd	r23, Y+50	; 0x32
    28f4:	8b a9       	ldd	r24, Y+51	; 0x33
    28f6:	9c a9       	ldd	r25, Y+52	; 0x34
    28f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28fc:	dc 01       	movw	r26, r24
    28fe:	cb 01       	movw	r24, r22
    2900:	98 ab       	std	Y+48, r25	; 0x30
    2902:	8f a7       	std	Y+47, r24	; 0x2f
    2904:	8f a5       	ldd	r24, Y+47	; 0x2f
    2906:	98 a9       	ldd	r25, Y+48	; 0x30
    2908:	9c a7       	std	Y+44, r25	; 0x2c
    290a:	8b a7       	std	Y+43, r24	; 0x2b
    290c:	8b a5       	ldd	r24, Y+43	; 0x2b
    290e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2910:	01 97       	sbiw	r24, 0x01	; 1
    2912:	f1 f7       	brne	.-4      	; 0x2910 <LCD_sendCommand+0xfc>
    2914:	9c a7       	std	Y+44, r25	; 0x2c
    2916:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);    /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);  /*Enable LCD E=1*/
    2918:	83 e0       	ldi	r24, 0x03	; 3
    291a:	66 e0       	ldi	r22, 0x06	; 6
    291c:	41 e0       	ldi	r20, 0x01	; 1
    291e:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <GPIO_writePin>
    2922:	80 e0       	ldi	r24, 0x00	; 0
    2924:	90 e0       	ldi	r25, 0x00	; 0
    2926:	a0 e8       	ldi	r26, 0x80	; 128
    2928:	bf e3       	ldi	r27, 0x3F	; 63
    292a:	8f a3       	std	Y+39, r24	; 0x27
    292c:	98 a7       	std	Y+40, r25	; 0x28
    292e:	a9 a7       	std	Y+41, r26	; 0x29
    2930:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2932:	6f a1       	ldd	r22, Y+39	; 0x27
    2934:	78 a5       	ldd	r23, Y+40	; 0x28
    2936:	89 a5       	ldd	r24, Y+41	; 0x29
    2938:	9a a5       	ldd	r25, Y+42	; 0x2a
    293a:	20 e0       	ldi	r18, 0x00	; 0
    293c:	30 e0       	ldi	r19, 0x00	; 0
    293e:	4a e7       	ldi	r20, 0x7A	; 122
    2940:	53 e4       	ldi	r21, 0x43	; 67
    2942:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2946:	dc 01       	movw	r26, r24
    2948:	cb 01       	movw	r24, r22
    294a:	8b a3       	std	Y+35, r24	; 0x23
    294c:	9c a3       	std	Y+36, r25	; 0x24
    294e:	ad a3       	std	Y+37, r26	; 0x25
    2950:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2952:	6b a1       	ldd	r22, Y+35	; 0x23
    2954:	7c a1       	ldd	r23, Y+36	; 0x24
    2956:	8d a1       	ldd	r24, Y+37	; 0x25
    2958:	9e a1       	ldd	r25, Y+38	; 0x26
    295a:	20 e0       	ldi	r18, 0x00	; 0
    295c:	30 e0       	ldi	r19, 0x00	; 0
    295e:	40 e8       	ldi	r20, 0x80	; 128
    2960:	5f e3       	ldi	r21, 0x3F	; 63
    2962:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2966:	88 23       	and	r24, r24
    2968:	2c f4       	brge	.+10     	; 0x2974 <LCD_sendCommand+0x160>
		__ticks = 1;
    296a:	81 e0       	ldi	r24, 0x01	; 1
    296c:	90 e0       	ldi	r25, 0x00	; 0
    296e:	9a a3       	std	Y+34, r25	; 0x22
    2970:	89 a3       	std	Y+33, r24	; 0x21
    2972:	3f c0       	rjmp	.+126    	; 0x29f2 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    2974:	6b a1       	ldd	r22, Y+35	; 0x23
    2976:	7c a1       	ldd	r23, Y+36	; 0x24
    2978:	8d a1       	ldd	r24, Y+37	; 0x25
    297a:	9e a1       	ldd	r25, Y+38	; 0x26
    297c:	20 e0       	ldi	r18, 0x00	; 0
    297e:	3f ef       	ldi	r19, 0xFF	; 255
    2980:	4f e7       	ldi	r20, 0x7F	; 127
    2982:	57 e4       	ldi	r21, 0x47	; 71
    2984:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2988:	18 16       	cp	r1, r24
    298a:	4c f5       	brge	.+82     	; 0x29de <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    298c:	6f a1       	ldd	r22, Y+39	; 0x27
    298e:	78 a5       	ldd	r23, Y+40	; 0x28
    2990:	89 a5       	ldd	r24, Y+41	; 0x29
    2992:	9a a5       	ldd	r25, Y+42	; 0x2a
    2994:	20 e0       	ldi	r18, 0x00	; 0
    2996:	30 e0       	ldi	r19, 0x00	; 0
    2998:	40 e2       	ldi	r20, 0x20	; 32
    299a:	51 e4       	ldi	r21, 0x41	; 65
    299c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29a0:	dc 01       	movw	r26, r24
    29a2:	cb 01       	movw	r24, r22
    29a4:	bc 01       	movw	r22, r24
    29a6:	cd 01       	movw	r24, r26
    29a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ac:	dc 01       	movw	r26, r24
    29ae:	cb 01       	movw	r24, r22
    29b0:	9a a3       	std	Y+34, r25	; 0x22
    29b2:	89 a3       	std	Y+33, r24	; 0x21
    29b4:	0f c0       	rjmp	.+30     	; 0x29d4 <LCD_sendCommand+0x1c0>
    29b6:	89 e1       	ldi	r24, 0x19	; 25
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	98 a3       	std	Y+32, r25	; 0x20
    29bc:	8f 8f       	std	Y+31, r24	; 0x1f
    29be:	8f 8d       	ldd	r24, Y+31	; 0x1f
    29c0:	98 a1       	ldd	r25, Y+32	; 0x20
    29c2:	01 97       	sbiw	r24, 0x01	; 1
    29c4:	f1 f7       	brne	.-4      	; 0x29c2 <LCD_sendCommand+0x1ae>
    29c6:	98 a3       	std	Y+32, r25	; 0x20
    29c8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29ca:	89 a1       	ldd	r24, Y+33	; 0x21
    29cc:	9a a1       	ldd	r25, Y+34	; 0x22
    29ce:	01 97       	sbiw	r24, 0x01	; 1
    29d0:	9a a3       	std	Y+34, r25	; 0x22
    29d2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29d4:	89 a1       	ldd	r24, Y+33	; 0x21
    29d6:	9a a1       	ldd	r25, Y+34	; 0x22
    29d8:	00 97       	sbiw	r24, 0x00	; 0
    29da:	69 f7       	brne	.-38     	; 0x29b6 <LCD_sendCommand+0x1a2>
    29dc:	14 c0       	rjmp	.+40     	; 0x2a06 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29de:	6b a1       	ldd	r22, Y+35	; 0x23
    29e0:	7c a1       	ldd	r23, Y+36	; 0x24
    29e2:	8d a1       	ldd	r24, Y+37	; 0x25
    29e4:	9e a1       	ldd	r25, Y+38	; 0x26
    29e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ea:	dc 01       	movw	r26, r24
    29ec:	cb 01       	movw	r24, r22
    29ee:	9a a3       	std	Y+34, r25	; 0x22
    29f0:	89 a3       	std	Y+33, r24	; 0x21
    29f2:	89 a1       	ldd	r24, Y+33	; 0x21
    29f4:	9a a1       	ldd	r25, Y+34	; 0x22
    29f6:	9e 8f       	std	Y+30, r25	; 0x1e
    29f8:	8d 8f       	std	Y+29, r24	; 0x1d
    29fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29fc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    29fe:	01 97       	sbiw	r24, 0x01	; 1
    2a00:	f1 f7       	brne	.-4      	; 0x29fe <LCD_sendCommand+0x1ea>
    2a02:	9e 8f       	std	Y+30, r25	; 0x1e
    2a04:	8d 8f       	std	Y+29, r24	; 0x1d
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(a_command,1));
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(a_command,2));
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(a_command,3));

#elif(LCD_DATA_BIT_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,a_command);   /* Write the required command to the data bus D0 --> D7 */
    2a06:	82 e0       	ldi	r24, 0x02	; 2
    2a08:	69 ad       	ldd	r22, Y+57	; 0x39
    2a0a:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <GPIO_writePort>
    2a0e:	80 e0       	ldi	r24, 0x00	; 0
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	a0 e8       	ldi	r26, 0x80	; 128
    2a14:	bf e3       	ldi	r27, 0x3F	; 63
    2a16:	89 8f       	std	Y+25, r24	; 0x19
    2a18:	9a 8f       	std	Y+26, r25	; 0x1a
    2a1a:	ab 8f       	std	Y+27, r26	; 0x1b
    2a1c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a1e:	69 8d       	ldd	r22, Y+25	; 0x19
    2a20:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a22:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a24:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a26:	20 e0       	ldi	r18, 0x00	; 0
    2a28:	30 e0       	ldi	r19, 0x00	; 0
    2a2a:	4a e7       	ldi	r20, 0x7A	; 122
    2a2c:	53 e4       	ldi	r21, 0x43	; 67
    2a2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a32:	dc 01       	movw	r26, r24
    2a34:	cb 01       	movw	r24, r22
    2a36:	8d 8b       	std	Y+21, r24	; 0x15
    2a38:	9e 8b       	std	Y+22, r25	; 0x16
    2a3a:	af 8b       	std	Y+23, r26	; 0x17
    2a3c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a3e:	6d 89       	ldd	r22, Y+21	; 0x15
    2a40:	7e 89       	ldd	r23, Y+22	; 0x16
    2a42:	8f 89       	ldd	r24, Y+23	; 0x17
    2a44:	98 8d       	ldd	r25, Y+24	; 0x18
    2a46:	20 e0       	ldi	r18, 0x00	; 0
    2a48:	30 e0       	ldi	r19, 0x00	; 0
    2a4a:	40 e8       	ldi	r20, 0x80	; 128
    2a4c:	5f e3       	ldi	r21, 0x3F	; 63
    2a4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a52:	88 23       	and	r24, r24
    2a54:	2c f4       	brge	.+10     	; 0x2a60 <LCD_sendCommand+0x24c>
		__ticks = 1;
    2a56:	81 e0       	ldi	r24, 0x01	; 1
    2a58:	90 e0       	ldi	r25, 0x00	; 0
    2a5a:	9c 8b       	std	Y+20, r25	; 0x14
    2a5c:	8b 8b       	std	Y+19, r24	; 0x13
    2a5e:	3f c0       	rjmp	.+126    	; 0x2ade <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    2a60:	6d 89       	ldd	r22, Y+21	; 0x15
    2a62:	7e 89       	ldd	r23, Y+22	; 0x16
    2a64:	8f 89       	ldd	r24, Y+23	; 0x17
    2a66:	98 8d       	ldd	r25, Y+24	; 0x18
    2a68:	20 e0       	ldi	r18, 0x00	; 0
    2a6a:	3f ef       	ldi	r19, 0xFF	; 255
    2a6c:	4f e7       	ldi	r20, 0x7F	; 127
    2a6e:	57 e4       	ldi	r21, 0x47	; 71
    2a70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a74:	18 16       	cp	r1, r24
    2a76:	4c f5       	brge	.+82     	; 0x2aca <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a78:	69 8d       	ldd	r22, Y+25	; 0x19
    2a7a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a7e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a80:	20 e0       	ldi	r18, 0x00	; 0
    2a82:	30 e0       	ldi	r19, 0x00	; 0
    2a84:	40 e2       	ldi	r20, 0x20	; 32
    2a86:	51 e4       	ldi	r21, 0x41	; 65
    2a88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a8c:	dc 01       	movw	r26, r24
    2a8e:	cb 01       	movw	r24, r22
    2a90:	bc 01       	movw	r22, r24
    2a92:	cd 01       	movw	r24, r26
    2a94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a98:	dc 01       	movw	r26, r24
    2a9a:	cb 01       	movw	r24, r22
    2a9c:	9c 8b       	std	Y+20, r25	; 0x14
    2a9e:	8b 8b       	std	Y+19, r24	; 0x13
    2aa0:	0f c0       	rjmp	.+30     	; 0x2ac0 <LCD_sendCommand+0x2ac>
    2aa2:	89 e1       	ldi	r24, 0x19	; 25
    2aa4:	90 e0       	ldi	r25, 0x00	; 0
    2aa6:	9a 8b       	std	Y+18, r25	; 0x12
    2aa8:	89 8b       	std	Y+17, r24	; 0x11
    2aaa:	89 89       	ldd	r24, Y+17	; 0x11
    2aac:	9a 89       	ldd	r25, Y+18	; 0x12
    2aae:	01 97       	sbiw	r24, 0x01	; 1
    2ab0:	f1 f7       	brne	.-4      	; 0x2aae <LCD_sendCommand+0x29a>
    2ab2:	9a 8b       	std	Y+18, r25	; 0x12
    2ab4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ab6:	8b 89       	ldd	r24, Y+19	; 0x13
    2ab8:	9c 89       	ldd	r25, Y+20	; 0x14
    2aba:	01 97       	sbiw	r24, 0x01	; 1
    2abc:	9c 8b       	std	Y+20, r25	; 0x14
    2abe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ac0:	8b 89       	ldd	r24, Y+19	; 0x13
    2ac2:	9c 89       	ldd	r25, Y+20	; 0x14
    2ac4:	00 97       	sbiw	r24, 0x00	; 0
    2ac6:	69 f7       	brne	.-38     	; 0x2aa2 <LCD_sendCommand+0x28e>
    2ac8:	14 c0       	rjmp	.+40     	; 0x2af2 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aca:	6d 89       	ldd	r22, Y+21	; 0x15
    2acc:	7e 89       	ldd	r23, Y+22	; 0x16
    2ace:	8f 89       	ldd	r24, Y+23	; 0x17
    2ad0:	98 8d       	ldd	r25, Y+24	; 0x18
    2ad2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ad6:	dc 01       	movw	r26, r24
    2ad8:	cb 01       	movw	r24, r22
    2ada:	9c 8b       	std	Y+20, r25	; 0x14
    2adc:	8b 8b       	std	Y+19, r24	; 0x13
    2ade:	8b 89       	ldd	r24, Y+19	; 0x13
    2ae0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ae2:	98 8b       	std	Y+16, r25	; 0x10
    2ae4:	8f 87       	std	Y+15, r24	; 0x0f
    2ae6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ae8:	98 89       	ldd	r25, Y+16	; 0x10
    2aea:	01 97       	sbiw	r24, 0x01	; 1
    2aec:	f1 f7       	brne	.-4      	; 0x2aea <LCD_sendCommand+0x2d6>
    2aee:	98 8b       	std	Y+16, r25	; 0x10
    2af0:	8f 87       	std	Y+15, r24	; 0x0f

#endif

	_delay_ms(1);    /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2af2:	83 e0       	ldi	r24, 0x03	; 3
    2af4:	66 e0       	ldi	r22, 0x06	; 6
    2af6:	40 e0       	ldi	r20, 0x00	; 0
    2af8:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <GPIO_writePin>
    2afc:	80 e0       	ldi	r24, 0x00	; 0
    2afe:	90 e0       	ldi	r25, 0x00	; 0
    2b00:	a0 e8       	ldi	r26, 0x80	; 128
    2b02:	bf e3       	ldi	r27, 0x3F	; 63
    2b04:	8b 87       	std	Y+11, r24	; 0x0b
    2b06:	9c 87       	std	Y+12, r25	; 0x0c
    2b08:	ad 87       	std	Y+13, r26	; 0x0d
    2b0a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b10:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b12:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b14:	20 e0       	ldi	r18, 0x00	; 0
    2b16:	30 e0       	ldi	r19, 0x00	; 0
    2b18:	4a e7       	ldi	r20, 0x7A	; 122
    2b1a:	53 e4       	ldi	r21, 0x43	; 67
    2b1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b20:	dc 01       	movw	r26, r24
    2b22:	cb 01       	movw	r24, r22
    2b24:	8f 83       	std	Y+7, r24	; 0x07
    2b26:	98 87       	std	Y+8, r25	; 0x08
    2b28:	a9 87       	std	Y+9, r26	; 0x09
    2b2a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b2c:	6f 81       	ldd	r22, Y+7	; 0x07
    2b2e:	78 85       	ldd	r23, Y+8	; 0x08
    2b30:	89 85       	ldd	r24, Y+9	; 0x09
    2b32:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b34:	20 e0       	ldi	r18, 0x00	; 0
    2b36:	30 e0       	ldi	r19, 0x00	; 0
    2b38:	40 e8       	ldi	r20, 0x80	; 128
    2b3a:	5f e3       	ldi	r21, 0x3F	; 63
    2b3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b40:	88 23       	and	r24, r24
    2b42:	2c f4       	brge	.+10     	; 0x2b4e <LCD_sendCommand+0x33a>
		__ticks = 1;
    2b44:	81 e0       	ldi	r24, 0x01	; 1
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	9e 83       	std	Y+6, r25	; 0x06
    2b4a:	8d 83       	std	Y+5, r24	; 0x05
    2b4c:	3f c0       	rjmp	.+126    	; 0x2bcc <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    2b4e:	6f 81       	ldd	r22, Y+7	; 0x07
    2b50:	78 85       	ldd	r23, Y+8	; 0x08
    2b52:	89 85       	ldd	r24, Y+9	; 0x09
    2b54:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b56:	20 e0       	ldi	r18, 0x00	; 0
    2b58:	3f ef       	ldi	r19, 0xFF	; 255
    2b5a:	4f e7       	ldi	r20, 0x7F	; 127
    2b5c:	57 e4       	ldi	r21, 0x47	; 71
    2b5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b62:	18 16       	cp	r1, r24
    2b64:	4c f5       	brge	.+82     	; 0x2bb8 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b66:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b68:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b6e:	20 e0       	ldi	r18, 0x00	; 0
    2b70:	30 e0       	ldi	r19, 0x00	; 0
    2b72:	40 e2       	ldi	r20, 0x20	; 32
    2b74:	51 e4       	ldi	r21, 0x41	; 65
    2b76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b7a:	dc 01       	movw	r26, r24
    2b7c:	cb 01       	movw	r24, r22
    2b7e:	bc 01       	movw	r22, r24
    2b80:	cd 01       	movw	r24, r26
    2b82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b86:	dc 01       	movw	r26, r24
    2b88:	cb 01       	movw	r24, r22
    2b8a:	9e 83       	std	Y+6, r25	; 0x06
    2b8c:	8d 83       	std	Y+5, r24	; 0x05
    2b8e:	0f c0       	rjmp	.+30     	; 0x2bae <LCD_sendCommand+0x39a>
    2b90:	89 e1       	ldi	r24, 0x19	; 25
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	9c 83       	std	Y+4, r25	; 0x04
    2b96:	8b 83       	std	Y+3, r24	; 0x03
    2b98:	8b 81       	ldd	r24, Y+3	; 0x03
    2b9a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b9c:	01 97       	sbiw	r24, 0x01	; 1
    2b9e:	f1 f7       	brne	.-4      	; 0x2b9c <LCD_sendCommand+0x388>
    2ba0:	9c 83       	std	Y+4, r25	; 0x04
    2ba2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ba4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ba6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ba8:	01 97       	sbiw	r24, 0x01	; 1
    2baa:	9e 83       	std	Y+6, r25	; 0x06
    2bac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bae:	8d 81       	ldd	r24, Y+5	; 0x05
    2bb0:	9e 81       	ldd	r25, Y+6	; 0x06
    2bb2:	00 97       	sbiw	r24, 0x00	; 0
    2bb4:	69 f7       	brne	.-38     	; 0x2b90 <LCD_sendCommand+0x37c>
    2bb6:	14 c0       	rjmp	.+40     	; 0x2be0 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bb8:	6f 81       	ldd	r22, Y+7	; 0x07
    2bba:	78 85       	ldd	r23, Y+8	; 0x08
    2bbc:	89 85       	ldd	r24, Y+9	; 0x09
    2bbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bc4:	dc 01       	movw	r26, r24
    2bc6:	cb 01       	movw	r24, r22
    2bc8:	9e 83       	std	Y+6, r25	; 0x06
    2bca:	8d 83       	std	Y+5, r24	; 0x05
    2bcc:	8d 81       	ldd	r24, Y+5	; 0x05
    2bce:	9e 81       	ldd	r25, Y+6	; 0x06
    2bd0:	9a 83       	std	Y+2, r25	; 0x02
    2bd2:	89 83       	std	Y+1, r24	; 0x01
    2bd4:	89 81       	ldd	r24, Y+1	; 0x01
    2bd6:	9a 81       	ldd	r25, Y+2	; 0x02
    2bd8:	01 97       	sbiw	r24, 0x01	; 1
    2bda:	f1 f7       	brne	.-4      	; 0x2bd8 <LCD_sendCommand+0x3c4>
    2bdc:	9a 83       	std	Y+2, r25	; 0x02
    2bde:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);    /* delay for processing Th = 13ns */
}
    2be0:	e9 96       	adiw	r28, 0x39	; 57
    2be2:	0f b6       	in	r0, 0x3f	; 63
    2be4:	f8 94       	cli
    2be6:	de bf       	out	0x3e, r29	; 62
    2be8:	0f be       	out	0x3f, r0	; 63
    2bea:	cd bf       	out	0x3d, r28	; 61
    2bec:	cf 91       	pop	r28
    2bee:	df 91       	pop	r29
    2bf0:	08 95       	ret

00002bf2 <LCD_displayCharacter>:
/*
 * Description:
 * Display the required character on the LCD screen.
 */
void LCD_displayCharacter(const uint8 a_data)
{
    2bf2:	df 93       	push	r29
    2bf4:	cf 93       	push	r28
    2bf6:	cd b7       	in	r28, 0x3d	; 61
    2bf8:	de b7       	in	r29, 0x3e	; 62
    2bfa:	e9 97       	sbiw	r28, 0x39	; 57
    2bfc:	0f b6       	in	r0, 0x3f	; 63
    2bfe:	f8 94       	cli
    2c00:	de bf       	out	0x3e, r29	; 62
    2c02:	0f be       	out	0x3f, r0	; 63
    2c04:	cd bf       	out	0x3d, r28	; 61
    2c06:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH);  /*Display data Mode RS=1 */
    2c08:	83 e0       	ldi	r24, 0x03	; 3
    2c0a:	64 e0       	ldi	r22, 0x04	; 4
    2c0c:	41 e0       	ldi	r20, 0x01	; 1
    2c0e:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <GPIO_writePin>
    2c12:	80 e0       	ldi	r24, 0x00	; 0
    2c14:	90 e0       	ldi	r25, 0x00	; 0
    2c16:	a0 e8       	ldi	r26, 0x80	; 128
    2c18:	bf e3       	ldi	r27, 0x3F	; 63
    2c1a:	8d ab       	std	Y+53, r24	; 0x35
    2c1c:	9e ab       	std	Y+54, r25	; 0x36
    2c1e:	af ab       	std	Y+55, r26	; 0x37
    2c20:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c22:	6d a9       	ldd	r22, Y+53	; 0x35
    2c24:	7e a9       	ldd	r23, Y+54	; 0x36
    2c26:	8f a9       	ldd	r24, Y+55	; 0x37
    2c28:	98 ad       	ldd	r25, Y+56	; 0x38
    2c2a:	20 e0       	ldi	r18, 0x00	; 0
    2c2c:	30 e0       	ldi	r19, 0x00	; 0
    2c2e:	4a e7       	ldi	r20, 0x7A	; 122
    2c30:	53 e4       	ldi	r21, 0x43	; 67
    2c32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c36:	dc 01       	movw	r26, r24
    2c38:	cb 01       	movw	r24, r22
    2c3a:	89 ab       	std	Y+49, r24	; 0x31
    2c3c:	9a ab       	std	Y+50, r25	; 0x32
    2c3e:	ab ab       	std	Y+51, r26	; 0x33
    2c40:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2c42:	69 a9       	ldd	r22, Y+49	; 0x31
    2c44:	7a a9       	ldd	r23, Y+50	; 0x32
    2c46:	8b a9       	ldd	r24, Y+51	; 0x33
    2c48:	9c a9       	ldd	r25, Y+52	; 0x34
    2c4a:	20 e0       	ldi	r18, 0x00	; 0
    2c4c:	30 e0       	ldi	r19, 0x00	; 0
    2c4e:	40 e8       	ldi	r20, 0x80	; 128
    2c50:	5f e3       	ldi	r21, 0x3F	; 63
    2c52:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c56:	88 23       	and	r24, r24
    2c58:	2c f4       	brge	.+10     	; 0x2c64 <LCD_displayCharacter+0x72>
		__ticks = 1;
    2c5a:	81 e0       	ldi	r24, 0x01	; 1
    2c5c:	90 e0       	ldi	r25, 0x00	; 0
    2c5e:	98 ab       	std	Y+48, r25	; 0x30
    2c60:	8f a7       	std	Y+47, r24	; 0x2f
    2c62:	3f c0       	rjmp	.+126    	; 0x2ce2 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    2c64:	69 a9       	ldd	r22, Y+49	; 0x31
    2c66:	7a a9       	ldd	r23, Y+50	; 0x32
    2c68:	8b a9       	ldd	r24, Y+51	; 0x33
    2c6a:	9c a9       	ldd	r25, Y+52	; 0x34
    2c6c:	20 e0       	ldi	r18, 0x00	; 0
    2c6e:	3f ef       	ldi	r19, 0xFF	; 255
    2c70:	4f e7       	ldi	r20, 0x7F	; 127
    2c72:	57 e4       	ldi	r21, 0x47	; 71
    2c74:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c78:	18 16       	cp	r1, r24
    2c7a:	4c f5       	brge	.+82     	; 0x2cce <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c7c:	6d a9       	ldd	r22, Y+53	; 0x35
    2c7e:	7e a9       	ldd	r23, Y+54	; 0x36
    2c80:	8f a9       	ldd	r24, Y+55	; 0x37
    2c82:	98 ad       	ldd	r25, Y+56	; 0x38
    2c84:	20 e0       	ldi	r18, 0x00	; 0
    2c86:	30 e0       	ldi	r19, 0x00	; 0
    2c88:	40 e2       	ldi	r20, 0x20	; 32
    2c8a:	51 e4       	ldi	r21, 0x41	; 65
    2c8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c90:	dc 01       	movw	r26, r24
    2c92:	cb 01       	movw	r24, r22
    2c94:	bc 01       	movw	r22, r24
    2c96:	cd 01       	movw	r24, r26
    2c98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c9c:	dc 01       	movw	r26, r24
    2c9e:	cb 01       	movw	r24, r22
    2ca0:	98 ab       	std	Y+48, r25	; 0x30
    2ca2:	8f a7       	std	Y+47, r24	; 0x2f
    2ca4:	0f c0       	rjmp	.+30     	; 0x2cc4 <LCD_displayCharacter+0xd2>
    2ca6:	89 e1       	ldi	r24, 0x19	; 25
    2ca8:	90 e0       	ldi	r25, 0x00	; 0
    2caa:	9e a7       	std	Y+46, r25	; 0x2e
    2cac:	8d a7       	std	Y+45, r24	; 0x2d
    2cae:	8d a5       	ldd	r24, Y+45	; 0x2d
    2cb0:	9e a5       	ldd	r25, Y+46	; 0x2e
    2cb2:	01 97       	sbiw	r24, 0x01	; 1
    2cb4:	f1 f7       	brne	.-4      	; 0x2cb2 <LCD_displayCharacter+0xc0>
    2cb6:	9e a7       	std	Y+46, r25	; 0x2e
    2cb8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cba:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cbc:	98 a9       	ldd	r25, Y+48	; 0x30
    2cbe:	01 97       	sbiw	r24, 0x01	; 1
    2cc0:	98 ab       	std	Y+48, r25	; 0x30
    2cc2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cc4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cc6:	98 a9       	ldd	r25, Y+48	; 0x30
    2cc8:	00 97       	sbiw	r24, 0x00	; 0
    2cca:	69 f7       	brne	.-38     	; 0x2ca6 <LCD_displayCharacter+0xb4>
    2ccc:	14 c0       	rjmp	.+40     	; 0x2cf6 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cce:	69 a9       	ldd	r22, Y+49	; 0x31
    2cd0:	7a a9       	ldd	r23, Y+50	; 0x32
    2cd2:	8b a9       	ldd	r24, Y+51	; 0x33
    2cd4:	9c a9       	ldd	r25, Y+52	; 0x34
    2cd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cda:	dc 01       	movw	r26, r24
    2cdc:	cb 01       	movw	r24, r22
    2cde:	98 ab       	std	Y+48, r25	; 0x30
    2ce0:	8f a7       	std	Y+47, r24	; 0x2f
    2ce2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ce4:	98 a9       	ldd	r25, Y+48	; 0x30
    2ce6:	9c a7       	std	Y+44, r25	; 0x2c
    2ce8:	8b a7       	std	Y+43, r24	; 0x2b
    2cea:	8b a5       	ldd	r24, Y+43	; 0x2b
    2cec:	9c a5       	ldd	r25, Y+44	; 0x2c
    2cee:	01 97       	sbiw	r24, 0x01	; 1
    2cf0:	f1 f7       	brne	.-4      	; 0x2cee <LCD_displayCharacter+0xfc>
    2cf2:	9c a7       	std	Y+44, r25	; 0x2c
    2cf4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);    /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);  /*Enable LCD E=1*/
    2cf6:	83 e0       	ldi	r24, 0x03	; 3
    2cf8:	66 e0       	ldi	r22, 0x06	; 6
    2cfa:	41 e0       	ldi	r20, 0x01	; 1
    2cfc:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <GPIO_writePin>
    2d00:	80 e0       	ldi	r24, 0x00	; 0
    2d02:	90 e0       	ldi	r25, 0x00	; 0
    2d04:	a0 e8       	ldi	r26, 0x80	; 128
    2d06:	bf e3       	ldi	r27, 0x3F	; 63
    2d08:	8f a3       	std	Y+39, r24	; 0x27
    2d0a:	98 a7       	std	Y+40, r25	; 0x28
    2d0c:	a9 a7       	std	Y+41, r26	; 0x29
    2d0e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d10:	6f a1       	ldd	r22, Y+39	; 0x27
    2d12:	78 a5       	ldd	r23, Y+40	; 0x28
    2d14:	89 a5       	ldd	r24, Y+41	; 0x29
    2d16:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d18:	20 e0       	ldi	r18, 0x00	; 0
    2d1a:	30 e0       	ldi	r19, 0x00	; 0
    2d1c:	4a e7       	ldi	r20, 0x7A	; 122
    2d1e:	53 e4       	ldi	r21, 0x43	; 67
    2d20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d24:	dc 01       	movw	r26, r24
    2d26:	cb 01       	movw	r24, r22
    2d28:	8b a3       	std	Y+35, r24	; 0x23
    2d2a:	9c a3       	std	Y+36, r25	; 0x24
    2d2c:	ad a3       	std	Y+37, r26	; 0x25
    2d2e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2d30:	6b a1       	ldd	r22, Y+35	; 0x23
    2d32:	7c a1       	ldd	r23, Y+36	; 0x24
    2d34:	8d a1       	ldd	r24, Y+37	; 0x25
    2d36:	9e a1       	ldd	r25, Y+38	; 0x26
    2d38:	20 e0       	ldi	r18, 0x00	; 0
    2d3a:	30 e0       	ldi	r19, 0x00	; 0
    2d3c:	40 e8       	ldi	r20, 0x80	; 128
    2d3e:	5f e3       	ldi	r21, 0x3F	; 63
    2d40:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d44:	88 23       	and	r24, r24
    2d46:	2c f4       	brge	.+10     	; 0x2d52 <LCD_displayCharacter+0x160>
		__ticks = 1;
    2d48:	81 e0       	ldi	r24, 0x01	; 1
    2d4a:	90 e0       	ldi	r25, 0x00	; 0
    2d4c:	9a a3       	std	Y+34, r25	; 0x22
    2d4e:	89 a3       	std	Y+33, r24	; 0x21
    2d50:	3f c0       	rjmp	.+126    	; 0x2dd0 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2d52:	6b a1       	ldd	r22, Y+35	; 0x23
    2d54:	7c a1       	ldd	r23, Y+36	; 0x24
    2d56:	8d a1       	ldd	r24, Y+37	; 0x25
    2d58:	9e a1       	ldd	r25, Y+38	; 0x26
    2d5a:	20 e0       	ldi	r18, 0x00	; 0
    2d5c:	3f ef       	ldi	r19, 0xFF	; 255
    2d5e:	4f e7       	ldi	r20, 0x7F	; 127
    2d60:	57 e4       	ldi	r21, 0x47	; 71
    2d62:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d66:	18 16       	cp	r1, r24
    2d68:	4c f5       	brge	.+82     	; 0x2dbc <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d6a:	6f a1       	ldd	r22, Y+39	; 0x27
    2d6c:	78 a5       	ldd	r23, Y+40	; 0x28
    2d6e:	89 a5       	ldd	r24, Y+41	; 0x29
    2d70:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d72:	20 e0       	ldi	r18, 0x00	; 0
    2d74:	30 e0       	ldi	r19, 0x00	; 0
    2d76:	40 e2       	ldi	r20, 0x20	; 32
    2d78:	51 e4       	ldi	r21, 0x41	; 65
    2d7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d7e:	dc 01       	movw	r26, r24
    2d80:	cb 01       	movw	r24, r22
    2d82:	bc 01       	movw	r22, r24
    2d84:	cd 01       	movw	r24, r26
    2d86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d8a:	dc 01       	movw	r26, r24
    2d8c:	cb 01       	movw	r24, r22
    2d8e:	9a a3       	std	Y+34, r25	; 0x22
    2d90:	89 a3       	std	Y+33, r24	; 0x21
    2d92:	0f c0       	rjmp	.+30     	; 0x2db2 <LCD_displayCharacter+0x1c0>
    2d94:	89 e1       	ldi	r24, 0x19	; 25
    2d96:	90 e0       	ldi	r25, 0x00	; 0
    2d98:	98 a3       	std	Y+32, r25	; 0x20
    2d9a:	8f 8f       	std	Y+31, r24	; 0x1f
    2d9c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d9e:	98 a1       	ldd	r25, Y+32	; 0x20
    2da0:	01 97       	sbiw	r24, 0x01	; 1
    2da2:	f1 f7       	brne	.-4      	; 0x2da0 <LCD_displayCharacter+0x1ae>
    2da4:	98 a3       	std	Y+32, r25	; 0x20
    2da6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2da8:	89 a1       	ldd	r24, Y+33	; 0x21
    2daa:	9a a1       	ldd	r25, Y+34	; 0x22
    2dac:	01 97       	sbiw	r24, 0x01	; 1
    2dae:	9a a3       	std	Y+34, r25	; 0x22
    2db0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2db2:	89 a1       	ldd	r24, Y+33	; 0x21
    2db4:	9a a1       	ldd	r25, Y+34	; 0x22
    2db6:	00 97       	sbiw	r24, 0x00	; 0
    2db8:	69 f7       	brne	.-38     	; 0x2d94 <LCD_displayCharacter+0x1a2>
    2dba:	14 c0       	rjmp	.+40     	; 0x2de4 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dbc:	6b a1       	ldd	r22, Y+35	; 0x23
    2dbe:	7c a1       	ldd	r23, Y+36	; 0x24
    2dc0:	8d a1       	ldd	r24, Y+37	; 0x25
    2dc2:	9e a1       	ldd	r25, Y+38	; 0x26
    2dc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dc8:	dc 01       	movw	r26, r24
    2dca:	cb 01       	movw	r24, r22
    2dcc:	9a a3       	std	Y+34, r25	; 0x22
    2dce:	89 a3       	std	Y+33, r24	; 0x21
    2dd0:	89 a1       	ldd	r24, Y+33	; 0x21
    2dd2:	9a a1       	ldd	r25, Y+34	; 0x22
    2dd4:	9e 8f       	std	Y+30, r25	; 0x1e
    2dd6:	8d 8f       	std	Y+29, r24	; 0x1d
    2dd8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2dda:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ddc:	01 97       	sbiw	r24, 0x01	; 1
    2dde:	f1 f7       	brne	.-4      	; 0x2ddc <LCD_displayCharacter+0x1ea>
    2de0:	9e 8f       	std	Y+30, r25	; 0x1e
    2de2:	8d 8f       	std	Y+29, r24	; 0x1d
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(a_data,2));
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(a_data,3));


#elif(LCD_DATA_BIT_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,a_data);   /*Display the required data on the data bus D0 --> D7 */
    2de4:	82 e0       	ldi	r24, 0x02	; 2
    2de6:	69 ad       	ldd	r22, Y+57	; 0x39
    2de8:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <GPIO_writePort>
    2dec:	80 e0       	ldi	r24, 0x00	; 0
    2dee:	90 e0       	ldi	r25, 0x00	; 0
    2df0:	a0 e8       	ldi	r26, 0x80	; 128
    2df2:	bf e3       	ldi	r27, 0x3F	; 63
    2df4:	89 8f       	std	Y+25, r24	; 0x19
    2df6:	9a 8f       	std	Y+26, r25	; 0x1a
    2df8:	ab 8f       	std	Y+27, r26	; 0x1b
    2dfa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dfc:	69 8d       	ldd	r22, Y+25	; 0x19
    2dfe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e00:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e02:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e04:	20 e0       	ldi	r18, 0x00	; 0
    2e06:	30 e0       	ldi	r19, 0x00	; 0
    2e08:	4a e7       	ldi	r20, 0x7A	; 122
    2e0a:	53 e4       	ldi	r21, 0x43	; 67
    2e0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e10:	dc 01       	movw	r26, r24
    2e12:	cb 01       	movw	r24, r22
    2e14:	8d 8b       	std	Y+21, r24	; 0x15
    2e16:	9e 8b       	std	Y+22, r25	; 0x16
    2e18:	af 8b       	std	Y+23, r26	; 0x17
    2e1a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e1c:	6d 89       	ldd	r22, Y+21	; 0x15
    2e1e:	7e 89       	ldd	r23, Y+22	; 0x16
    2e20:	8f 89       	ldd	r24, Y+23	; 0x17
    2e22:	98 8d       	ldd	r25, Y+24	; 0x18
    2e24:	20 e0       	ldi	r18, 0x00	; 0
    2e26:	30 e0       	ldi	r19, 0x00	; 0
    2e28:	40 e8       	ldi	r20, 0x80	; 128
    2e2a:	5f e3       	ldi	r21, 0x3F	; 63
    2e2c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e30:	88 23       	and	r24, r24
    2e32:	2c f4       	brge	.+10     	; 0x2e3e <LCD_displayCharacter+0x24c>
		__ticks = 1;
    2e34:	81 e0       	ldi	r24, 0x01	; 1
    2e36:	90 e0       	ldi	r25, 0x00	; 0
    2e38:	9c 8b       	std	Y+20, r25	; 0x14
    2e3a:	8b 8b       	std	Y+19, r24	; 0x13
    2e3c:	3f c0       	rjmp	.+126    	; 0x2ebc <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2e3e:	6d 89       	ldd	r22, Y+21	; 0x15
    2e40:	7e 89       	ldd	r23, Y+22	; 0x16
    2e42:	8f 89       	ldd	r24, Y+23	; 0x17
    2e44:	98 8d       	ldd	r25, Y+24	; 0x18
    2e46:	20 e0       	ldi	r18, 0x00	; 0
    2e48:	3f ef       	ldi	r19, 0xFF	; 255
    2e4a:	4f e7       	ldi	r20, 0x7F	; 127
    2e4c:	57 e4       	ldi	r21, 0x47	; 71
    2e4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e52:	18 16       	cp	r1, r24
    2e54:	4c f5       	brge	.+82     	; 0x2ea8 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e56:	69 8d       	ldd	r22, Y+25	; 0x19
    2e58:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e5e:	20 e0       	ldi	r18, 0x00	; 0
    2e60:	30 e0       	ldi	r19, 0x00	; 0
    2e62:	40 e2       	ldi	r20, 0x20	; 32
    2e64:	51 e4       	ldi	r21, 0x41	; 65
    2e66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e6a:	dc 01       	movw	r26, r24
    2e6c:	cb 01       	movw	r24, r22
    2e6e:	bc 01       	movw	r22, r24
    2e70:	cd 01       	movw	r24, r26
    2e72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e76:	dc 01       	movw	r26, r24
    2e78:	cb 01       	movw	r24, r22
    2e7a:	9c 8b       	std	Y+20, r25	; 0x14
    2e7c:	8b 8b       	std	Y+19, r24	; 0x13
    2e7e:	0f c0       	rjmp	.+30     	; 0x2e9e <LCD_displayCharacter+0x2ac>
    2e80:	89 e1       	ldi	r24, 0x19	; 25
    2e82:	90 e0       	ldi	r25, 0x00	; 0
    2e84:	9a 8b       	std	Y+18, r25	; 0x12
    2e86:	89 8b       	std	Y+17, r24	; 0x11
    2e88:	89 89       	ldd	r24, Y+17	; 0x11
    2e8a:	9a 89       	ldd	r25, Y+18	; 0x12
    2e8c:	01 97       	sbiw	r24, 0x01	; 1
    2e8e:	f1 f7       	brne	.-4      	; 0x2e8c <LCD_displayCharacter+0x29a>
    2e90:	9a 8b       	std	Y+18, r25	; 0x12
    2e92:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e94:	8b 89       	ldd	r24, Y+19	; 0x13
    2e96:	9c 89       	ldd	r25, Y+20	; 0x14
    2e98:	01 97       	sbiw	r24, 0x01	; 1
    2e9a:	9c 8b       	std	Y+20, r25	; 0x14
    2e9c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e9e:	8b 89       	ldd	r24, Y+19	; 0x13
    2ea0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ea2:	00 97       	sbiw	r24, 0x00	; 0
    2ea4:	69 f7       	brne	.-38     	; 0x2e80 <LCD_displayCharacter+0x28e>
    2ea6:	14 c0       	rjmp	.+40     	; 0x2ed0 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ea8:	6d 89       	ldd	r22, Y+21	; 0x15
    2eaa:	7e 89       	ldd	r23, Y+22	; 0x16
    2eac:	8f 89       	ldd	r24, Y+23	; 0x17
    2eae:	98 8d       	ldd	r25, Y+24	; 0x18
    2eb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eb4:	dc 01       	movw	r26, r24
    2eb6:	cb 01       	movw	r24, r22
    2eb8:	9c 8b       	std	Y+20, r25	; 0x14
    2eba:	8b 8b       	std	Y+19, r24	; 0x13
    2ebc:	8b 89       	ldd	r24, Y+19	; 0x13
    2ebe:	9c 89       	ldd	r25, Y+20	; 0x14
    2ec0:	98 8b       	std	Y+16, r25	; 0x10
    2ec2:	8f 87       	std	Y+15, r24	; 0x0f
    2ec4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ec6:	98 89       	ldd	r25, Y+16	; 0x10
    2ec8:	01 97       	sbiw	r24, 0x01	; 1
    2eca:	f1 f7       	brne	.-4      	; 0x2ec8 <LCD_displayCharacter+0x2d6>
    2ecc:	98 8b       	std	Y+16, r25	; 0x10
    2ece:	8f 87       	std	Y+15, r24	; 0x0f

#endif

	_delay_ms(1);    /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2ed0:	83 e0       	ldi	r24, 0x03	; 3
    2ed2:	66 e0       	ldi	r22, 0x06	; 6
    2ed4:	40 e0       	ldi	r20, 0x00	; 0
    2ed6:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <GPIO_writePin>
    2eda:	80 e0       	ldi	r24, 0x00	; 0
    2edc:	90 e0       	ldi	r25, 0x00	; 0
    2ede:	a0 e8       	ldi	r26, 0x80	; 128
    2ee0:	bf e3       	ldi	r27, 0x3F	; 63
    2ee2:	8b 87       	std	Y+11, r24	; 0x0b
    2ee4:	9c 87       	std	Y+12, r25	; 0x0c
    2ee6:	ad 87       	std	Y+13, r26	; 0x0d
    2ee8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2eea:	6b 85       	ldd	r22, Y+11	; 0x0b
    2eec:	7c 85       	ldd	r23, Y+12	; 0x0c
    2eee:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ef0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ef2:	20 e0       	ldi	r18, 0x00	; 0
    2ef4:	30 e0       	ldi	r19, 0x00	; 0
    2ef6:	4a e7       	ldi	r20, 0x7A	; 122
    2ef8:	53 e4       	ldi	r21, 0x43	; 67
    2efa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2efe:	dc 01       	movw	r26, r24
    2f00:	cb 01       	movw	r24, r22
    2f02:	8f 83       	std	Y+7, r24	; 0x07
    2f04:	98 87       	std	Y+8, r25	; 0x08
    2f06:	a9 87       	std	Y+9, r26	; 0x09
    2f08:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f0a:	6f 81       	ldd	r22, Y+7	; 0x07
    2f0c:	78 85       	ldd	r23, Y+8	; 0x08
    2f0e:	89 85       	ldd	r24, Y+9	; 0x09
    2f10:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f12:	20 e0       	ldi	r18, 0x00	; 0
    2f14:	30 e0       	ldi	r19, 0x00	; 0
    2f16:	40 e8       	ldi	r20, 0x80	; 128
    2f18:	5f e3       	ldi	r21, 0x3F	; 63
    2f1a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f1e:	88 23       	and	r24, r24
    2f20:	2c f4       	brge	.+10     	; 0x2f2c <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2f22:	81 e0       	ldi	r24, 0x01	; 1
    2f24:	90 e0       	ldi	r25, 0x00	; 0
    2f26:	9e 83       	std	Y+6, r25	; 0x06
    2f28:	8d 83       	std	Y+5, r24	; 0x05
    2f2a:	3f c0       	rjmp	.+126    	; 0x2faa <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2f2c:	6f 81       	ldd	r22, Y+7	; 0x07
    2f2e:	78 85       	ldd	r23, Y+8	; 0x08
    2f30:	89 85       	ldd	r24, Y+9	; 0x09
    2f32:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f34:	20 e0       	ldi	r18, 0x00	; 0
    2f36:	3f ef       	ldi	r19, 0xFF	; 255
    2f38:	4f e7       	ldi	r20, 0x7F	; 127
    2f3a:	57 e4       	ldi	r21, 0x47	; 71
    2f3c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f40:	18 16       	cp	r1, r24
    2f42:	4c f5       	brge	.+82     	; 0x2f96 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f44:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f46:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f48:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f4c:	20 e0       	ldi	r18, 0x00	; 0
    2f4e:	30 e0       	ldi	r19, 0x00	; 0
    2f50:	40 e2       	ldi	r20, 0x20	; 32
    2f52:	51 e4       	ldi	r21, 0x41	; 65
    2f54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f58:	dc 01       	movw	r26, r24
    2f5a:	cb 01       	movw	r24, r22
    2f5c:	bc 01       	movw	r22, r24
    2f5e:	cd 01       	movw	r24, r26
    2f60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f64:	dc 01       	movw	r26, r24
    2f66:	cb 01       	movw	r24, r22
    2f68:	9e 83       	std	Y+6, r25	; 0x06
    2f6a:	8d 83       	std	Y+5, r24	; 0x05
    2f6c:	0f c0       	rjmp	.+30     	; 0x2f8c <LCD_displayCharacter+0x39a>
    2f6e:	89 e1       	ldi	r24, 0x19	; 25
    2f70:	90 e0       	ldi	r25, 0x00	; 0
    2f72:	9c 83       	std	Y+4, r25	; 0x04
    2f74:	8b 83       	std	Y+3, r24	; 0x03
    2f76:	8b 81       	ldd	r24, Y+3	; 0x03
    2f78:	9c 81       	ldd	r25, Y+4	; 0x04
    2f7a:	01 97       	sbiw	r24, 0x01	; 1
    2f7c:	f1 f7       	brne	.-4      	; 0x2f7a <LCD_displayCharacter+0x388>
    2f7e:	9c 83       	std	Y+4, r25	; 0x04
    2f80:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f82:	8d 81       	ldd	r24, Y+5	; 0x05
    2f84:	9e 81       	ldd	r25, Y+6	; 0x06
    2f86:	01 97       	sbiw	r24, 0x01	; 1
    2f88:	9e 83       	std	Y+6, r25	; 0x06
    2f8a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f8c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f8e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f90:	00 97       	sbiw	r24, 0x00	; 0
    2f92:	69 f7       	brne	.-38     	; 0x2f6e <LCD_displayCharacter+0x37c>
    2f94:	14 c0       	rjmp	.+40     	; 0x2fbe <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f96:	6f 81       	ldd	r22, Y+7	; 0x07
    2f98:	78 85       	ldd	r23, Y+8	; 0x08
    2f9a:	89 85       	ldd	r24, Y+9	; 0x09
    2f9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fa2:	dc 01       	movw	r26, r24
    2fa4:	cb 01       	movw	r24, r22
    2fa6:	9e 83       	std	Y+6, r25	; 0x06
    2fa8:	8d 83       	std	Y+5, r24	; 0x05
    2faa:	8d 81       	ldd	r24, Y+5	; 0x05
    2fac:	9e 81       	ldd	r25, Y+6	; 0x06
    2fae:	9a 83       	std	Y+2, r25	; 0x02
    2fb0:	89 83       	std	Y+1, r24	; 0x01
    2fb2:	89 81       	ldd	r24, Y+1	; 0x01
    2fb4:	9a 81       	ldd	r25, Y+2	; 0x02
    2fb6:	01 97       	sbiw	r24, 0x01	; 1
    2fb8:	f1 f7       	brne	.-4      	; 0x2fb6 <LCD_displayCharacter+0x3c4>
    2fba:	9a 83       	std	Y+2, r25	; 0x02
    2fbc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);    /* delay for processing Th = 13ns */
}
    2fbe:	e9 96       	adiw	r28, 0x39	; 57
    2fc0:	0f b6       	in	r0, 0x3f	; 63
    2fc2:	f8 94       	cli
    2fc4:	de bf       	out	0x3e, r29	; 62
    2fc6:	0f be       	out	0x3f, r0	; 63
    2fc8:	cd bf       	out	0x3d, r28	; 61
    2fca:	cf 91       	pop	r28
    2fcc:	df 91       	pop	r29
    2fce:	08 95       	ret

00002fd0 <LCD_displayString>:
/*
 * Description:
 * Display the required String on the LCD screen.
 */
void LCD_displayString(const sint8 *a_str)
{
    2fd0:	df 93       	push	r29
    2fd2:	cf 93       	push	r28
    2fd4:	00 d0       	rcall	.+0      	; 0x2fd6 <LCD_displayString+0x6>
    2fd6:	cd b7       	in	r28, 0x3d	; 61
    2fd8:	de b7       	in	r29, 0x3e	; 62
    2fda:	9a 83       	std	Y+2, r25	; 0x02
    2fdc:	89 83       	std	Y+1, r24	; 0x01
    2fde:	0a c0       	rjmp	.+20     	; 0x2ff4 <LCD_displayString+0x24>
	/*loop on the string until the end (Null character)*/
	while((*a_str) != '\0')
	{
		/*Display character by character*/
		LCD_displayCharacter(*a_str);
    2fe0:	e9 81       	ldd	r30, Y+1	; 0x01
    2fe2:	fa 81       	ldd	r31, Y+2	; 0x02
    2fe4:	80 81       	ld	r24, Z
    2fe6:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <LCD_displayCharacter>
		a_str++;
    2fea:	89 81       	ldd	r24, Y+1	; 0x01
    2fec:	9a 81       	ldd	r25, Y+2	; 0x02
    2fee:	01 96       	adiw	r24, 0x01	; 1
    2ff0:	9a 83       	std	Y+2, r25	; 0x02
    2ff2:	89 83       	std	Y+1, r24	; 0x01
 * Display the required String on the LCD screen.
 */
void LCD_displayString(const sint8 *a_str)
{
	/*loop on the string until the end (Null character)*/
	while((*a_str) != '\0')
    2ff4:	e9 81       	ldd	r30, Y+1	; 0x01
    2ff6:	fa 81       	ldd	r31, Y+2	; 0x02
    2ff8:	80 81       	ld	r24, Z
    2ffa:	88 23       	and	r24, r24
    2ffc:	89 f7       	brne	.-30     	; 0x2fe0 <LCD_displayString+0x10>
	{
		/*Display character by character*/
		LCD_displayCharacter(*a_str);
		a_str++;
	}
}
    2ffe:	0f 90       	pop	r0
    3000:	0f 90       	pop	r0
    3002:	cf 91       	pop	r28
    3004:	df 91       	pop	r29
    3006:	08 95       	ret

00003008 <LCD_moveCursor>:
/*
 * Description:
 * Move the cursor to a specific row and column index on the screen.
 */
void LCD_moveCursor(uint8 a_row,uint8 a_col)
{
    3008:	df 93       	push	r29
    300a:	cf 93       	push	r28
    300c:	00 d0       	rcall	.+0      	; 0x300e <LCD_moveCursor+0x6>
    300e:	00 d0       	rcall	.+0      	; 0x3010 <LCD_moveCursor+0x8>
    3010:	0f 92       	push	r0
    3012:	cd b7       	in	r28, 0x3d	; 61
    3014:	de b7       	in	r29, 0x3e	; 62
    3016:	8a 83       	std	Y+2, r24	; 0x02
    3018:	6b 83       	std	Y+3, r22	; 0x03
	uint8 memoryAddress;

	/*Calculate the required address in the LCD DDRAM*/
	switch(a_row)
    301a:	8a 81       	ldd	r24, Y+2	; 0x02
    301c:	28 2f       	mov	r18, r24
    301e:	30 e0       	ldi	r19, 0x00	; 0
    3020:	3d 83       	std	Y+5, r19	; 0x05
    3022:	2c 83       	std	Y+4, r18	; 0x04
    3024:	8c 81       	ldd	r24, Y+4	; 0x04
    3026:	9d 81       	ldd	r25, Y+5	; 0x05
    3028:	81 30       	cpi	r24, 0x01	; 1
    302a:	91 05       	cpc	r25, r1
    302c:	c1 f0       	breq	.+48     	; 0x305e <LCD_moveCursor+0x56>
    302e:	2c 81       	ldd	r18, Y+4	; 0x04
    3030:	3d 81       	ldd	r19, Y+5	; 0x05
    3032:	22 30       	cpi	r18, 0x02	; 2
    3034:	31 05       	cpc	r19, r1
    3036:	2c f4       	brge	.+10     	; 0x3042 <LCD_moveCursor+0x3a>
    3038:	8c 81       	ldd	r24, Y+4	; 0x04
    303a:	9d 81       	ldd	r25, Y+5	; 0x05
    303c:	00 97       	sbiw	r24, 0x00	; 0
    303e:	61 f0       	breq	.+24     	; 0x3058 <LCD_moveCursor+0x50>
    3040:	19 c0       	rjmp	.+50     	; 0x3074 <LCD_moveCursor+0x6c>
    3042:	2c 81       	ldd	r18, Y+4	; 0x04
    3044:	3d 81       	ldd	r19, Y+5	; 0x05
    3046:	22 30       	cpi	r18, 0x02	; 2
    3048:	31 05       	cpc	r19, r1
    304a:	69 f0       	breq	.+26     	; 0x3066 <LCD_moveCursor+0x5e>
    304c:	8c 81       	ldd	r24, Y+4	; 0x04
    304e:	9d 81       	ldd	r25, Y+5	; 0x05
    3050:	84 30       	cpi	r24, 0x04	; 4
    3052:	91 05       	cpc	r25, r1
    3054:	61 f0       	breq	.+24     	; 0x306e <LCD_moveCursor+0x66>
    3056:	0e c0       	rjmp	.+28     	; 0x3074 <LCD_moveCursor+0x6c>
	{
	case 0:
		memoryAddress = a_col;
    3058:	8b 81       	ldd	r24, Y+3	; 0x03
    305a:	89 83       	std	Y+1, r24	; 0x01
    305c:	0b c0       	rjmp	.+22     	; 0x3074 <LCD_moveCursor+0x6c>
		break;

	case 1:
		memoryAddress = a_col+0x40;
    305e:	8b 81       	ldd	r24, Y+3	; 0x03
    3060:	80 5c       	subi	r24, 0xC0	; 192
    3062:	89 83       	std	Y+1, r24	; 0x01
    3064:	07 c0       	rjmp	.+14     	; 0x3074 <LCD_moveCursor+0x6c>
		break;

	case 2:
		memoryAddress = a_col+0x10;
    3066:	8b 81       	ldd	r24, Y+3	; 0x03
    3068:	80 5f       	subi	r24, 0xF0	; 240
    306a:	89 83       	std	Y+1, r24	; 0x01
    306c:	03 c0       	rjmp	.+6      	; 0x3074 <LCD_moveCursor+0x6c>
		break;

	case 4:
		memoryAddress = a_col+0x50;
    306e:	8b 81       	ldd	r24, Y+3	; 0x03
    3070:	80 5b       	subi	r24, 0xB0	; 176
    3072:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/*Move the cursor to the required address*/
	LCD_sendCommand(memoryAddress | LCD_SET_CURSOR_LOCATION);
    3074:	89 81       	ldd	r24, Y+1	; 0x01
    3076:	80 68       	ori	r24, 0x80	; 128
    3078:	0e 94 0a 14 	call	0x2814	; 0x2814 <LCD_sendCommand>
}
    307c:	0f 90       	pop	r0
    307e:	0f 90       	pop	r0
    3080:	0f 90       	pop	r0
    3082:	0f 90       	pop	r0
    3084:	0f 90       	pop	r0
    3086:	cf 91       	pop	r28
    3088:	df 91       	pop	r29
    308a:	08 95       	ret

0000308c <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen.
 */
void LCD_displayStringRowColumn(uint8 a_row,uint8 a_col,const sint8 *a_str)
{
    308c:	df 93       	push	r29
    308e:	cf 93       	push	r28
    3090:	00 d0       	rcall	.+0      	; 0x3092 <LCD_displayStringRowColumn+0x6>
    3092:	00 d0       	rcall	.+0      	; 0x3094 <LCD_displayStringRowColumn+0x8>
    3094:	cd b7       	in	r28, 0x3d	; 61
    3096:	de b7       	in	r29, 0x3e	; 62
    3098:	89 83       	std	Y+1, r24	; 0x01
    309a:	6a 83       	std	Y+2, r22	; 0x02
    309c:	5c 83       	std	Y+4, r21	; 0x04
    309e:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(a_row,a_col);  /*Move the cursor to the required location*/
    30a0:	89 81       	ldd	r24, Y+1	; 0x01
    30a2:	6a 81       	ldd	r22, Y+2	; 0x02
    30a4:	0e 94 04 18 	call	0x3008	; 0x3008 <LCD_moveCursor>
	LCD_displayString(a_str);     /*Display the required string*/
    30a8:	8b 81       	ldd	r24, Y+3	; 0x03
    30aa:	9c 81       	ldd	r25, Y+4	; 0x04
    30ac:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_displayString>
}
    30b0:	0f 90       	pop	r0
    30b2:	0f 90       	pop	r0
    30b4:	0f 90       	pop	r0
    30b6:	0f 90       	pop	r0
    30b8:	cf 91       	pop	r28
    30ba:	df 91       	pop	r29
    30bc:	08 95       	ret

000030be <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int a_data)
{
    30be:	df 93       	push	r29
    30c0:	cf 93       	push	r28
    30c2:	cd b7       	in	r28, 0x3d	; 61
    30c4:	de b7       	in	r29, 0x3e	; 62
    30c6:	c2 54       	subi	r28, 0x42	; 66
    30c8:	d0 40       	sbci	r29, 0x00	; 0
    30ca:	0f b6       	in	r0, 0x3f	; 63
    30cc:	f8 94       	cli
    30ce:	de bf       	out	0x3e, r29	; 62
    30d0:	0f be       	out	0x3f, r0	; 63
    30d2:	cd bf       	out	0x3d, r28	; 61
    30d4:	fe 01       	movw	r30, r28
    30d6:	ef 5b       	subi	r30, 0xBF	; 191
    30d8:	ff 4f       	sbci	r31, 0xFF	; 255
    30da:	91 83       	std	Z+1, r25	; 0x01
    30dc:	80 83       	st	Z, r24
	sint32 buff[16];  /*String to hold the ASCII result*/
	itoa(a_data,buff,10); /*C function to convert the decimal numbers to its ASCII value (10 for decimal base)*/
    30de:	fe 01       	movw	r30, r28
    30e0:	ef 5b       	subi	r30, 0xBF	; 191
    30e2:	ff 4f       	sbci	r31, 0xFF	; 255
    30e4:	80 81       	ld	r24, Z
    30e6:	91 81       	ldd	r25, Z+1	; 0x01
    30e8:	9e 01       	movw	r18, r28
    30ea:	2f 5f       	subi	r18, 0xFF	; 255
    30ec:	3f 4f       	sbci	r19, 0xFF	; 255
    30ee:	b9 01       	movw	r22, r18
    30f0:	4a e0       	ldi	r20, 0x0A	; 10
    30f2:	50 e0       	ldi	r21, 0x00	; 0
    30f4:	0e 94 0e 1b 	call	0x361c	; 0x361c <itoa>
	LCD_displayString(buff);
    30f8:	ce 01       	movw	r24, r28
    30fa:	01 96       	adiw	r24, 0x01	; 1
    30fc:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LCD_displayString>
}
    3100:	ce 5b       	subi	r28, 0xBE	; 190
    3102:	df 4f       	sbci	r29, 0xFF	; 255
    3104:	0f b6       	in	r0, 0x3f	; 63
    3106:	f8 94       	cli
    3108:	de bf       	out	0x3e, r29	; 62
    310a:	0f be       	out	0x3f, r0	; 63
    310c:	cd bf       	out	0x3d, r28	; 61
    310e:	cf 91       	pop	r28
    3110:	df 91       	pop	r29
    3112:	08 95       	ret

00003114 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    3114:	df 93       	push	r29
    3116:	cf 93       	push	r28
    3118:	cd b7       	in	r28, 0x3d	; 61
    311a:	de b7       	in	r29, 0x3e	; 62
	/* Send clear display command */
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    311c:	81 e0       	ldi	r24, 0x01	; 1
    311e:	0e 94 0a 14 	call	0x2814	; 0x2814 <LCD_sendCommand>
}
    3122:	cf 91       	pop	r28
    3124:	df 91       	pop	r29
    3126:	08 95       	ret

00003128 <__vector_9>:
/*************************************************************************************************
                              Interrupt Service Routines
 *************************************************************************************************/
/*ISR of Timer1 overflow mode*/
ISR(TIMER1_OVF_vect)
{
    3128:	1f 92       	push	r1
    312a:	0f 92       	push	r0
    312c:	0f b6       	in	r0, 0x3f	; 63
    312e:	0f 92       	push	r0
    3130:	11 24       	eor	r1, r1
    3132:	2f 93       	push	r18
    3134:	3f 93       	push	r19
    3136:	4f 93       	push	r20
    3138:	5f 93       	push	r21
    313a:	6f 93       	push	r22
    313c:	7f 93       	push	r23
    313e:	8f 93       	push	r24
    3140:	9f 93       	push	r25
    3142:	af 93       	push	r26
    3144:	bf 93       	push	r27
    3146:	ef 93       	push	r30
    3148:	ff 93       	push	r31
    314a:	df 93       	push	r29
    314c:	cf 93       	push	r28
    314e:	cd b7       	in	r28, 0x3d	; 61
    3150:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    3152:	80 91 30 01 	lds	r24, 0x0130
    3156:	90 91 31 01 	lds	r25, 0x0131
    315a:	00 97       	sbiw	r24, 0x00	; 0
    315c:	29 f0       	breq	.+10     	; 0x3168 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application using pointer to function*/
		(*g_callBackPtr)();
    315e:	e0 91 30 01 	lds	r30, 0x0130
    3162:	f0 91 31 01 	lds	r31, 0x0131
    3166:	09 95       	icall
	}
}
    3168:	cf 91       	pop	r28
    316a:	df 91       	pop	r29
    316c:	ff 91       	pop	r31
    316e:	ef 91       	pop	r30
    3170:	bf 91       	pop	r27
    3172:	af 91       	pop	r26
    3174:	9f 91       	pop	r25
    3176:	8f 91       	pop	r24
    3178:	7f 91       	pop	r23
    317a:	6f 91       	pop	r22
    317c:	5f 91       	pop	r21
    317e:	4f 91       	pop	r20
    3180:	3f 91       	pop	r19
    3182:	2f 91       	pop	r18
    3184:	0f 90       	pop	r0
    3186:	0f be       	out	0x3f, r0	; 63
    3188:	0f 90       	pop	r0
    318a:	1f 90       	pop	r1
    318c:	18 95       	reti

0000318e <__vector_7>:


/*ISR of Timer1 compare mode of channel A*/
ISR(TIMER1_COMPA_vect)
{
    318e:	1f 92       	push	r1
    3190:	0f 92       	push	r0
    3192:	0f b6       	in	r0, 0x3f	; 63
    3194:	0f 92       	push	r0
    3196:	11 24       	eor	r1, r1
    3198:	2f 93       	push	r18
    319a:	3f 93       	push	r19
    319c:	4f 93       	push	r20
    319e:	5f 93       	push	r21
    31a0:	6f 93       	push	r22
    31a2:	7f 93       	push	r23
    31a4:	8f 93       	push	r24
    31a6:	9f 93       	push	r25
    31a8:	af 93       	push	r26
    31aa:	bf 93       	push	r27
    31ac:	ef 93       	push	r30
    31ae:	ff 93       	push	r31
    31b0:	df 93       	push	r29
    31b2:	cf 93       	push	r28
    31b4:	cd b7       	in	r28, 0x3d	; 61
    31b6:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    31b8:	80 91 30 01 	lds	r24, 0x0130
    31bc:	90 91 31 01 	lds	r25, 0x0131
    31c0:	00 97       	sbiw	r24, 0x00	; 0
    31c2:	29 f0       	breq	.+10     	; 0x31ce <__vector_7+0x40>
	{
		/* Call the Call Back function in the application using pointer to function*/
		(*g_callBackPtr)();
    31c4:	e0 91 30 01 	lds	r30, 0x0130
    31c8:	f0 91 31 01 	lds	r31, 0x0131
    31cc:	09 95       	icall
	}
}
    31ce:	cf 91       	pop	r28
    31d0:	df 91       	pop	r29
    31d2:	ff 91       	pop	r31
    31d4:	ef 91       	pop	r30
    31d6:	bf 91       	pop	r27
    31d8:	af 91       	pop	r26
    31da:	9f 91       	pop	r25
    31dc:	8f 91       	pop	r24
    31de:	7f 91       	pop	r23
    31e0:	6f 91       	pop	r22
    31e2:	5f 91       	pop	r21
    31e4:	4f 91       	pop	r20
    31e6:	3f 91       	pop	r19
    31e8:	2f 91       	pop	r18
    31ea:	0f 90       	pop	r0
    31ec:	0f be       	out	0x3f, r0	; 63
    31ee:	0f 90       	pop	r0
    31f0:	1f 90       	pop	r1
    31f2:	18 95       	reti

000031f4 <TIMER1_init>:
/*
 * Description:
 * Function to initialize the Timer driver
 */
void TIMER1_init(const Timer1_ConfigType * Config_Ptr)
{
    31f4:	df 93       	push	r29
    31f6:	cf 93       	push	r28
    31f8:	00 d0       	rcall	.+0      	; 0x31fa <TIMER1_init+0x6>
    31fa:	cd b7       	in	r28, 0x3d	; 61
    31fc:	de b7       	in	r29, 0x3e	; 62
    31fe:	9a 83       	std	Y+2, r25	; 0x02
    3200:	89 83       	std	Y+1, r24	; 0x01
	TCCR1A = (1<<FOC1A);
    3202:	ef e4       	ldi	r30, 0x4F	; 79
    3204:	f0 e0       	ldi	r31, 0x00	; 0
    3206:	88 e0       	ldi	r24, 0x08	; 8
    3208:	80 83       	st	Z, r24

	/* put initial value of timer1 in TCNT1 */
	TCNT1 = Config_Ptr->initial_value;
    320a:	ac e4       	ldi	r26, 0x4C	; 76
    320c:	b0 e0       	ldi	r27, 0x00	; 0
    320e:	e9 81       	ldd	r30, Y+1	; 0x01
    3210:	fa 81       	ldd	r31, Y+2	; 0x02
    3212:	80 81       	ld	r24, Z
    3214:	91 81       	ldd	r25, Z+1	; 0x01
    3216:	11 96       	adiw	r26, 0x01	; 1
    3218:	9c 93       	st	X, r25
    321a:	8e 93       	st	-X, r24

	/* Insert first two bits of Timer1_Mode in first two bits in TCCR1A */
	TCCR1A = ( TCCR1A & 0xFC ) | ( Config_Ptr->mode & 0x03);
    321c:	af e4       	ldi	r26, 0x4F	; 79
    321e:	b0 e0       	ldi	r27, 0x00	; 0
    3220:	ef e4       	ldi	r30, 0x4F	; 79
    3222:	f0 e0       	ldi	r31, 0x00	; 0
    3224:	80 81       	ld	r24, Z
    3226:	98 2f       	mov	r25, r24
    3228:	9c 7f       	andi	r25, 0xFC	; 252
    322a:	e9 81       	ldd	r30, Y+1	; 0x01
    322c:	fa 81       	ldd	r31, Y+2	; 0x02
    322e:	85 81       	ldd	r24, Z+5	; 0x05
    3230:	83 70       	andi	r24, 0x03	; 3
    3232:	89 2b       	or	r24, r25
    3234:	8c 93       	st	X, r24

	/*Insert bit-3 and bit-2 of Timer1_Mode in bit-4 and bit-3 bit in TCCR1B */
	TCCR1A = (TCCR1A & 0xE7) | ( (Config_Ptr->mode & 0x0C) <<1);
    3236:	af e4       	ldi	r26, 0x4F	; 79
    3238:	b0 e0       	ldi	r27, 0x00	; 0
    323a:	ef e4       	ldi	r30, 0x4F	; 79
    323c:	f0 e0       	ldi	r31, 0x00	; 0
    323e:	80 81       	ld	r24, Z
    3240:	28 2f       	mov	r18, r24
    3242:	27 7e       	andi	r18, 0xE7	; 231
    3244:	e9 81       	ldd	r30, Y+1	; 0x01
    3246:	fa 81       	ldd	r31, Y+2	; 0x02
    3248:	85 81       	ldd	r24, Z+5	; 0x05
    324a:	88 2f       	mov	r24, r24
    324c:	90 e0       	ldi	r25, 0x00	; 0
    324e:	8c 70       	andi	r24, 0x0C	; 12
    3250:	90 70       	andi	r25, 0x00	; 0
    3252:	88 0f       	add	r24, r24
    3254:	99 1f       	adc	r25, r25
    3256:	82 2b       	or	r24, r18
    3258:	8c 93       	st	X, r24

	/*Insert timer1_prescalar value in first three bits of TCCR1A */
	TCCR1B = (TCCR1B & 0XF8) | ( Config_Ptr->prescaler & 0x07);
    325a:	ae e4       	ldi	r26, 0x4E	; 78
    325c:	b0 e0       	ldi	r27, 0x00	; 0
    325e:	ee e4       	ldi	r30, 0x4E	; 78
    3260:	f0 e0       	ldi	r31, 0x00	; 0
    3262:	80 81       	ld	r24, Z
    3264:	98 2f       	mov	r25, r24
    3266:	98 7f       	andi	r25, 0xF8	; 248
    3268:	e9 81       	ldd	r30, Y+1	; 0x01
    326a:	fa 81       	ldd	r31, Y+2	; 0x02
    326c:	84 81       	ldd	r24, Z+4	; 0x04
    326e:	87 70       	andi	r24, 0x07	; 7
    3270:	89 2b       	or	r24, r25
    3272:	8c 93       	st	X, r24

	/*
	 * put compare value of timer1 in OCR1A and enable OCIE1A for compare match
	 * interrupt, when working in CTC mode
	 */
	if(Config_Ptr->mode == COMPARE_MODE)
    3274:	e9 81       	ldd	r30, Y+1	; 0x01
    3276:	fa 81       	ldd	r31, Y+2	; 0x02
    3278:	85 81       	ldd	r24, Z+5	; 0x05
    327a:	81 30       	cpi	r24, 0x01	; 1
    327c:	89 f4       	brne	.+34     	; 0x32a0 <TIMER1_init+0xac>
	{
		OCR1A = Config_Ptr->compare_value;
    327e:	aa e4       	ldi	r26, 0x4A	; 74
    3280:	b0 e0       	ldi	r27, 0x00	; 0
    3282:	e9 81       	ldd	r30, Y+1	; 0x01
    3284:	fa 81       	ldd	r31, Y+2	; 0x02
    3286:	82 81       	ldd	r24, Z+2	; 0x02
    3288:	93 81       	ldd	r25, Z+3	; 0x03
    328a:	11 96       	adiw	r26, 0x01	; 1
    328c:	9c 93       	st	X, r25
    328e:	8e 93       	st	-X, r24

		SET_BIT (TIMSK, OCIE1A);
    3290:	a9 e5       	ldi	r26, 0x59	; 89
    3292:	b0 e0       	ldi	r27, 0x00	; 0
    3294:	e9 e5       	ldi	r30, 0x59	; 89
    3296:	f0 e0       	ldi	r31, 0x00	; 0
    3298:	80 81       	ld	r24, Z
    329a:	80 61       	ori	r24, 0x10	; 16
    329c:	8c 93       	st	X, r24
    329e:	0c c0       	rjmp	.+24     	; 0x32b8 <TIMER1_init+0xc4>
	}
	else if(Config_Ptr->mode == OVERFLOW_MODE)
    32a0:	e9 81       	ldd	r30, Y+1	; 0x01
    32a2:	fa 81       	ldd	r31, Y+2	; 0x02
    32a4:	85 81       	ldd	r24, Z+5	; 0x05
    32a6:	88 23       	and	r24, r24
    32a8:	39 f4       	brne	.+14     	; 0x32b8 <TIMER1_init+0xc4>
	{
		/* Enable overflow interrupt enable when working in normal mode */
		SET_BIT(TIMSK, TOIE1);
    32aa:	a9 e5       	ldi	r26, 0x59	; 89
    32ac:	b0 e0       	ldi	r27, 0x00	; 0
    32ae:	e9 e5       	ldi	r30, 0x59	; 89
    32b0:	f0 e0       	ldi	r31, 0x00	; 0
    32b2:	80 81       	ld	r24, Z
    32b4:	84 60       	ori	r24, 0x04	; 4
    32b6:	8c 93       	st	X, r24
	}
	else
	{
		/*Do Nothing */
	}
}
    32b8:	0f 90       	pop	r0
    32ba:	0f 90       	pop	r0
    32bc:	cf 91       	pop	r28
    32be:	df 91       	pop	r29
    32c0:	08 95       	ret

000032c2 <TIMER1_deInit>:
/*
 * Description:
 * Function to disable the Timer.
 */
void TIMER1_deInit(void)
{
    32c2:	df 93       	push	r29
    32c4:	cf 93       	push	r28
    32c6:	cd b7       	in	r28, 0x3d	; 61
    32c8:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR1A = 0;
    32ca:	ef e4       	ldi	r30, 0x4F	; 79
    32cc:	f0 e0       	ldi	r31, 0x00	; 0
    32ce:	10 82       	st	Z, r1
	TCCR1B = 0;
    32d0:	ee e4       	ldi	r30, 0x4E	; 78
    32d2:	f0 e0       	ldi	r31, 0x00	; 0
    32d4:	10 82       	st	Z, r1
	TCNT1  = 0;
    32d6:	ec e4       	ldi	r30, 0x4C	; 76
    32d8:	f0 e0       	ldi	r31, 0x00	; 0
    32da:	11 82       	std	Z+1, r1	; 0x01
    32dc:	10 82       	st	Z, r1
	OCR1A  = 0;
    32de:	ea e4       	ldi	r30, 0x4A	; 74
    32e0:	f0 e0       	ldi	r31, 0x00	; 0
    32e2:	11 82       	std	Z+1, r1	; 0x01
    32e4:	10 82       	st	Z, r1
	TIMSK &= 0xC3;  /*Disable Timer1 interrupts*/
    32e6:	a9 e5       	ldi	r26, 0x59	; 89
    32e8:	b0 e0       	ldi	r27, 0x00	; 0
    32ea:	e9 e5       	ldi	r30, 0x59	; 89
    32ec:	f0 e0       	ldi	r31, 0x00	; 0
    32ee:	80 81       	ld	r24, Z
    32f0:	83 7c       	andi	r24, 0xC3	; 195
    32f2:	8c 93       	st	X, r24
}
    32f4:	cf 91       	pop	r28
    32f6:	df 91       	pop	r29
    32f8:	08 95       	ret

000032fa <TIMER1_setCalleBack>:
/*
 * Description:
 * Function to set the Call Back function address.
 */
void TIMER1_setCalleBack(void(*a_ptr)(void))
{
    32fa:	df 93       	push	r29
    32fc:	cf 93       	push	r28
    32fe:	00 d0       	rcall	.+0      	; 0x3300 <TIMER1_setCalleBack+0x6>
    3300:	cd b7       	in	r28, 0x3d	; 61
    3302:	de b7       	in	r29, 0x3e	; 62
    3304:	9a 83       	std	Y+2, r25	; 0x02
    3306:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    3308:	89 81       	ldd	r24, Y+1	; 0x01
    330a:	9a 81       	ldd	r25, Y+2	; 0x02
    330c:	90 93 31 01 	sts	0x0131, r25
    3310:	80 93 30 01 	sts	0x0130, r24
}
    3314:	0f 90       	pop	r0
    3316:	0f 90       	pop	r0
    3318:	cf 91       	pop	r28
    331a:	df 91       	pop	r29
    331c:	08 95       	ret

0000331e <UART_init>:
 * 1.Setup the frame format (number of data bits, parity bit, number of stop bit).
 * 2.Enable the UART.
 * 3.Setup the baud rate
 */
void UART_init(const Uart_ConfigType* Config_Ptr)
{
    331e:	df 93       	push	r29
    3320:	cf 93       	push	r28
    3322:	00 d0       	rcall	.+0      	; 0x3324 <UART_init+0x6>
    3324:	00 d0       	rcall	.+0      	; 0x3326 <UART_init+0x8>
    3326:	cd b7       	in	r28, 0x3d	; 61
    3328:	de b7       	in	r29, 0x3e	; 62
    332a:	9c 83       	std	Y+4, r25	; 0x04
    332c:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrrValue = 0;  /*To store the value of UART baud rate register*/
    332e:	1a 82       	std	Y+2, r1	; 0x02
    3330:	19 82       	std	Y+1, r1	; 0x01

	/*U2X = 1 for double transmission speed mode*/
	UCSRA = (1<<U2X);
    3332:	eb e2       	ldi	r30, 0x2B	; 43
    3334:	f0 e0       	ldi	r31, 0x00	; 0
    3336:	82 e0       	ldi	r24, 0x02	; 2
    3338:	80 83       	st	Z, r24
	 * RXEN  = 1 receiver enable.
	 * TXEN  = 1 transmitter enable.
	 * Setup the UCSZ2 bit for data bit mode.
	 * RXB8 & TXB8 not used for 8-bit data mode.
	 ***************************************************************************/
	UCSRB = (1<<RXEN) | (1<< TXEN);
    333a:	ea e2       	ldi	r30, 0x2A	; 42
    333c:	f0 e0       	ldi	r31, 0x00	; 0
    333e:	88 e1       	ldi	r24, 0x18	; 24
    3340:	80 83       	st	Z, r24

	UCSRB = (UCSRB & 0xFB) | (Config_Ptr->bit_data & 0x04);
    3342:	aa e2       	ldi	r26, 0x2A	; 42
    3344:	b0 e0       	ldi	r27, 0x00	; 0
    3346:	ea e2       	ldi	r30, 0x2A	; 42
    3348:	f0 e0       	ldi	r31, 0x00	; 0
    334a:	80 81       	ld	r24, Z
    334c:	98 2f       	mov	r25, r24
    334e:	9b 7f       	andi	r25, 0xFB	; 251
    3350:	eb 81       	ldd	r30, Y+3	; 0x03
    3352:	fc 81       	ldd	r31, Y+4	; 0x04
    3354:	80 81       	ld	r24, Z
    3356:	84 70       	andi	r24, 0x04	; 4
    3358:	89 2b       	or	r24, r25
    335a:	8c 93       	st	X, r24
	 * Setup the UCSZ1:0 bits for data bit mode.
	 * Setup the UPM1:0 bits to chose the parity bit.
	 * Setup the USB bit to chose the number of stop bits.
	 * UCPOL = 0  used with the Synchronous operation only
	 ***************************************************************************/
	UCSRC = (1<<URSEL) ;
    335c:	e0 e4       	ldi	r30, 0x40	; 64
    335e:	f0 e0       	ldi	r31, 0x00	; 0
    3360:	80 e8       	ldi	r24, 0x80	; 128
    3362:	80 83       	st	Z, r24

	UCSRC = (UCSRC & 0xF9) | ((Config_Ptr->bit_data & 0x03)<<UCSZ0);
    3364:	a0 e4       	ldi	r26, 0x40	; 64
    3366:	b0 e0       	ldi	r27, 0x00	; 0
    3368:	e0 e4       	ldi	r30, 0x40	; 64
    336a:	f0 e0       	ldi	r31, 0x00	; 0
    336c:	80 81       	ld	r24, Z
    336e:	28 2f       	mov	r18, r24
    3370:	29 7f       	andi	r18, 0xF9	; 249
    3372:	eb 81       	ldd	r30, Y+3	; 0x03
    3374:	fc 81       	ldd	r31, Y+4	; 0x04
    3376:	80 81       	ld	r24, Z
    3378:	88 2f       	mov	r24, r24
    337a:	90 e0       	ldi	r25, 0x00	; 0
    337c:	83 70       	andi	r24, 0x03	; 3
    337e:	90 70       	andi	r25, 0x00	; 0
    3380:	88 0f       	add	r24, r24
    3382:	99 1f       	adc	r25, r25
    3384:	82 2b       	or	r24, r18
    3386:	8c 93       	st	X, r24

	UCSRC = (UCSRC & 0xCF) | ((Config_Ptr->parity & 0x03)<<UPM0);
    3388:	a0 e4       	ldi	r26, 0x40	; 64
    338a:	b0 e0       	ldi	r27, 0x00	; 0
    338c:	e0 e4       	ldi	r30, 0x40	; 64
    338e:	f0 e0       	ldi	r31, 0x00	; 0
    3390:	80 81       	ld	r24, Z
    3392:	28 2f       	mov	r18, r24
    3394:	2f 7c       	andi	r18, 0xCF	; 207
    3396:	eb 81       	ldd	r30, Y+3	; 0x03
    3398:	fc 81       	ldd	r31, Y+4	; 0x04
    339a:	81 81       	ldd	r24, Z+1	; 0x01
    339c:	88 2f       	mov	r24, r24
    339e:	90 e0       	ldi	r25, 0x00	; 0
    33a0:	83 70       	andi	r24, 0x03	; 3
    33a2:	90 70       	andi	r25, 0x00	; 0
    33a4:	82 95       	swap	r24
    33a6:	92 95       	swap	r25
    33a8:	90 7f       	andi	r25, 0xF0	; 240
    33aa:	98 27       	eor	r25, r24
    33ac:	80 7f       	andi	r24, 0xF0	; 240
    33ae:	98 27       	eor	r25, r24
    33b0:	82 2b       	or	r24, r18
    33b2:	8c 93       	st	X, r24

	UCSRC = (UCSRC & 0xF7) | ((Config_Ptr->stop_bit & 0x01)<<USBS);
    33b4:	a0 e4       	ldi	r26, 0x40	; 64
    33b6:	b0 e0       	ldi	r27, 0x00	; 0
    33b8:	e0 e4       	ldi	r30, 0x40	; 64
    33ba:	f0 e0       	ldi	r31, 0x00	; 0
    33bc:	80 81       	ld	r24, Z
    33be:	28 2f       	mov	r18, r24
    33c0:	27 7f       	andi	r18, 0xF7	; 247
    33c2:	eb 81       	ldd	r30, Y+3	; 0x03
    33c4:	fc 81       	ldd	r31, Y+4	; 0x04
    33c6:	82 81       	ldd	r24, Z+2	; 0x02
    33c8:	88 2f       	mov	r24, r24
    33ca:	90 e0       	ldi	r25, 0x00	; 0
    33cc:	81 70       	andi	r24, 0x01	; 1
    33ce:	90 70       	andi	r25, 0x00	; 0
    33d0:	88 0f       	add	r24, r24
    33d2:	99 1f       	adc	r25, r25
    33d4:	88 0f       	add	r24, r24
    33d6:	99 1f       	adc	r25, r25
    33d8:	88 0f       	add	r24, r24
    33da:	99 1f       	adc	r25, r25
    33dc:	82 2b       	or	r24, r18
    33de:	8c 93       	st	X, r24



	/*Calculate the UBRR register value*/
	ubrrValue = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    33e0:	eb 81       	ldd	r30, Y+3	; 0x03
    33e2:	fc 81       	ldd	r31, Y+4	; 0x04
    33e4:	83 81       	ldd	r24, Z+3	; 0x03
    33e6:	94 81       	ldd	r25, Z+4	; 0x04
    33e8:	a5 81       	ldd	r26, Z+5	; 0x05
    33ea:	b6 81       	ldd	r27, Z+6	; 0x06
    33ec:	88 0f       	add	r24, r24
    33ee:	99 1f       	adc	r25, r25
    33f0:	aa 1f       	adc	r26, r26
    33f2:	bb 1f       	adc	r27, r27
    33f4:	88 0f       	add	r24, r24
    33f6:	99 1f       	adc	r25, r25
    33f8:	aa 1f       	adc	r26, r26
    33fa:	bb 1f       	adc	r27, r27
    33fc:	88 0f       	add	r24, r24
    33fe:	99 1f       	adc	r25, r25
    3400:	aa 1f       	adc	r26, r26
    3402:	bb 1f       	adc	r27, r27
    3404:	9c 01       	movw	r18, r24
    3406:	ad 01       	movw	r20, r26
    3408:	80 e4       	ldi	r24, 0x40	; 64
    340a:	92 e4       	ldi	r25, 0x42	; 66
    340c:	af e0       	ldi	r26, 0x0F	; 15
    340e:	b0 e0       	ldi	r27, 0x00	; 0
    3410:	bc 01       	movw	r22, r24
    3412:	cd 01       	movw	r24, r26
    3414:	0e 94 b5 1a 	call	0x356a	; 0x356a <__udivmodsi4>
    3418:	da 01       	movw	r26, r20
    341a:	c9 01       	movw	r24, r18
    341c:	01 97       	sbiw	r24, 0x01	; 1
    341e:	9a 83       	std	Y+2, r25	; 0x02
    3420:	89 83       	std	Y+1, r24	; 0x01

	/*First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRL = ubrrValue;
    3422:	e9 e2       	ldi	r30, 0x29	; 41
    3424:	f0 e0       	ldi	r31, 0x00	; 0
    3426:	89 81       	ldd	r24, Y+1	; 0x01
    3428:	80 83       	st	Z, r24
	UBRRH = ubrrValue>>8;
    342a:	e0 e4       	ldi	r30, 0x40	; 64
    342c:	f0 e0       	ldi	r31, 0x00	; 0
    342e:	89 81       	ldd	r24, Y+1	; 0x01
    3430:	9a 81       	ldd	r25, Y+2	; 0x02
    3432:	89 2f       	mov	r24, r25
    3434:	99 27       	eor	r25, r25
    3436:	80 83       	st	Z, r24
}
    3438:	0f 90       	pop	r0
    343a:	0f 90       	pop	r0
    343c:	0f 90       	pop	r0
    343e:	0f 90       	pop	r0
    3440:	cf 91       	pop	r28
    3442:	df 91       	pop	r29
    3444:	08 95       	ret

00003446 <UART_sendByte>:
/*
 * Description:
 * Send byte to another UART device.
 */
void UART_sendByte(const uint8 a_data)
{
    3446:	df 93       	push	r29
    3448:	cf 93       	push	r28
    344a:	0f 92       	push	r0
    344c:	cd b7       	in	r28, 0x3d	; 61
    344e:	de b7       	in	r29, 0x3e	; 62
    3450:	89 83       	std	Y+1, r24	; 0x01
	/*UDRE flag is set when the Tx buffer (UDR) is empty and ready for transmitting a new byte*/
	while(BIT_IS_CLEAR(UCSRA,UDRE)); /*Wait until this flag is set to avoid Data Overrun Error*/
    3452:	eb e2       	ldi	r30, 0x2B	; 43
    3454:	f0 e0       	ldi	r31, 0x00	; 0
    3456:	80 81       	ld	r24, Z
    3458:	88 2f       	mov	r24, r24
    345a:	90 e0       	ldi	r25, 0x00	; 0
    345c:	80 72       	andi	r24, 0x20	; 32
    345e:	90 70       	andi	r25, 0x00	; 0
    3460:	00 97       	sbiw	r24, 0x00	; 0
    3462:	b9 f3       	breq	.-18     	; 0x3452 <UART_sendByte+0xc>

	UDR = a_data;  /*Put the data in UDR register and it clear the UDRE flag automatically*/
    3464:	ec e2       	ldi	r30, 0x2C	; 44
    3466:	f0 e0       	ldi	r31, 0x00	; 0
    3468:	89 81       	ldd	r24, Y+1	; 0x01
    346a:	80 83       	st	Z, r24
}
    346c:	0f 90       	pop	r0
    346e:	cf 91       	pop	r28
    3470:	df 91       	pop	r29
    3472:	08 95       	ret

00003474 <UART_receiveByte>:
/*
 * Description:
 * Receive byte from another UART device.
 */
uint8 UART_receiveByte(void)
{
    3474:	df 93       	push	r29
    3476:	cf 93       	push	r28
    3478:	cd b7       	in	r28, 0x3d	; 61
    347a:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data completely*/
	while(BIT_IS_CLEAR(UCSRA,RXC)); /*Wait until this flag is set*/
    347c:	eb e2       	ldi	r30, 0x2B	; 43
    347e:	f0 e0       	ldi	r31, 0x00	; 0
    3480:	80 81       	ld	r24, Z
    3482:	88 23       	and	r24, r24
    3484:	dc f7       	brge	.-10     	; 0x347c <UART_receiveByte+0x8>

	return UDR;  /*Read the received data and the flag will be cleared automatically*/
    3486:	ec e2       	ldi	r30, 0x2C	; 44
    3488:	f0 e0       	ldi	r31, 0x00	; 0
    348a:	80 81       	ld	r24, Z
}
    348c:	cf 91       	pop	r28
    348e:	df 91       	pop	r29
    3490:	08 95       	ret

00003492 <UART_sendString>:
/*
 * Description:
 * Send string to another UART device.
 */
void UART_sendString(const uint8* Str_Ptr)
{
    3492:	df 93       	push	r29
    3494:	cf 93       	push	r28
    3496:	00 d0       	rcall	.+0      	; 0x3498 <UART_sendString+0x6>
    3498:	0f 92       	push	r0
    349a:	cd b7       	in	r28, 0x3d	; 61
    349c:	de b7       	in	r29, 0x3e	; 62
    349e:	9b 83       	std	Y+3, r25	; 0x03
    34a0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    34a2:	19 82       	std	Y+1, r1	; 0x01
    34a4:	0e c0       	rjmp	.+28     	; 0x34c2 <UART_sendString+0x30>

	while(Str_Ptr[i] != '\0') /*Send the string until the \0 is reached*/
	{
		UART_sendByte(Str_Ptr[i]);
    34a6:	89 81       	ldd	r24, Y+1	; 0x01
    34a8:	28 2f       	mov	r18, r24
    34aa:	30 e0       	ldi	r19, 0x00	; 0
    34ac:	8a 81       	ldd	r24, Y+2	; 0x02
    34ae:	9b 81       	ldd	r25, Y+3	; 0x03
    34b0:	fc 01       	movw	r30, r24
    34b2:	e2 0f       	add	r30, r18
    34b4:	f3 1f       	adc	r31, r19
    34b6:	80 81       	ld	r24, Z
    34b8:	0e 94 23 1a 	call	0x3446	; 0x3446 <UART_sendByte>
		i++;
    34bc:	89 81       	ldd	r24, Y+1	; 0x01
    34be:	8f 5f       	subi	r24, 0xFF	; 255
    34c0:	89 83       	std	Y+1, r24	; 0x01
 */
void UART_sendString(const uint8* Str_Ptr)
{
	uint8 i = 0;

	while(Str_Ptr[i] != '\0') /*Send the string until the \0 is reached*/
    34c2:	89 81       	ldd	r24, Y+1	; 0x01
    34c4:	28 2f       	mov	r18, r24
    34c6:	30 e0       	ldi	r19, 0x00	; 0
    34c8:	8a 81       	ldd	r24, Y+2	; 0x02
    34ca:	9b 81       	ldd	r25, Y+3	; 0x03
    34cc:	fc 01       	movw	r30, r24
    34ce:	e2 0f       	add	r30, r18
    34d0:	f3 1f       	adc	r31, r19
    34d2:	80 81       	ld	r24, Z
    34d4:	88 23       	and	r24, r24
    34d6:	39 f7       	brne	.-50     	; 0x34a6 <UART_sendString+0x14>
	{
		UART_sendByte(Str_Ptr[i]);
		i++;
	}
}
    34d8:	0f 90       	pop	r0
    34da:	0f 90       	pop	r0
    34dc:	0f 90       	pop	r0
    34de:	cf 91       	pop	r28
    34e0:	df 91       	pop	r29
    34e2:	08 95       	ret

000034e4 <UART_receiveString>:
/*
 * Description:
 * Receive string (until the special character '#') from another UART device.
 */
void UART_receiveString(uint8* Str_Ptr)
{
    34e4:	0f 93       	push	r16
    34e6:	1f 93       	push	r17
    34e8:	df 93       	push	r29
    34ea:	cf 93       	push	r28
    34ec:	00 d0       	rcall	.+0      	; 0x34ee <UART_receiveString+0xa>
    34ee:	0f 92       	push	r0
    34f0:	cd b7       	in	r28, 0x3d	; 61
    34f2:	de b7       	in	r29, 0x3e	; 62
    34f4:	9b 83       	std	Y+3, r25	; 0x03
    34f6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    34f8:	19 82       	std	Y+1, r1	; 0x01

	Str_Ptr[i] = UART_receiveByte();  /*Receive the first byte*/
    34fa:	89 81       	ldd	r24, Y+1	; 0x01
    34fc:	28 2f       	mov	r18, r24
    34fe:	30 e0       	ldi	r19, 0x00	; 0
    3500:	8a 81       	ldd	r24, Y+2	; 0x02
    3502:	9b 81       	ldd	r25, Y+3	; 0x03
    3504:	8c 01       	movw	r16, r24
    3506:	02 0f       	add	r16, r18
    3508:	13 1f       	adc	r17, r19
    350a:	0e 94 3a 1a 	call	0x3474	; 0x3474 <UART_receiveByte>
    350e:	f8 01       	movw	r30, r16
    3510:	80 83       	st	Z, r24
    3512:	0f c0       	rjmp	.+30     	; 0x3532 <UART_receiveString+0x4e>

	while(Str_Ptr[i] != '#')  /*Receive the string until the # is reached*/
	{
		i++;
    3514:	89 81       	ldd	r24, Y+1	; 0x01
    3516:	8f 5f       	subi	r24, 0xFF	; 255
    3518:	89 83       	std	Y+1, r24	; 0x01
		Str_Ptr[i] = UART_receiveByte();
    351a:	89 81       	ldd	r24, Y+1	; 0x01
    351c:	28 2f       	mov	r18, r24
    351e:	30 e0       	ldi	r19, 0x00	; 0
    3520:	8a 81       	ldd	r24, Y+2	; 0x02
    3522:	9b 81       	ldd	r25, Y+3	; 0x03
    3524:	8c 01       	movw	r16, r24
    3526:	02 0f       	add	r16, r18
    3528:	13 1f       	adc	r17, r19
    352a:	0e 94 3a 1a 	call	0x3474	; 0x3474 <UART_receiveByte>
    352e:	f8 01       	movw	r30, r16
    3530:	80 83       	st	Z, r24
{
	uint8 i = 0;

	Str_Ptr[i] = UART_receiveByte();  /*Receive the first byte*/

	while(Str_Ptr[i] != '#')  /*Receive the string until the # is reached*/
    3532:	89 81       	ldd	r24, Y+1	; 0x01
    3534:	28 2f       	mov	r18, r24
    3536:	30 e0       	ldi	r19, 0x00	; 0
    3538:	8a 81       	ldd	r24, Y+2	; 0x02
    353a:	9b 81       	ldd	r25, Y+3	; 0x03
    353c:	fc 01       	movw	r30, r24
    353e:	e2 0f       	add	r30, r18
    3540:	f3 1f       	adc	r31, r19
    3542:	80 81       	ld	r24, Z
    3544:	83 32       	cpi	r24, 0x23	; 35
    3546:	31 f7       	brne	.-52     	; 0x3514 <UART_receiveString+0x30>
	{
		i++;
		Str_Ptr[i] = UART_receiveByte();
	}

	Str_Ptr[i]='\0';  /*After receiving the string replace # with \0*/
    3548:	89 81       	ldd	r24, Y+1	; 0x01
    354a:	28 2f       	mov	r18, r24
    354c:	30 e0       	ldi	r19, 0x00	; 0
    354e:	8a 81       	ldd	r24, Y+2	; 0x02
    3550:	9b 81       	ldd	r25, Y+3	; 0x03
    3552:	fc 01       	movw	r30, r24
    3554:	e2 0f       	add	r30, r18
    3556:	f3 1f       	adc	r31, r19
    3558:	10 82       	st	Z, r1
}
    355a:	0f 90       	pop	r0
    355c:	0f 90       	pop	r0
    355e:	0f 90       	pop	r0
    3560:	cf 91       	pop	r28
    3562:	df 91       	pop	r29
    3564:	1f 91       	pop	r17
    3566:	0f 91       	pop	r16
    3568:	08 95       	ret

0000356a <__udivmodsi4>:
    356a:	a1 e2       	ldi	r26, 0x21	; 33
    356c:	1a 2e       	mov	r1, r26
    356e:	aa 1b       	sub	r26, r26
    3570:	bb 1b       	sub	r27, r27
    3572:	fd 01       	movw	r30, r26
    3574:	0d c0       	rjmp	.+26     	; 0x3590 <__udivmodsi4_ep>

00003576 <__udivmodsi4_loop>:
    3576:	aa 1f       	adc	r26, r26
    3578:	bb 1f       	adc	r27, r27
    357a:	ee 1f       	adc	r30, r30
    357c:	ff 1f       	adc	r31, r31
    357e:	a2 17       	cp	r26, r18
    3580:	b3 07       	cpc	r27, r19
    3582:	e4 07       	cpc	r30, r20
    3584:	f5 07       	cpc	r31, r21
    3586:	20 f0       	brcs	.+8      	; 0x3590 <__udivmodsi4_ep>
    3588:	a2 1b       	sub	r26, r18
    358a:	b3 0b       	sbc	r27, r19
    358c:	e4 0b       	sbc	r30, r20
    358e:	f5 0b       	sbc	r31, r21

00003590 <__udivmodsi4_ep>:
    3590:	66 1f       	adc	r22, r22
    3592:	77 1f       	adc	r23, r23
    3594:	88 1f       	adc	r24, r24
    3596:	99 1f       	adc	r25, r25
    3598:	1a 94       	dec	r1
    359a:	69 f7       	brne	.-38     	; 0x3576 <__udivmodsi4_loop>
    359c:	60 95       	com	r22
    359e:	70 95       	com	r23
    35a0:	80 95       	com	r24
    35a2:	90 95       	com	r25
    35a4:	9b 01       	movw	r18, r22
    35a6:	ac 01       	movw	r20, r24
    35a8:	bd 01       	movw	r22, r26
    35aa:	cf 01       	movw	r24, r30
    35ac:	08 95       	ret

000035ae <__prologue_saves__>:
    35ae:	2f 92       	push	r2
    35b0:	3f 92       	push	r3
    35b2:	4f 92       	push	r4
    35b4:	5f 92       	push	r5
    35b6:	6f 92       	push	r6
    35b8:	7f 92       	push	r7
    35ba:	8f 92       	push	r8
    35bc:	9f 92       	push	r9
    35be:	af 92       	push	r10
    35c0:	bf 92       	push	r11
    35c2:	cf 92       	push	r12
    35c4:	df 92       	push	r13
    35c6:	ef 92       	push	r14
    35c8:	ff 92       	push	r15
    35ca:	0f 93       	push	r16
    35cc:	1f 93       	push	r17
    35ce:	cf 93       	push	r28
    35d0:	df 93       	push	r29
    35d2:	cd b7       	in	r28, 0x3d	; 61
    35d4:	de b7       	in	r29, 0x3e	; 62
    35d6:	ca 1b       	sub	r28, r26
    35d8:	db 0b       	sbc	r29, r27
    35da:	0f b6       	in	r0, 0x3f	; 63
    35dc:	f8 94       	cli
    35de:	de bf       	out	0x3e, r29	; 62
    35e0:	0f be       	out	0x3f, r0	; 63
    35e2:	cd bf       	out	0x3d, r28	; 61
    35e4:	09 94       	ijmp

000035e6 <__epilogue_restores__>:
    35e6:	2a 88       	ldd	r2, Y+18	; 0x12
    35e8:	39 88       	ldd	r3, Y+17	; 0x11
    35ea:	48 88       	ldd	r4, Y+16	; 0x10
    35ec:	5f 84       	ldd	r5, Y+15	; 0x0f
    35ee:	6e 84       	ldd	r6, Y+14	; 0x0e
    35f0:	7d 84       	ldd	r7, Y+13	; 0x0d
    35f2:	8c 84       	ldd	r8, Y+12	; 0x0c
    35f4:	9b 84       	ldd	r9, Y+11	; 0x0b
    35f6:	aa 84       	ldd	r10, Y+10	; 0x0a
    35f8:	b9 84       	ldd	r11, Y+9	; 0x09
    35fa:	c8 84       	ldd	r12, Y+8	; 0x08
    35fc:	df 80       	ldd	r13, Y+7	; 0x07
    35fe:	ee 80       	ldd	r14, Y+6	; 0x06
    3600:	fd 80       	ldd	r15, Y+5	; 0x05
    3602:	0c 81       	ldd	r16, Y+4	; 0x04
    3604:	1b 81       	ldd	r17, Y+3	; 0x03
    3606:	aa 81       	ldd	r26, Y+2	; 0x02
    3608:	b9 81       	ldd	r27, Y+1	; 0x01
    360a:	ce 0f       	add	r28, r30
    360c:	d1 1d       	adc	r29, r1
    360e:	0f b6       	in	r0, 0x3f	; 63
    3610:	f8 94       	cli
    3612:	de bf       	out	0x3e, r29	; 62
    3614:	0f be       	out	0x3f, r0	; 63
    3616:	cd bf       	out	0x3d, r28	; 61
    3618:	ed 01       	movw	r28, r26
    361a:	08 95       	ret

0000361c <itoa>:
    361c:	fb 01       	movw	r30, r22
    361e:	9f 01       	movw	r18, r30
    3620:	e8 94       	clt
    3622:	42 30       	cpi	r20, 0x02	; 2
    3624:	c4 f0       	brlt	.+48     	; 0x3656 <itoa+0x3a>
    3626:	45 32       	cpi	r20, 0x25	; 37
    3628:	b4 f4       	brge	.+44     	; 0x3656 <itoa+0x3a>
    362a:	4a 30       	cpi	r20, 0x0A	; 10
    362c:	29 f4       	brne	.+10     	; 0x3638 <itoa+0x1c>
    362e:	97 fb       	bst	r25, 7
    3630:	1e f4       	brtc	.+6      	; 0x3638 <itoa+0x1c>
    3632:	90 95       	com	r25
    3634:	81 95       	neg	r24
    3636:	9f 4f       	sbci	r25, 0xFF	; 255
    3638:	64 2f       	mov	r22, r20
    363a:	77 27       	eor	r23, r23
    363c:	0e 94 3f 1b 	call	0x367e	; 0x367e <__udivmodhi4>
    3640:	80 5d       	subi	r24, 0xD0	; 208
    3642:	8a 33       	cpi	r24, 0x3A	; 58
    3644:	0c f0       	brlt	.+2      	; 0x3648 <itoa+0x2c>
    3646:	89 5d       	subi	r24, 0xD9	; 217
    3648:	81 93       	st	Z+, r24
    364a:	cb 01       	movw	r24, r22
    364c:	00 97       	sbiw	r24, 0x00	; 0
    364e:	a1 f7       	brne	.-24     	; 0x3638 <itoa+0x1c>
    3650:	16 f4       	brtc	.+4      	; 0x3656 <itoa+0x3a>
    3652:	5d e2       	ldi	r21, 0x2D	; 45
    3654:	51 93       	st	Z+, r21
    3656:	10 82       	st	Z, r1
    3658:	c9 01       	movw	r24, r18
    365a:	0c 94 2f 1b 	jmp	0x365e	; 0x365e <strrev>

0000365e <strrev>:
    365e:	dc 01       	movw	r26, r24
    3660:	fc 01       	movw	r30, r24
    3662:	67 2f       	mov	r22, r23
    3664:	71 91       	ld	r23, Z+
    3666:	77 23       	and	r23, r23
    3668:	e1 f7       	brne	.-8      	; 0x3662 <strrev+0x4>
    366a:	32 97       	sbiw	r30, 0x02	; 2
    366c:	04 c0       	rjmp	.+8      	; 0x3676 <strrev+0x18>
    366e:	7c 91       	ld	r23, X
    3670:	6d 93       	st	X+, r22
    3672:	70 83       	st	Z, r23
    3674:	62 91       	ld	r22, -Z
    3676:	ae 17       	cp	r26, r30
    3678:	bf 07       	cpc	r27, r31
    367a:	c8 f3       	brcs	.-14     	; 0x366e <strrev+0x10>
    367c:	08 95       	ret

0000367e <__udivmodhi4>:
    367e:	aa 1b       	sub	r26, r26
    3680:	bb 1b       	sub	r27, r27
    3682:	51 e1       	ldi	r21, 0x11	; 17
    3684:	07 c0       	rjmp	.+14     	; 0x3694 <__udivmodhi4_ep>

00003686 <__udivmodhi4_loop>:
    3686:	aa 1f       	adc	r26, r26
    3688:	bb 1f       	adc	r27, r27
    368a:	a6 17       	cp	r26, r22
    368c:	b7 07       	cpc	r27, r23
    368e:	10 f0       	brcs	.+4      	; 0x3694 <__udivmodhi4_ep>
    3690:	a6 1b       	sub	r26, r22
    3692:	b7 0b       	sbc	r27, r23

00003694 <__udivmodhi4_ep>:
    3694:	88 1f       	adc	r24, r24
    3696:	99 1f       	adc	r25, r25
    3698:	5a 95       	dec	r21
    369a:	a9 f7       	brne	.-22     	; 0x3686 <__udivmodhi4_loop>
    369c:	80 95       	com	r24
    369e:	90 95       	com	r25
    36a0:	bc 01       	movw	r22, r24
    36a2:	cd 01       	movw	r24, r26
    36a4:	08 95       	ret

000036a6 <_exit>:
    36a6:	f8 94       	cli

000036a8 <__stop_program>:
    36a8:	ff cf       	rjmp	.-2      	; 0x36a8 <__stop_program>
