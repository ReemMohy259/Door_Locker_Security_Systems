
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c4a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000118  00800060  00002c4a  00002cde  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800178  00800178  00002df6  2**0
                  ALLOC
  3 .stab         000029a0  00000000  00000000  00002df8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001390  00000000  00000000  00005798  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00006b28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  00006ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  00006efc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0000950e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0000a9dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000bce8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0000bec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0000c1cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cbe9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 07 13 	jmp	0x260e	; 0x260e <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 d4 12 	jmp	0x25a8	; 0x25a8 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e4       	ldi	r30, 0x4A	; 74
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 37       	cpi	r26, 0x7E	; 126
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9a 07 	call	0xf34	; 0xf34 <main>
      8a:	0c 94 23 16 	jmp	0x2c46	; 0x2c46 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ec 15 	jmp	0x2bd8	; 0x2bd8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 08 16 	jmp	0x2c10	; 0x2c10 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f8 15 	jmp	0x2bf0	; 0x2bf0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 14 16 	jmp	0x2c28	; 0x2c28 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f8 15 	jmp	0x2bf0	; 0x2bf0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 14 16 	jmp	0x2c28	; 0x2c28 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ec 15 	jmp	0x2bd8	; 0x2bd8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 08 16 	jmp	0x2c10	; 0x2c10 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f4 15 	jmp	0x2be8	; 0x2be8 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 10 16 	jmp	0x2c20	; 0x2c20 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 f8 15 	jmp	0x2bf0	; 0x2bf0 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 14 16 	jmp	0x2c28	; 0x2c28 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 f8 15 	jmp	0x2bf0	; 0x2bf0 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 14 16 	jmp	0x2c28	; 0x2c28 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 f8 15 	jmp	0x2bf0	; 0x2bf0 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 14 16 	jmp	0x2c28	; 0x2c28 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 f5 15 	jmp	0x2bea	; 0x2bea <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 11 16 	jmp	0x2c22	; 0x2c22 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 fc 15 	jmp	0x2bf8	; 0x2bf8 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 18 16 	jmp	0x2c30	; 0x2c30 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 f4 15 	jmp	0x2be8	; 0x2be8 <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 10 16 	jmp	0x2c20	; 0x2c20 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e8 59       	subi	r30, 0x98	; 152
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <DcMotorControl>:
uint8 flag_2 = 0;
uint8 flag_3 = 0;

/*The call back function called by the timer ISR*/
void DcMotorControl(void)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
	static uint8 tick = 0;
	tick++;
     ef2:	80 91 7b 01 	lds	r24, 0x017B
     ef6:	8f 5f       	subi	r24, 0xFF	; 255
     ef8:	80 93 7b 01 	sts	0x017B, r24

	if(tick == 5)
     efc:	80 91 7b 01 	lds	r24, 0x017B
     f00:	85 30       	cpi	r24, 0x05	; 5
     f02:	21 f4       	brne	.+8      	; 0xf0c <DcMotorControl+0x22>
	{
		flag_1 = 1;
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	80 93 78 01 	sts	0x0178, r24
     f0a:	11 c0       	rjmp	.+34     	; 0xf2e <DcMotorControl+0x44>
	}
	else if(tick == 6)
     f0c:	80 91 7b 01 	lds	r24, 0x017B
     f10:	86 30       	cpi	r24, 0x06	; 6
     f12:	21 f4       	brne	.+8      	; 0xf1c <DcMotorControl+0x32>
	{
		flag_2 = 1;
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	80 93 79 01 	sts	0x0179, r24
     f1a:	09 c0       	rjmp	.+18     	; 0xf2e <DcMotorControl+0x44>
	}
	else if(tick == 11)
     f1c:	80 91 7b 01 	lds	r24, 0x017B
     f20:	8b 30       	cpi	r24, 0x0B	; 11
     f22:	29 f4       	brne	.+10     	; 0xf2e <DcMotorControl+0x44>
	{
		flag_3 = 1;
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	80 93 7a 01 	sts	0x017A, r24
		tick = 0;
     f2a:	10 92 7b 01 	sts	0x017B, r1
	}
}
     f2e:	cf 91       	pop	r28
     f30:	df 91       	pop	r29
     f32:	08 95       	ret

00000f34 <main>:

/******************************************************************************************************************************************************************/

int main(void)
{
     f34:	0f 93       	push	r16
     f36:	1f 93       	push	r17
     f38:	df 93       	push	r29
     f3a:	cf 93       	push	r28
     f3c:	cd b7       	in	r28, 0x3d	; 61
     f3e:	de b7       	in	r29, 0x3e	; 62
     f40:	c8 58       	subi	r28, 0x88	; 136
     f42:	d0 40       	sbci	r29, 0x00	; 0
     f44:	0f b6       	in	r0, 0x3f	; 63
     f46:	f8 94       	cli
     f48:	de bf       	out	0x3e, r29	; 62
     f4a:	0f be       	out	0x3f, r0	; 63
     f4c:	cd bf       	out	0x3d, r28	; 61
	uint8 pass1[ARR_SIZE+1];
	uint8 pass2[ARR_SIZE+1];
	uint8 check;
	uint8 savedPass[ARR_SIZE+1];
	uint8 receivedByte;
	uint8 trials = 0;
     f4e:	fe 01       	movw	r30, r28
     f50:	eb 5a       	subi	r30, 0xAB	; 171
     f52:	ff 4f       	sbci	r31, 0xFF	; 255
     f54:	10 82       	st	Z, r1

	/*UART configuration structure*/
	Uart_ConfigType s_UartConfig = { _8_bit,DISABLE,ONE_STOP_BIT,9600 };
     f56:	ce 01       	movw	r24, r28
     f58:	86 59       	subi	r24, 0x96	; 150
     f5a:	9f 4f       	sbci	r25, 0xFF	; 255
     f5c:	ec 96       	adiw	r28, 0x3c	; 60
     f5e:	9f af       	std	Y+63, r25	; 0x3f
     f60:	8e af       	std	Y+62, r24	; 0x3e
     f62:	ec 97       	sbiw	r28, 0x3c	; 60
     f64:	81 e7       	ldi	r24, 0x71	; 113
     f66:	91 e0       	ldi	r25, 0x01	; 1
     f68:	ee 96       	adiw	r28, 0x3e	; 62
     f6a:	9f af       	std	Y+63, r25	; 0x3f
     f6c:	8e af       	std	Y+62, r24	; 0x3e
     f6e:	ee 97       	sbiw	r28, 0x3e	; 62
     f70:	97 e0       	ldi	r25, 0x07	; 7
     f72:	ef 96       	adiw	r28, 0x3f	; 63
     f74:	9f af       	std	Y+63, r25	; 0x3f
     f76:	ef 97       	sbiw	r28, 0x3f	; 63
     f78:	ee 96       	adiw	r28, 0x3e	; 62
     f7a:	ee ad       	ldd	r30, Y+62	; 0x3e
     f7c:	ff ad       	ldd	r31, Y+63	; 0x3f
     f7e:	ee 97       	sbiw	r28, 0x3e	; 62
     f80:	00 80       	ld	r0, Z
     f82:	ee 96       	adiw	r28, 0x3e	; 62
     f84:	8e ad       	ldd	r24, Y+62	; 0x3e
     f86:	9f ad       	ldd	r25, Y+63	; 0x3f
     f88:	ee 97       	sbiw	r28, 0x3e	; 62
     f8a:	01 96       	adiw	r24, 0x01	; 1
     f8c:	ee 96       	adiw	r28, 0x3e	; 62
     f8e:	9f af       	std	Y+63, r25	; 0x3f
     f90:	8e af       	std	Y+62, r24	; 0x3e
     f92:	ee 97       	sbiw	r28, 0x3e	; 62
     f94:	ec 96       	adiw	r28, 0x3c	; 60
     f96:	ee ad       	ldd	r30, Y+62	; 0x3e
     f98:	ff ad       	ldd	r31, Y+63	; 0x3f
     f9a:	ec 97       	sbiw	r28, 0x3c	; 60
     f9c:	00 82       	st	Z, r0
     f9e:	ec 96       	adiw	r28, 0x3c	; 60
     fa0:	8e ad       	ldd	r24, Y+62	; 0x3e
     fa2:	9f ad       	ldd	r25, Y+63	; 0x3f
     fa4:	ec 97       	sbiw	r28, 0x3c	; 60
     fa6:	01 96       	adiw	r24, 0x01	; 1
     fa8:	ec 96       	adiw	r28, 0x3c	; 60
     faa:	9f af       	std	Y+63, r25	; 0x3f
     fac:	8e af       	std	Y+62, r24	; 0x3e
     fae:	ec 97       	sbiw	r28, 0x3c	; 60
     fb0:	ef 96       	adiw	r28, 0x3f	; 63
     fb2:	9f ad       	ldd	r25, Y+63	; 0x3f
     fb4:	ef 97       	sbiw	r28, 0x3f	; 63
     fb6:	91 50       	subi	r25, 0x01	; 1
     fb8:	ef 96       	adiw	r28, 0x3f	; 63
     fba:	9f af       	std	Y+63, r25	; 0x3f
     fbc:	ef 97       	sbiw	r28, 0x3f	; 63
     fbe:	ef 96       	adiw	r28, 0x3f	; 63
     fc0:	ef ad       	ldd	r30, Y+63	; 0x3f
     fc2:	ef 97       	sbiw	r28, 0x3f	; 63
     fc4:	ee 23       	and	r30, r30
     fc6:	c1 f6       	brne	.-80     	; 0xf78 <main+0x44>

	/*TWI configuration structure*/
	TWI_ConfigType s_TwiConfig = { 0b00000010,FAST_400K,ZERO};
     fc8:	ce 01       	movw	r24, r28
     fca:	8f 58       	subi	r24, 0x8F	; 143
     fcc:	9f 4f       	sbci	r25, 0xFF	; 255
     fce:	c1 58       	subi	r28, 0x81	; 129
     fd0:	df 4f       	sbci	r29, 0xFF	; 255
     fd2:	99 83       	std	Y+1, r25	; 0x01
     fd4:	88 83       	st	Y, r24
     fd6:	cf 57       	subi	r28, 0x7F	; 127
     fd8:	d0 40       	sbci	r29, 0x00	; 0
     fda:	8e e6       	ldi	r24, 0x6E	; 110
     fdc:	91 e0       	ldi	r25, 0x01	; 1
     fde:	cf 57       	subi	r28, 0x7F	; 127
     fe0:	df 4f       	sbci	r29, 0xFF	; 255
     fe2:	99 83       	std	Y+1, r25	; 0x01
     fe4:	88 83       	st	Y, r24
     fe6:	c1 58       	subi	r28, 0x81	; 129
     fe8:	d0 40       	sbci	r29, 0x00	; 0
     fea:	93 e0       	ldi	r25, 0x03	; 3
     fec:	cd 57       	subi	r28, 0x7D	; 125
     fee:	df 4f       	sbci	r29, 0xFF	; 255
     ff0:	98 83       	st	Y, r25
     ff2:	c3 58       	subi	r28, 0x83	; 131
     ff4:	d0 40       	sbci	r29, 0x00	; 0
     ff6:	cf 57       	subi	r28, 0x7F	; 127
     ff8:	df 4f       	sbci	r29, 0xFF	; 255
     ffa:	e8 81       	ld	r30, Y
     ffc:	f9 81       	ldd	r31, Y+1	; 0x01
     ffe:	c1 58       	subi	r28, 0x81	; 129
    1000:	d0 40       	sbci	r29, 0x00	; 0
    1002:	00 80       	ld	r0, Z
    1004:	cf 57       	subi	r28, 0x7F	; 127
    1006:	df 4f       	sbci	r29, 0xFF	; 255
    1008:	88 81       	ld	r24, Y
    100a:	99 81       	ldd	r25, Y+1	; 0x01
    100c:	c1 58       	subi	r28, 0x81	; 129
    100e:	d0 40       	sbci	r29, 0x00	; 0
    1010:	01 96       	adiw	r24, 0x01	; 1
    1012:	cf 57       	subi	r28, 0x7F	; 127
    1014:	df 4f       	sbci	r29, 0xFF	; 255
    1016:	99 83       	std	Y+1, r25	; 0x01
    1018:	88 83       	st	Y, r24
    101a:	c1 58       	subi	r28, 0x81	; 129
    101c:	d0 40       	sbci	r29, 0x00	; 0
    101e:	c1 58       	subi	r28, 0x81	; 129
    1020:	df 4f       	sbci	r29, 0xFF	; 255
    1022:	e8 81       	ld	r30, Y
    1024:	f9 81       	ldd	r31, Y+1	; 0x01
    1026:	cf 57       	subi	r28, 0x7F	; 127
    1028:	d0 40       	sbci	r29, 0x00	; 0
    102a:	00 82       	st	Z, r0
    102c:	c1 58       	subi	r28, 0x81	; 129
    102e:	df 4f       	sbci	r29, 0xFF	; 255
    1030:	88 81       	ld	r24, Y
    1032:	99 81       	ldd	r25, Y+1	; 0x01
    1034:	cf 57       	subi	r28, 0x7F	; 127
    1036:	d0 40       	sbci	r29, 0x00	; 0
    1038:	01 96       	adiw	r24, 0x01	; 1
    103a:	c1 58       	subi	r28, 0x81	; 129
    103c:	df 4f       	sbci	r29, 0xFF	; 255
    103e:	99 83       	std	Y+1, r25	; 0x01
    1040:	88 83       	st	Y, r24
    1042:	cf 57       	subi	r28, 0x7F	; 127
    1044:	d0 40       	sbci	r29, 0x00	; 0
    1046:	cd 57       	subi	r28, 0x7D	; 125
    1048:	df 4f       	sbci	r29, 0xFF	; 255
    104a:	98 81       	ld	r25, Y
    104c:	c3 58       	subi	r28, 0x83	; 131
    104e:	d0 40       	sbci	r29, 0x00	; 0
    1050:	91 50       	subi	r25, 0x01	; 1
    1052:	cd 57       	subi	r28, 0x7D	; 125
    1054:	df 4f       	sbci	r29, 0xFF	; 255
    1056:	98 83       	st	Y, r25
    1058:	c3 58       	subi	r28, 0x83	; 131
    105a:	d0 40       	sbci	r29, 0x00	; 0
    105c:	cd 57       	subi	r28, 0x7D	; 125
    105e:	df 4f       	sbci	r29, 0xFF	; 255
    1060:	e8 81       	ld	r30, Y
    1062:	c3 58       	subi	r28, 0x83	; 131
    1064:	d0 40       	sbci	r29, 0x00	; 0
    1066:	ee 23       	and	r30, r30
    1068:	31 f6       	brne	.-116    	; 0xff6 <main+0xc2>

	/*Timer1 configuration structure*/
	Timer1_ConfigType s_Timer1Config = { 0,23437,F_CPU_1024,COMPARE_MODE};
    106a:	ce 01       	movw	r24, r28
    106c:	8c 58       	subi	r24, 0x8C	; 140
    106e:	9f 4f       	sbci	r25, 0xFF	; 255
    1070:	cc 57       	subi	r28, 0x7C	; 124
    1072:	df 4f       	sbci	r29, 0xFF	; 255
    1074:	99 83       	std	Y+1, r25	; 0x01
    1076:	88 83       	st	Y, r24
    1078:	c4 58       	subi	r28, 0x84	; 132
    107a:	d0 40       	sbci	r29, 0x00	; 0
    107c:	88 e6       	ldi	r24, 0x68	; 104
    107e:	91 e0       	ldi	r25, 0x01	; 1
    1080:	ca 57       	subi	r28, 0x7A	; 122
    1082:	df 4f       	sbci	r29, 0xFF	; 255
    1084:	99 83       	std	Y+1, r25	; 0x01
    1086:	88 83       	st	Y, r24
    1088:	c6 58       	subi	r28, 0x86	; 134
    108a:	d0 40       	sbci	r29, 0x00	; 0
    108c:	96 e0       	ldi	r25, 0x06	; 6
    108e:	c8 57       	subi	r28, 0x78	; 120
    1090:	df 4f       	sbci	r29, 0xFF	; 255
    1092:	98 83       	st	Y, r25
    1094:	c8 58       	subi	r28, 0x88	; 136
    1096:	d0 40       	sbci	r29, 0x00	; 0
    1098:	ca 57       	subi	r28, 0x7A	; 122
    109a:	df 4f       	sbci	r29, 0xFF	; 255
    109c:	e8 81       	ld	r30, Y
    109e:	f9 81       	ldd	r31, Y+1	; 0x01
    10a0:	c6 58       	subi	r28, 0x86	; 134
    10a2:	d0 40       	sbci	r29, 0x00	; 0
    10a4:	00 80       	ld	r0, Z
    10a6:	ca 57       	subi	r28, 0x7A	; 122
    10a8:	df 4f       	sbci	r29, 0xFF	; 255
    10aa:	88 81       	ld	r24, Y
    10ac:	99 81       	ldd	r25, Y+1	; 0x01
    10ae:	c6 58       	subi	r28, 0x86	; 134
    10b0:	d0 40       	sbci	r29, 0x00	; 0
    10b2:	01 96       	adiw	r24, 0x01	; 1
    10b4:	ca 57       	subi	r28, 0x7A	; 122
    10b6:	df 4f       	sbci	r29, 0xFF	; 255
    10b8:	99 83       	std	Y+1, r25	; 0x01
    10ba:	88 83       	st	Y, r24
    10bc:	c6 58       	subi	r28, 0x86	; 134
    10be:	d0 40       	sbci	r29, 0x00	; 0
    10c0:	cc 57       	subi	r28, 0x7C	; 124
    10c2:	df 4f       	sbci	r29, 0xFF	; 255
    10c4:	e8 81       	ld	r30, Y
    10c6:	f9 81       	ldd	r31, Y+1	; 0x01
    10c8:	c4 58       	subi	r28, 0x84	; 132
    10ca:	d0 40       	sbci	r29, 0x00	; 0
    10cc:	00 82       	st	Z, r0
    10ce:	cc 57       	subi	r28, 0x7C	; 124
    10d0:	df 4f       	sbci	r29, 0xFF	; 255
    10d2:	88 81       	ld	r24, Y
    10d4:	99 81       	ldd	r25, Y+1	; 0x01
    10d6:	c4 58       	subi	r28, 0x84	; 132
    10d8:	d0 40       	sbci	r29, 0x00	; 0
    10da:	01 96       	adiw	r24, 0x01	; 1
    10dc:	cc 57       	subi	r28, 0x7C	; 124
    10de:	df 4f       	sbci	r29, 0xFF	; 255
    10e0:	99 83       	std	Y+1, r25	; 0x01
    10e2:	88 83       	st	Y, r24
    10e4:	c4 58       	subi	r28, 0x84	; 132
    10e6:	d0 40       	sbci	r29, 0x00	; 0
    10e8:	c8 57       	subi	r28, 0x78	; 120
    10ea:	df 4f       	sbci	r29, 0xFF	; 255
    10ec:	98 81       	ld	r25, Y
    10ee:	c8 58       	subi	r28, 0x88	; 136
    10f0:	d0 40       	sbci	r29, 0x00	; 0
    10f2:	91 50       	subi	r25, 0x01	; 1
    10f4:	c8 57       	subi	r28, 0x78	; 120
    10f6:	df 4f       	sbci	r29, 0xFF	; 255
    10f8:	98 83       	st	Y, r25
    10fa:	c8 58       	subi	r28, 0x88	; 136
    10fc:	d0 40       	sbci	r29, 0x00	; 0
    10fe:	c8 57       	subi	r28, 0x78	; 120
    1100:	df 4f       	sbci	r29, 0xFF	; 255
    1102:	e8 81       	ld	r30, Y
    1104:	c8 58       	subi	r28, 0x88	; 136
    1106:	d0 40       	sbci	r29, 0x00	; 0
    1108:	ee 23       	and	r30, r30
    110a:	31 f6       	brne	.-116    	; 0x1098 <main+0x164>

	UART_init(&s_UartConfig);
    110c:	ce 01       	movw	r24, r28
    110e:	86 59       	subi	r24, 0x96	; 150
    1110:	9f 4f       	sbci	r25, 0xFF	; 255
    1112:	0e 94 a4 14 	call	0x2948	; 0x2948 <UART_init>
	TWI_init(&s_TwiConfig );
    1116:	ce 01       	movw	r24, r28
    1118:	8f 58       	subi	r24, 0x8F	; 143
    111a:	9f 4f       	sbci	r25, 0xFF	; 255
    111c:	0e 94 cf 13 	call	0x279e	; 0x279e <TWI_init>
	DcMotor_init();
    1120:	0e 94 ba 0c 	call	0x1974	; 0x1974 <DcMotor_init>
	BUZZER_init();
    1124:	0e 94 91 0c 	call	0x1922	; 0x1922 <BUZZER_init>

	sei();
    1128:	78 94       	sei
	{
		/*
		 * If password entered wrong 3 consecutive time.
		 * Turn buzzer on for one minute.
		 */
		if(trials >= 3)
    112a:	fe 01       	movw	r30, r28
    112c:	eb 5a       	subi	r30, 0xAB	; 171
    112e:	ff 4f       	sbci	r31, 0xFF	; 255
    1130:	80 81       	ld	r24, Z
    1132:	83 30       	cpi	r24, 0x03	; 3
    1134:	08 f4       	brcc	.+2      	; 0x1138 <main+0x204>
    1136:	bb c0       	rjmp	.+374    	; 0x12ae <main+0x37a>
		{
			BUZZER_on();
    1138:	0e 94 a2 0c 	call	0x1944	; 0x1944 <BUZZER_on>
    113c:	fe 01       	movw	r30, r28
    113e:	ef 5a       	subi	r30, 0xAF	; 175
    1140:	ff 4f       	sbci	r31, 0xFF	; 255
    1142:	80 e0       	ldi	r24, 0x00	; 0
    1144:	90 e4       	ldi	r25, 0x40	; 64
    1146:	ac e1       	ldi	r26, 0x1C	; 28
    1148:	b6 e4       	ldi	r27, 0x46	; 70
    114a:	80 83       	st	Z, r24
    114c:	91 83       	std	Z+1, r25	; 0x01
    114e:	a2 83       	std	Z+2, r26	; 0x02
    1150:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1152:	8e 01       	movw	r16, r28
    1154:	03 5b       	subi	r16, 0xB3	; 179
    1156:	1f 4f       	sbci	r17, 0xFF	; 255
    1158:	fe 01       	movw	r30, r28
    115a:	ef 5a       	subi	r30, 0xAF	; 175
    115c:	ff 4f       	sbci	r31, 0xFF	; 255
    115e:	60 81       	ld	r22, Z
    1160:	71 81       	ldd	r23, Z+1	; 0x01
    1162:	82 81       	ldd	r24, Z+2	; 0x02
    1164:	93 81       	ldd	r25, Z+3	; 0x03
    1166:	20 e0       	ldi	r18, 0x00	; 0
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	4a ef       	ldi	r20, 0xFA	; 250
    116c:	54 e4       	ldi	r21, 0x44	; 68
    116e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1172:	dc 01       	movw	r26, r24
    1174:	cb 01       	movw	r24, r22
    1176:	f8 01       	movw	r30, r16
    1178:	80 83       	st	Z, r24
    117a:	91 83       	std	Z+1, r25	; 0x01
    117c:	a2 83       	std	Z+2, r26	; 0x02
    117e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1180:	fe 01       	movw	r30, r28
    1182:	e3 5b       	subi	r30, 0xB3	; 179
    1184:	ff 4f       	sbci	r31, 0xFF	; 255
    1186:	60 81       	ld	r22, Z
    1188:	71 81       	ldd	r23, Z+1	; 0x01
    118a:	82 81       	ldd	r24, Z+2	; 0x02
    118c:	93 81       	ldd	r25, Z+3	; 0x03
    118e:	20 e0       	ldi	r18, 0x00	; 0
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	40 e8       	ldi	r20, 0x80	; 128
    1194:	5f e3       	ldi	r21, 0x3F	; 63
    1196:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    119a:	88 23       	and	r24, r24
    119c:	44 f4       	brge	.+16     	; 0x11ae <main+0x27a>
		__ticks = 1;
    119e:	fe 01       	movw	r30, r28
    11a0:	e5 5b       	subi	r30, 0xB5	; 181
    11a2:	ff 4f       	sbci	r31, 0xFF	; 255
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	91 83       	std	Z+1, r25	; 0x01
    11aa:	80 83       	st	Z, r24
    11ac:	64 c0       	rjmp	.+200    	; 0x1276 <main+0x342>
	else if (__tmp > 65535)
    11ae:	fe 01       	movw	r30, r28
    11b0:	e3 5b       	subi	r30, 0xB3	; 179
    11b2:	ff 4f       	sbci	r31, 0xFF	; 255
    11b4:	60 81       	ld	r22, Z
    11b6:	71 81       	ldd	r23, Z+1	; 0x01
    11b8:	82 81       	ldd	r24, Z+2	; 0x02
    11ba:	93 81       	ldd	r25, Z+3	; 0x03
    11bc:	20 e0       	ldi	r18, 0x00	; 0
    11be:	3f ef       	ldi	r19, 0xFF	; 255
    11c0:	4f e7       	ldi	r20, 0x7F	; 127
    11c2:	57 e4       	ldi	r21, 0x47	; 71
    11c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    11c8:	18 16       	cp	r1, r24
    11ca:	0c f0       	brlt	.+2      	; 0x11ce <main+0x29a>
    11cc:	43 c0       	rjmp	.+134    	; 0x1254 <main+0x320>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11ce:	fe 01       	movw	r30, r28
    11d0:	ef 5a       	subi	r30, 0xAF	; 175
    11d2:	ff 4f       	sbci	r31, 0xFF	; 255
    11d4:	60 81       	ld	r22, Z
    11d6:	71 81       	ldd	r23, Z+1	; 0x01
    11d8:	82 81       	ldd	r24, Z+2	; 0x02
    11da:	93 81       	ldd	r25, Z+3	; 0x03
    11dc:	20 e0       	ldi	r18, 0x00	; 0
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	40 e2       	ldi	r20, 0x20	; 32
    11e2:	51 e4       	ldi	r21, 0x41	; 65
    11e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11e8:	dc 01       	movw	r26, r24
    11ea:	cb 01       	movw	r24, r22
    11ec:	8e 01       	movw	r16, r28
    11ee:	05 5b       	subi	r16, 0xB5	; 181
    11f0:	1f 4f       	sbci	r17, 0xFF	; 255
    11f2:	bc 01       	movw	r22, r24
    11f4:	cd 01       	movw	r24, r26
    11f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11fa:	dc 01       	movw	r26, r24
    11fc:	cb 01       	movw	r24, r22
    11fe:	f8 01       	movw	r30, r16
    1200:	91 83       	std	Z+1, r25	; 0x01
    1202:	80 83       	st	Z, r24
    1204:	1f c0       	rjmp	.+62     	; 0x1244 <main+0x310>
    1206:	fe 01       	movw	r30, r28
    1208:	e7 5b       	subi	r30, 0xB7	; 183
    120a:	ff 4f       	sbci	r31, 0xFF	; 255
    120c:	88 ec       	ldi	r24, 0xC8	; 200
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	91 83       	std	Z+1, r25	; 0x01
    1212:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1214:	fe 01       	movw	r30, r28
    1216:	e7 5b       	subi	r30, 0xB7	; 183
    1218:	ff 4f       	sbci	r31, 0xFF	; 255
    121a:	80 81       	ld	r24, Z
    121c:	91 81       	ldd	r25, Z+1	; 0x01
    121e:	01 97       	sbiw	r24, 0x01	; 1
    1220:	f1 f7       	brne	.-4      	; 0x121e <main+0x2ea>
    1222:	fe 01       	movw	r30, r28
    1224:	e7 5b       	subi	r30, 0xB7	; 183
    1226:	ff 4f       	sbci	r31, 0xFF	; 255
    1228:	91 83       	std	Z+1, r25	; 0x01
    122a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    122c:	de 01       	movw	r26, r28
    122e:	a5 5b       	subi	r26, 0xB5	; 181
    1230:	bf 4f       	sbci	r27, 0xFF	; 255
    1232:	fe 01       	movw	r30, r28
    1234:	e5 5b       	subi	r30, 0xB5	; 181
    1236:	ff 4f       	sbci	r31, 0xFF	; 255
    1238:	80 81       	ld	r24, Z
    123a:	91 81       	ldd	r25, Z+1	; 0x01
    123c:	01 97       	sbiw	r24, 0x01	; 1
    123e:	11 96       	adiw	r26, 0x01	; 1
    1240:	9c 93       	st	X, r25
    1242:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1244:	fe 01       	movw	r30, r28
    1246:	e5 5b       	subi	r30, 0xB5	; 181
    1248:	ff 4f       	sbci	r31, 0xFF	; 255
    124a:	80 81       	ld	r24, Z
    124c:	91 81       	ldd	r25, Z+1	; 0x01
    124e:	00 97       	sbiw	r24, 0x00	; 0
    1250:	d1 f6       	brne	.-76     	; 0x1206 <main+0x2d2>
    1252:	27 c0       	rjmp	.+78     	; 0x12a2 <main+0x36e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1254:	8e 01       	movw	r16, r28
    1256:	05 5b       	subi	r16, 0xB5	; 181
    1258:	1f 4f       	sbci	r17, 0xFF	; 255
    125a:	fe 01       	movw	r30, r28
    125c:	e3 5b       	subi	r30, 0xB3	; 179
    125e:	ff 4f       	sbci	r31, 0xFF	; 255
    1260:	60 81       	ld	r22, Z
    1262:	71 81       	ldd	r23, Z+1	; 0x01
    1264:	82 81       	ldd	r24, Z+2	; 0x02
    1266:	93 81       	ldd	r25, Z+3	; 0x03
    1268:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    126c:	dc 01       	movw	r26, r24
    126e:	cb 01       	movw	r24, r22
    1270:	f8 01       	movw	r30, r16
    1272:	91 83       	std	Z+1, r25	; 0x01
    1274:	80 83       	st	Z, r24
    1276:	de 01       	movw	r26, r28
    1278:	a9 5b       	subi	r26, 0xB9	; 185
    127a:	bf 4f       	sbci	r27, 0xFF	; 255
    127c:	fe 01       	movw	r30, r28
    127e:	e5 5b       	subi	r30, 0xB5	; 181
    1280:	ff 4f       	sbci	r31, 0xFF	; 255
    1282:	80 81       	ld	r24, Z
    1284:	91 81       	ldd	r25, Z+1	; 0x01
    1286:	8d 93       	st	X+, r24
    1288:	9c 93       	st	X, r25
    128a:	fe 01       	movw	r30, r28
    128c:	e9 5b       	subi	r30, 0xB9	; 185
    128e:	ff 4f       	sbci	r31, 0xFF	; 255
    1290:	80 81       	ld	r24, Z
    1292:	91 81       	ldd	r25, Z+1	; 0x01
    1294:	01 97       	sbiw	r24, 0x01	; 1
    1296:	f1 f7       	brne	.-4      	; 0x1294 <main+0x360>
    1298:	fe 01       	movw	r30, r28
    129a:	e9 5b       	subi	r30, 0xB9	; 185
    129c:	ff 4f       	sbci	r31, 0xFF	; 255
    129e:	91 83       	std	Z+1, r25	; 0x01
    12a0:	80 83       	st	Z, r24
			_delay_ms(10000);
			BUZZER_off();
    12a2:	0e 94 ae 0c 	call	0x195c	; 0x195c <BUZZER_off>

			trials = 0;     /*Reset trials*/
    12a6:	fe 01       	movw	r30, r28
    12a8:	eb 5a       	subi	r30, 0xAB	; 171
    12aa:	ff 4f       	sbci	r31, 0xFF	; 255
    12ac:	10 82       	st	Z, r1
		}

		while(UART_receiveByte()!= READY);  /*Wait until HMI_ECU send the two passwords*/
    12ae:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <UART_receiveByte>
    12b2:	81 30       	cpi	r24, 0x01	; 1
    12b4:	e1 f7       	brne	.-8      	; 0x12ae <main+0x37a>

		/*Receive two passwords*/
		UART_receiveString(pass1);
    12b6:	ce 01       	movw	r24, r28
    12b8:	88 5a       	subi	r24, 0xA8	; 168
    12ba:	9f 4f       	sbci	r25, 0xFF	; 255
    12bc:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <UART_receiveString>
		UART_receiveString(pass2);
    12c0:	ce 01       	movw	r24, r28
    12c2:	82 5a       	subi	r24, 0xA2	; 162
    12c4:	9f 4f       	sbci	r25, 0xFF	; 255
    12c6:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <UART_receiveString>

		check = check_createdPassword(pass1,pass2);  /*Compare two passwords together*/
    12ca:	ce 01       	movw	r24, r28
    12cc:	88 5a       	subi	r24, 0xA8	; 168
    12ce:	9f 4f       	sbci	r25, 0xFF	; 255
    12d0:	9e 01       	movw	r18, r28
    12d2:	22 5a       	subi	r18, 0xA2	; 162
    12d4:	3f 4f       	sbci	r19, 0xFF	; 255
    12d6:	b9 01       	movw	r22, r18
    12d8:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <check_createdPassword>
    12dc:	fe 01       	movw	r30, r28
    12de:	e9 5a       	subi	r30, 0xA9	; 169
    12e0:	ff 4f       	sbci	r31, 0xFF	; 255
    12e2:	80 83       	st	Z, r24
    12e4:	fe 01       	movw	r30, r28
    12e6:	ed 5b       	subi	r30, 0xBD	; 189
    12e8:	ff 4f       	sbci	r31, 0xFF	; 255
    12ea:	80 e0       	ldi	r24, 0x00	; 0
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	a8 ec       	ldi	r26, 0xC8	; 200
    12f0:	b2 e4       	ldi	r27, 0x42	; 66
    12f2:	80 83       	st	Z, r24
    12f4:	91 83       	std	Z+1, r25	; 0x01
    12f6:	a2 83       	std	Z+2, r26	; 0x02
    12f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12fa:	8e 01       	movw	r16, r28
    12fc:	01 5c       	subi	r16, 0xC1	; 193
    12fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1300:	fe 01       	movw	r30, r28
    1302:	ed 5b       	subi	r30, 0xBD	; 189
    1304:	ff 4f       	sbci	r31, 0xFF	; 255
    1306:	60 81       	ld	r22, Z
    1308:	71 81       	ldd	r23, Z+1	; 0x01
    130a:	82 81       	ldd	r24, Z+2	; 0x02
    130c:	93 81       	ldd	r25, Z+3	; 0x03
    130e:	20 e0       	ldi	r18, 0x00	; 0
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	4a ef       	ldi	r20, 0xFA	; 250
    1314:	54 e4       	ldi	r21, 0x44	; 68
    1316:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    131a:	dc 01       	movw	r26, r24
    131c:	cb 01       	movw	r24, r22
    131e:	f8 01       	movw	r30, r16
    1320:	80 83       	st	Z, r24
    1322:	91 83       	std	Z+1, r25	; 0x01
    1324:	a2 83       	std	Z+2, r26	; 0x02
    1326:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1328:	fe 01       	movw	r30, r28
    132a:	ff 96       	adiw	r30, 0x3f	; 63
    132c:	60 81       	ld	r22, Z
    132e:	71 81       	ldd	r23, Z+1	; 0x01
    1330:	82 81       	ldd	r24, Z+2	; 0x02
    1332:	93 81       	ldd	r25, Z+3	; 0x03
    1334:	20 e0       	ldi	r18, 0x00	; 0
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	40 e8       	ldi	r20, 0x80	; 128
    133a:	5f e3       	ldi	r21, 0x3F	; 63
    133c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1340:	88 23       	and	r24, r24
    1342:	2c f4       	brge	.+10     	; 0x134e <main+0x41a>
		__ticks = 1;
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	9e af       	std	Y+62, r25	; 0x3e
    134a:	8d af       	std	Y+61, r24	; 0x3d
    134c:	46 c0       	rjmp	.+140    	; 0x13da <main+0x4a6>
	else if (__tmp > 65535)
    134e:	fe 01       	movw	r30, r28
    1350:	ff 96       	adiw	r30, 0x3f	; 63
    1352:	60 81       	ld	r22, Z
    1354:	71 81       	ldd	r23, Z+1	; 0x01
    1356:	82 81       	ldd	r24, Z+2	; 0x02
    1358:	93 81       	ldd	r25, Z+3	; 0x03
    135a:	20 e0       	ldi	r18, 0x00	; 0
    135c:	3f ef       	ldi	r19, 0xFF	; 255
    135e:	4f e7       	ldi	r20, 0x7F	; 127
    1360:	57 e4       	ldi	r21, 0x47	; 71
    1362:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1366:	18 16       	cp	r1, r24
    1368:	64 f5       	brge	.+88     	; 0x13c2 <main+0x48e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    136a:	fe 01       	movw	r30, r28
    136c:	ed 5b       	subi	r30, 0xBD	; 189
    136e:	ff 4f       	sbci	r31, 0xFF	; 255
    1370:	60 81       	ld	r22, Z
    1372:	71 81       	ldd	r23, Z+1	; 0x01
    1374:	82 81       	ldd	r24, Z+2	; 0x02
    1376:	93 81       	ldd	r25, Z+3	; 0x03
    1378:	20 e0       	ldi	r18, 0x00	; 0
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	40 e2       	ldi	r20, 0x20	; 32
    137e:	51 e4       	ldi	r21, 0x41	; 65
    1380:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1384:	dc 01       	movw	r26, r24
    1386:	cb 01       	movw	r24, r22
    1388:	bc 01       	movw	r22, r24
    138a:	cd 01       	movw	r24, r26
    138c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1390:	dc 01       	movw	r26, r24
    1392:	cb 01       	movw	r24, r22
    1394:	9e af       	std	Y+62, r25	; 0x3e
    1396:	8d af       	std	Y+61, r24	; 0x3d
    1398:	0f c0       	rjmp	.+30     	; 0x13b8 <main+0x484>
    139a:	88 ec       	ldi	r24, 0xC8	; 200
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	9c af       	std	Y+60, r25	; 0x3c
    13a0:	8b af       	std	Y+59, r24	; 0x3b
    13a2:	8b ad       	ldd	r24, Y+59	; 0x3b
    13a4:	9c ad       	ldd	r25, Y+60	; 0x3c
    13a6:	01 97       	sbiw	r24, 0x01	; 1
    13a8:	f1 f7       	brne	.-4      	; 0x13a6 <main+0x472>
    13aa:	9c af       	std	Y+60, r25	; 0x3c
    13ac:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13ae:	8d ad       	ldd	r24, Y+61	; 0x3d
    13b0:	9e ad       	ldd	r25, Y+62	; 0x3e
    13b2:	01 97       	sbiw	r24, 0x01	; 1
    13b4:	9e af       	std	Y+62, r25	; 0x3e
    13b6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13b8:	8d ad       	ldd	r24, Y+61	; 0x3d
    13ba:	9e ad       	ldd	r25, Y+62	; 0x3e
    13bc:	00 97       	sbiw	r24, 0x00	; 0
    13be:	69 f7       	brne	.-38     	; 0x139a <main+0x466>
    13c0:	16 c0       	rjmp	.+44     	; 0x13ee <main+0x4ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13c2:	fe 01       	movw	r30, r28
    13c4:	ff 96       	adiw	r30, 0x3f	; 63
    13c6:	60 81       	ld	r22, Z
    13c8:	71 81       	ldd	r23, Z+1	; 0x01
    13ca:	82 81       	ldd	r24, Z+2	; 0x02
    13cc:	93 81       	ldd	r25, Z+3	; 0x03
    13ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13d2:	dc 01       	movw	r26, r24
    13d4:	cb 01       	movw	r24, r22
    13d6:	9e af       	std	Y+62, r25	; 0x3e
    13d8:	8d af       	std	Y+61, r24	; 0x3d
    13da:	8d ad       	ldd	r24, Y+61	; 0x3d
    13dc:	9e ad       	ldd	r25, Y+62	; 0x3e
    13de:	9a af       	std	Y+58, r25	; 0x3a
    13e0:	89 af       	std	Y+57, r24	; 0x39
    13e2:	89 ad       	ldd	r24, Y+57	; 0x39
    13e4:	9a ad       	ldd	r25, Y+58	; 0x3a
    13e6:	01 97       	sbiw	r24, 0x01	; 1
    13e8:	f1 f7       	brne	.-4      	; 0x13e6 <main+0x4b2>
    13ea:	9a af       	std	Y+58, r25	; 0x3a
    13ec:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(100);

		if(check == INCORRECT_PASS)
    13ee:	fe 01       	movw	r30, r28
    13f0:	e9 5a       	subi	r30, 0xA9	; 169
    13f2:	ff 4f       	sbci	r31, 0xFF	; 255
    13f4:	80 81       	ld	r24, Z
    13f6:	83 30       	cpi	r24, 0x03	; 3
    13f8:	39 f4       	brne	.+14     	; 0x1408 <main+0x4d4>
		{
			/*Send to HMI_ECU that two password didn't matched*/
			UART_sendByte(READY);
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	0e 94 38 15 	call	0x2a70	; 0x2a70 <UART_sendByte>
			UART_sendByte(INCORRECT_PASS);
    1400:	83 e0       	ldi	r24, 0x03	; 3
    1402:	0e 94 38 15 	call	0x2a70	; 0x2a70 <UART_sendByte>
    1406:	91 ce       	rjmp	.-734    	; 0x112a <main+0x1f6>
		}
		else if(check == CORRECT_PASS)
    1408:	fe 01       	movw	r30, r28
    140a:	e9 5a       	subi	r30, 0xA9	; 169
    140c:	ff 4f       	sbci	r31, 0xFF	; 255
    140e:	80 81       	ld	r24, Z
    1410:	82 30       	cpi	r24, 0x02	; 2
    1412:	09 f0       	breq	.+2      	; 0x1416 <main+0x4e2>
    1414:	8a ce       	rjmp	.-748    	; 0x112a <main+0x1f6>
		{
			/*Send to HMI_ECU that two password are matched*/
			UART_sendByte(READY);
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	0e 94 38 15 	call	0x2a70	; 0x2a70 <UART_sendByte>
			UART_sendByte(CORRECT_PASS);
    141c:	82 e0       	ldi	r24, 0x02	; 2
    141e:	0e 94 38 15 	call	0x2a70	; 0x2a70 <UART_sendByte>

			EEPROM_write_Password(pass1);      /*Save password in EEPROM*/
    1422:	ce 01       	movw	r24, r28
    1424:	88 5a       	subi	r24, 0xA8	; 168
    1426:	9f 4f       	sbci	r25, 0xFF	; 255
    1428:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <EEPROM_write_Password>

			EEPROM_read_Password(savedPass);   /*Read saved password from EEPROM and store it in another variable*/
    142c:	ce 01       	movw	r24, r28
    142e:	8c 59       	subi	r24, 0x9C	; 156
    1430:	9f 4f       	sbci	r25, 0xFF	; 255
    1432:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <EEPROM_read_Password>

			/*Start the system main options*/

			while(1)
			{
				while(UART_receiveByte()!= READY);  /*Wait until HMI_ECU send the password*/
    1436:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <UART_receiveByte>
    143a:	81 30       	cpi	r24, 0x01	; 1
    143c:	e1 f7       	brne	.-8      	; 0x1436 <main+0x502>

				receivedByte = UART_receiveByte();  /*Receive the option step*/
    143e:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <UART_receiveByte>
    1442:	fe 01       	movw	r30, r28
    1444:	ea 5a       	subi	r30, 0xAA	; 170
    1446:	ff 4f       	sbci	r31, 0xFF	; 255
    1448:	80 83       	st	Z, r24

				if(receivedByte == OPEN_DOOR)
    144a:	fe 01       	movw	r30, r28
    144c:	ea 5a       	subi	r30, 0xAA	; 170
    144e:	ff 4f       	sbci	r31, 0xFF	; 255
    1450:	80 81       	ld	r24, Z
    1452:	84 30       	cpi	r24, 0x04	; 4
    1454:	09 f0       	breq	.+2      	; 0x1458 <main+0x524>
    1456:	24 c2       	rjmp	.+1096   	; 0x18a0 <main+0x96c>
				{
					/*Receive the password and compare it with one saved in EEPROM*/
					UART_receiveString(pass1);
    1458:	ce 01       	movw	r24, r28
    145a:	88 5a       	subi	r24, 0xA8	; 168
    145c:	9f 4f       	sbci	r25, 0xFF	; 255
    145e:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <UART_receiveString>

					check = check_createdPassword(pass1,savedPass);
    1462:	ce 01       	movw	r24, r28
    1464:	88 5a       	subi	r24, 0xA8	; 168
    1466:	9f 4f       	sbci	r25, 0xFF	; 255
    1468:	9e 01       	movw	r18, r28
    146a:	2c 59       	subi	r18, 0x9C	; 156
    146c:	3f 4f       	sbci	r19, 0xFF	; 255
    146e:	b9 01       	movw	r22, r18
    1470:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <check_createdPassword>
    1474:	fe 01       	movw	r30, r28
    1476:	e9 5a       	subi	r30, 0xA9	; 169
    1478:	ff 4f       	sbci	r31, 0xFF	; 255
    147a:	80 83       	st	Z, r24

					if(check == INCORRECT_PASS)
    147c:	fe 01       	movw	r30, r28
    147e:	e9 5a       	subi	r30, 0xA9	; 169
    1480:	ff 4f       	sbci	r31, 0xFF	; 255
    1482:	80 81       	ld	r24, Z
    1484:	83 30       	cpi	r24, 0x03	; 3
    1486:	81 f4       	brne	.+32     	; 0x14a8 <main+0x574>
					{
						trials++;						/*Increament the incorrect trials*/
    1488:	de 01       	movw	r26, r28
    148a:	ab 5a       	subi	r26, 0xAB	; 171
    148c:	bf 4f       	sbci	r27, 0xFF	; 255
    148e:	fe 01       	movw	r30, r28
    1490:	eb 5a       	subi	r30, 0xAB	; 171
    1492:	ff 4f       	sbci	r31, 0xFF	; 255
    1494:	80 81       	ld	r24, Z
    1496:	8f 5f       	subi	r24, 0xFF	; 255
    1498:	8c 93       	st	X, r24
						UART_sendByte(READY);
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	0e 94 38 15 	call	0x2a70	; 0x2a70 <UART_sendByte>
						UART_sendByte(INCORRECT_PASS);	 /*Send to HMI_ECU the that password is incorrect*/
    14a0:	83 e0       	ldi	r24, 0x03	; 3
    14a2:	0e 94 38 15 	call	0x2a70	; 0x2a70 <UART_sendByte>
    14a6:	c7 cf       	rjmp	.-114    	; 0x1436 <main+0x502>

						continue;
					}
					else if(check == CORRECT_PASS)
    14a8:	fe 01       	movw	r30, r28
    14aa:	e9 5a       	subi	r30, 0xA9	; 169
    14ac:	ff 4f       	sbci	r31, 0xFF	; 255
    14ae:	80 81       	ld	r24, Z
    14b0:	82 30       	cpi	r24, 0x02	; 2
    14b2:	09 f6       	brne	.-126    	; 0x1436 <main+0x502>
						trials = 0;   /*Reset the incorrect trials*/
						while(UART_receiveByte() != CONTINUE);
#endif

                        /* code using delay function */
						UART_sendByte(READY);
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	0e 94 38 15 	call	0x2a70	; 0x2a70 <UART_sendByte>
						UART_sendByte(CORRECT_PASS);  /*Send to HMI_ECU the that password is correct*/
    14ba:	82 e0       	ldi	r24, 0x02	; 2
    14bc:	0e 94 38 15 	call	0x2a70	; 0x2a70 <UART_sendByte>

						UART_sendByte(OPEN_DOOR);
    14c0:	84 e0       	ldi	r24, 0x04	; 4
    14c2:	0e 94 38 15 	call	0x2a70	; 0x2a70 <UART_sendByte>

						DcMotor_rotate(CLOCK_WISE,100);
    14c6:	81 e0       	ldi	r24, 0x01	; 1
    14c8:	64 e6       	ldi	r22, 0x64	; 100
    14ca:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <DcMotor_rotate>
    14ce:	80 e0       	ldi	r24, 0x00	; 0
    14d0:	90 e6       	ldi	r25, 0x60	; 96
    14d2:	aa e6       	ldi	r26, 0x6A	; 106
    14d4:	b6 e4       	ldi	r27, 0x46	; 70
    14d6:	8d ab       	std	Y+53, r24	; 0x35
    14d8:	9e ab       	std	Y+54, r25	; 0x36
    14da:	af ab       	std	Y+55, r26	; 0x37
    14dc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14de:	6d a9       	ldd	r22, Y+53	; 0x35
    14e0:	7e a9       	ldd	r23, Y+54	; 0x36
    14e2:	8f a9       	ldd	r24, Y+55	; 0x37
    14e4:	98 ad       	ldd	r25, Y+56	; 0x38
    14e6:	20 e0       	ldi	r18, 0x00	; 0
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	4a ef       	ldi	r20, 0xFA	; 250
    14ec:	54 e4       	ldi	r21, 0x44	; 68
    14ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14f2:	dc 01       	movw	r26, r24
    14f4:	cb 01       	movw	r24, r22
    14f6:	89 ab       	std	Y+49, r24	; 0x31
    14f8:	9a ab       	std	Y+50, r25	; 0x32
    14fa:	ab ab       	std	Y+51, r26	; 0x33
    14fc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    14fe:	69 a9       	ldd	r22, Y+49	; 0x31
    1500:	7a a9       	ldd	r23, Y+50	; 0x32
    1502:	8b a9       	ldd	r24, Y+51	; 0x33
    1504:	9c a9       	ldd	r25, Y+52	; 0x34
    1506:	20 e0       	ldi	r18, 0x00	; 0
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	40 e8       	ldi	r20, 0x80	; 128
    150c:	5f e3       	ldi	r21, 0x3F	; 63
    150e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1512:	88 23       	and	r24, r24
    1514:	2c f4       	brge	.+10     	; 0x1520 <main+0x5ec>
		__ticks = 1;
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	98 ab       	std	Y+48, r25	; 0x30
    151c:	8f a7       	std	Y+47, r24	; 0x2f
    151e:	3f c0       	rjmp	.+126    	; 0x159e <main+0x66a>
	else if (__tmp > 65535)
    1520:	69 a9       	ldd	r22, Y+49	; 0x31
    1522:	7a a9       	ldd	r23, Y+50	; 0x32
    1524:	8b a9       	ldd	r24, Y+51	; 0x33
    1526:	9c a9       	ldd	r25, Y+52	; 0x34
    1528:	20 e0       	ldi	r18, 0x00	; 0
    152a:	3f ef       	ldi	r19, 0xFF	; 255
    152c:	4f e7       	ldi	r20, 0x7F	; 127
    152e:	57 e4       	ldi	r21, 0x47	; 71
    1530:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1534:	18 16       	cp	r1, r24
    1536:	4c f5       	brge	.+82     	; 0x158a <main+0x656>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1538:	6d a9       	ldd	r22, Y+53	; 0x35
    153a:	7e a9       	ldd	r23, Y+54	; 0x36
    153c:	8f a9       	ldd	r24, Y+55	; 0x37
    153e:	98 ad       	ldd	r25, Y+56	; 0x38
    1540:	20 e0       	ldi	r18, 0x00	; 0
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	40 e2       	ldi	r20, 0x20	; 32
    1546:	51 e4       	ldi	r21, 0x41	; 65
    1548:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    154c:	dc 01       	movw	r26, r24
    154e:	cb 01       	movw	r24, r22
    1550:	bc 01       	movw	r22, r24
    1552:	cd 01       	movw	r24, r26
    1554:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1558:	dc 01       	movw	r26, r24
    155a:	cb 01       	movw	r24, r22
    155c:	98 ab       	std	Y+48, r25	; 0x30
    155e:	8f a7       	std	Y+47, r24	; 0x2f
    1560:	0f c0       	rjmp	.+30     	; 0x1580 <main+0x64c>
    1562:	88 ec       	ldi	r24, 0xC8	; 200
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	9e a7       	std	Y+46, r25	; 0x2e
    1568:	8d a7       	std	Y+45, r24	; 0x2d
    156a:	8d a5       	ldd	r24, Y+45	; 0x2d
    156c:	9e a5       	ldd	r25, Y+46	; 0x2e
    156e:	01 97       	sbiw	r24, 0x01	; 1
    1570:	f1 f7       	brne	.-4      	; 0x156e <main+0x63a>
    1572:	9e a7       	std	Y+46, r25	; 0x2e
    1574:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1576:	8f a5       	ldd	r24, Y+47	; 0x2f
    1578:	98 a9       	ldd	r25, Y+48	; 0x30
    157a:	01 97       	sbiw	r24, 0x01	; 1
    157c:	98 ab       	std	Y+48, r25	; 0x30
    157e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1580:	8f a5       	ldd	r24, Y+47	; 0x2f
    1582:	98 a9       	ldd	r25, Y+48	; 0x30
    1584:	00 97       	sbiw	r24, 0x00	; 0
    1586:	69 f7       	brne	.-38     	; 0x1562 <main+0x62e>
    1588:	14 c0       	rjmp	.+40     	; 0x15b2 <main+0x67e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    158a:	69 a9       	ldd	r22, Y+49	; 0x31
    158c:	7a a9       	ldd	r23, Y+50	; 0x32
    158e:	8b a9       	ldd	r24, Y+51	; 0x33
    1590:	9c a9       	ldd	r25, Y+52	; 0x34
    1592:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1596:	dc 01       	movw	r26, r24
    1598:	cb 01       	movw	r24, r22
    159a:	98 ab       	std	Y+48, r25	; 0x30
    159c:	8f a7       	std	Y+47, r24	; 0x2f
    159e:	8f a5       	ldd	r24, Y+47	; 0x2f
    15a0:	98 a9       	ldd	r25, Y+48	; 0x30
    15a2:	9c a7       	std	Y+44, r25	; 0x2c
    15a4:	8b a7       	std	Y+43, r24	; 0x2b
    15a6:	8b a5       	ldd	r24, Y+43	; 0x2b
    15a8:	9c a5       	ldd	r25, Y+44	; 0x2c
    15aa:	01 97       	sbiw	r24, 0x01	; 1
    15ac:	f1 f7       	brne	.-4      	; 0x15aa <main+0x676>
    15ae:	9c a7       	std	Y+44, r25	; 0x2c
    15b0:	8b a7       	std	Y+43, r24	; 0x2b

						_delay_ms(15000);

						UART_sendByte(READY);
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	0e 94 38 15 	call	0x2a70	; 0x2a70 <UART_sendByte>

						DcMotor_rotate(STOP,100);
    15b8:	80 e0       	ldi	r24, 0x00	; 0
    15ba:	64 e6       	ldi	r22, 0x64	; 100
    15bc:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <DcMotor_rotate>
    15c0:	80 e0       	ldi	r24, 0x00	; 0
    15c2:	90 e8       	ldi	r25, 0x80	; 128
    15c4:	ab e3       	ldi	r26, 0x3B	; 59
    15c6:	b5 e4       	ldi	r27, 0x45	; 69
    15c8:	8f a3       	std	Y+39, r24	; 0x27
    15ca:	98 a7       	std	Y+40, r25	; 0x28
    15cc:	a9 a7       	std	Y+41, r26	; 0x29
    15ce:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15d0:	6f a1       	ldd	r22, Y+39	; 0x27
    15d2:	78 a5       	ldd	r23, Y+40	; 0x28
    15d4:	89 a5       	ldd	r24, Y+41	; 0x29
    15d6:	9a a5       	ldd	r25, Y+42	; 0x2a
    15d8:	20 e0       	ldi	r18, 0x00	; 0
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	4a ef       	ldi	r20, 0xFA	; 250
    15de:	54 e4       	ldi	r21, 0x44	; 68
    15e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15e4:	dc 01       	movw	r26, r24
    15e6:	cb 01       	movw	r24, r22
    15e8:	8b a3       	std	Y+35, r24	; 0x23
    15ea:	9c a3       	std	Y+36, r25	; 0x24
    15ec:	ad a3       	std	Y+37, r26	; 0x25
    15ee:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    15f0:	6b a1       	ldd	r22, Y+35	; 0x23
    15f2:	7c a1       	ldd	r23, Y+36	; 0x24
    15f4:	8d a1       	ldd	r24, Y+37	; 0x25
    15f6:	9e a1       	ldd	r25, Y+38	; 0x26
    15f8:	20 e0       	ldi	r18, 0x00	; 0
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	40 e8       	ldi	r20, 0x80	; 128
    15fe:	5f e3       	ldi	r21, 0x3F	; 63
    1600:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1604:	88 23       	and	r24, r24
    1606:	2c f4       	brge	.+10     	; 0x1612 <main+0x6de>
		__ticks = 1;
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	9a a3       	std	Y+34, r25	; 0x22
    160e:	89 a3       	std	Y+33, r24	; 0x21
    1610:	3f c0       	rjmp	.+126    	; 0x1690 <main+0x75c>
	else if (__tmp > 65535)
    1612:	6b a1       	ldd	r22, Y+35	; 0x23
    1614:	7c a1       	ldd	r23, Y+36	; 0x24
    1616:	8d a1       	ldd	r24, Y+37	; 0x25
    1618:	9e a1       	ldd	r25, Y+38	; 0x26
    161a:	20 e0       	ldi	r18, 0x00	; 0
    161c:	3f ef       	ldi	r19, 0xFF	; 255
    161e:	4f e7       	ldi	r20, 0x7F	; 127
    1620:	57 e4       	ldi	r21, 0x47	; 71
    1622:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1626:	18 16       	cp	r1, r24
    1628:	4c f5       	brge	.+82     	; 0x167c <main+0x748>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    162a:	6f a1       	ldd	r22, Y+39	; 0x27
    162c:	78 a5       	ldd	r23, Y+40	; 0x28
    162e:	89 a5       	ldd	r24, Y+41	; 0x29
    1630:	9a a5       	ldd	r25, Y+42	; 0x2a
    1632:	20 e0       	ldi	r18, 0x00	; 0
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	40 e2       	ldi	r20, 0x20	; 32
    1638:	51 e4       	ldi	r21, 0x41	; 65
    163a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    163e:	dc 01       	movw	r26, r24
    1640:	cb 01       	movw	r24, r22
    1642:	bc 01       	movw	r22, r24
    1644:	cd 01       	movw	r24, r26
    1646:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    164a:	dc 01       	movw	r26, r24
    164c:	cb 01       	movw	r24, r22
    164e:	9a a3       	std	Y+34, r25	; 0x22
    1650:	89 a3       	std	Y+33, r24	; 0x21
    1652:	0f c0       	rjmp	.+30     	; 0x1672 <main+0x73e>
    1654:	88 ec       	ldi	r24, 0xC8	; 200
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	98 a3       	std	Y+32, r25	; 0x20
    165a:	8f 8f       	std	Y+31, r24	; 0x1f
    165c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    165e:	98 a1       	ldd	r25, Y+32	; 0x20
    1660:	01 97       	sbiw	r24, 0x01	; 1
    1662:	f1 f7       	brne	.-4      	; 0x1660 <main+0x72c>
    1664:	98 a3       	std	Y+32, r25	; 0x20
    1666:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1668:	89 a1       	ldd	r24, Y+33	; 0x21
    166a:	9a a1       	ldd	r25, Y+34	; 0x22
    166c:	01 97       	sbiw	r24, 0x01	; 1
    166e:	9a a3       	std	Y+34, r25	; 0x22
    1670:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1672:	89 a1       	ldd	r24, Y+33	; 0x21
    1674:	9a a1       	ldd	r25, Y+34	; 0x22
    1676:	00 97       	sbiw	r24, 0x00	; 0
    1678:	69 f7       	brne	.-38     	; 0x1654 <main+0x720>
    167a:	14 c0       	rjmp	.+40     	; 0x16a4 <main+0x770>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    167c:	6b a1       	ldd	r22, Y+35	; 0x23
    167e:	7c a1       	ldd	r23, Y+36	; 0x24
    1680:	8d a1       	ldd	r24, Y+37	; 0x25
    1682:	9e a1       	ldd	r25, Y+38	; 0x26
    1684:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1688:	dc 01       	movw	r26, r24
    168a:	cb 01       	movw	r24, r22
    168c:	9a a3       	std	Y+34, r25	; 0x22
    168e:	89 a3       	std	Y+33, r24	; 0x21
    1690:	89 a1       	ldd	r24, Y+33	; 0x21
    1692:	9a a1       	ldd	r25, Y+34	; 0x22
    1694:	9e 8f       	std	Y+30, r25	; 0x1e
    1696:	8d 8f       	std	Y+29, r24	; 0x1d
    1698:	8d 8d       	ldd	r24, Y+29	; 0x1d
    169a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    169c:	01 97       	sbiw	r24, 0x01	; 1
    169e:	f1 f7       	brne	.-4      	; 0x169c <main+0x768>
    16a0:	9e 8f       	std	Y+30, r25	; 0x1e
    16a2:	8d 8f       	std	Y+29, r24	; 0x1d
						_delay_ms(3000);

						UART_sendByte(READY);
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	0e 94 38 15 	call	0x2a70	; 0x2a70 <UART_sendByte>

						DcMotor_rotate(ANTI_CLOCK_WISE,100);
    16aa:	82 e0       	ldi	r24, 0x02	; 2
    16ac:	64 e6       	ldi	r22, 0x64	; 100
    16ae:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <DcMotor_rotate>
    16b2:	80 e0       	ldi	r24, 0x00	; 0
    16b4:	90 e6       	ldi	r25, 0x60	; 96
    16b6:	aa e6       	ldi	r26, 0x6A	; 106
    16b8:	b6 e4       	ldi	r27, 0x46	; 70
    16ba:	89 8f       	std	Y+25, r24	; 0x19
    16bc:	9a 8f       	std	Y+26, r25	; 0x1a
    16be:	ab 8f       	std	Y+27, r26	; 0x1b
    16c0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16c2:	69 8d       	ldd	r22, Y+25	; 0x19
    16c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16ca:	20 e0       	ldi	r18, 0x00	; 0
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	4a ef       	ldi	r20, 0xFA	; 250
    16d0:	54 e4       	ldi	r21, 0x44	; 68
    16d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16d6:	dc 01       	movw	r26, r24
    16d8:	cb 01       	movw	r24, r22
    16da:	8d 8b       	std	Y+21, r24	; 0x15
    16dc:	9e 8b       	std	Y+22, r25	; 0x16
    16de:	af 8b       	std	Y+23, r26	; 0x17
    16e0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    16e2:	6d 89       	ldd	r22, Y+21	; 0x15
    16e4:	7e 89       	ldd	r23, Y+22	; 0x16
    16e6:	8f 89       	ldd	r24, Y+23	; 0x17
    16e8:	98 8d       	ldd	r25, Y+24	; 0x18
    16ea:	20 e0       	ldi	r18, 0x00	; 0
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	40 e8       	ldi	r20, 0x80	; 128
    16f0:	5f e3       	ldi	r21, 0x3F	; 63
    16f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16f6:	88 23       	and	r24, r24
    16f8:	2c f4       	brge	.+10     	; 0x1704 <main+0x7d0>
		__ticks = 1;
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	9c 8b       	std	Y+20, r25	; 0x14
    1700:	8b 8b       	std	Y+19, r24	; 0x13
    1702:	3f c0       	rjmp	.+126    	; 0x1782 <main+0x84e>
	else if (__tmp > 65535)
    1704:	6d 89       	ldd	r22, Y+21	; 0x15
    1706:	7e 89       	ldd	r23, Y+22	; 0x16
    1708:	8f 89       	ldd	r24, Y+23	; 0x17
    170a:	98 8d       	ldd	r25, Y+24	; 0x18
    170c:	20 e0       	ldi	r18, 0x00	; 0
    170e:	3f ef       	ldi	r19, 0xFF	; 255
    1710:	4f e7       	ldi	r20, 0x7F	; 127
    1712:	57 e4       	ldi	r21, 0x47	; 71
    1714:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1718:	18 16       	cp	r1, r24
    171a:	4c f5       	brge	.+82     	; 0x176e <main+0x83a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    171c:	69 8d       	ldd	r22, Y+25	; 0x19
    171e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1720:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1722:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1724:	20 e0       	ldi	r18, 0x00	; 0
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	40 e2       	ldi	r20, 0x20	; 32
    172a:	51 e4       	ldi	r21, 0x41	; 65
    172c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1730:	dc 01       	movw	r26, r24
    1732:	cb 01       	movw	r24, r22
    1734:	bc 01       	movw	r22, r24
    1736:	cd 01       	movw	r24, r26
    1738:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    173c:	dc 01       	movw	r26, r24
    173e:	cb 01       	movw	r24, r22
    1740:	9c 8b       	std	Y+20, r25	; 0x14
    1742:	8b 8b       	std	Y+19, r24	; 0x13
    1744:	0f c0       	rjmp	.+30     	; 0x1764 <main+0x830>
    1746:	88 ec       	ldi	r24, 0xC8	; 200
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	9a 8b       	std	Y+18, r25	; 0x12
    174c:	89 8b       	std	Y+17, r24	; 0x11
    174e:	89 89       	ldd	r24, Y+17	; 0x11
    1750:	9a 89       	ldd	r25, Y+18	; 0x12
    1752:	01 97       	sbiw	r24, 0x01	; 1
    1754:	f1 f7       	brne	.-4      	; 0x1752 <main+0x81e>
    1756:	9a 8b       	std	Y+18, r25	; 0x12
    1758:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    175a:	8b 89       	ldd	r24, Y+19	; 0x13
    175c:	9c 89       	ldd	r25, Y+20	; 0x14
    175e:	01 97       	sbiw	r24, 0x01	; 1
    1760:	9c 8b       	std	Y+20, r25	; 0x14
    1762:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1764:	8b 89       	ldd	r24, Y+19	; 0x13
    1766:	9c 89       	ldd	r25, Y+20	; 0x14
    1768:	00 97       	sbiw	r24, 0x00	; 0
    176a:	69 f7       	brne	.-38     	; 0x1746 <main+0x812>
    176c:	14 c0       	rjmp	.+40     	; 0x1796 <main+0x862>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    176e:	6d 89       	ldd	r22, Y+21	; 0x15
    1770:	7e 89       	ldd	r23, Y+22	; 0x16
    1772:	8f 89       	ldd	r24, Y+23	; 0x17
    1774:	98 8d       	ldd	r25, Y+24	; 0x18
    1776:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    177a:	dc 01       	movw	r26, r24
    177c:	cb 01       	movw	r24, r22
    177e:	9c 8b       	std	Y+20, r25	; 0x14
    1780:	8b 8b       	std	Y+19, r24	; 0x13
    1782:	8b 89       	ldd	r24, Y+19	; 0x13
    1784:	9c 89       	ldd	r25, Y+20	; 0x14
    1786:	98 8b       	std	Y+16, r25	; 0x10
    1788:	8f 87       	std	Y+15, r24	; 0x0f
    178a:	8f 85       	ldd	r24, Y+15	; 0x0f
    178c:	98 89       	ldd	r25, Y+16	; 0x10
    178e:	01 97       	sbiw	r24, 0x01	; 1
    1790:	f1 f7       	brne	.-4      	; 0x178e <main+0x85a>
    1792:	98 8b       	std	Y+16, r25	; 0x10
    1794:	8f 87       	std	Y+15, r24	; 0x0f
						_delay_ms(15000);

						UART_sendByte(READY);
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	0e 94 38 15 	call	0x2a70	; 0x2a70 <UART_sendByte>

						DcMotor_rotate(STOP,100);
    179c:	80 e0       	ldi	r24, 0x00	; 0
    179e:	64 e6       	ldi	r22, 0x64	; 100
    17a0:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <DcMotor_rotate>
    17a4:	80 e0       	ldi	r24, 0x00	; 0
    17a6:	90 e8       	ldi	r25, 0x80	; 128
    17a8:	ab e3       	ldi	r26, 0x3B	; 59
    17aa:	b5 e4       	ldi	r27, 0x45	; 69
    17ac:	8b 87       	std	Y+11, r24	; 0x0b
    17ae:	9c 87       	std	Y+12, r25	; 0x0c
    17b0:	ad 87       	std	Y+13, r26	; 0x0d
    17b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    17b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    17b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    17ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    17bc:	20 e0       	ldi	r18, 0x00	; 0
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	4a ef       	ldi	r20, 0xFA	; 250
    17c2:	54 e4       	ldi	r21, 0x44	; 68
    17c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17c8:	dc 01       	movw	r26, r24
    17ca:	cb 01       	movw	r24, r22
    17cc:	8f 83       	std	Y+7, r24	; 0x07
    17ce:	98 87       	std	Y+8, r25	; 0x08
    17d0:	a9 87       	std	Y+9, r26	; 0x09
    17d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17d4:	6f 81       	ldd	r22, Y+7	; 0x07
    17d6:	78 85       	ldd	r23, Y+8	; 0x08
    17d8:	89 85       	ldd	r24, Y+9	; 0x09
    17da:	9a 85       	ldd	r25, Y+10	; 0x0a
    17dc:	20 e0       	ldi	r18, 0x00	; 0
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	40 e8       	ldi	r20, 0x80	; 128
    17e2:	5f e3       	ldi	r21, 0x3F	; 63
    17e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17e8:	88 23       	and	r24, r24
    17ea:	2c f4       	brge	.+10     	; 0x17f6 <main+0x8c2>
		__ticks = 1;
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	9e 83       	std	Y+6, r25	; 0x06
    17f2:	8d 83       	std	Y+5, r24	; 0x05
    17f4:	3f c0       	rjmp	.+126    	; 0x1874 <main+0x940>
	else if (__tmp > 65535)
    17f6:	6f 81       	ldd	r22, Y+7	; 0x07
    17f8:	78 85       	ldd	r23, Y+8	; 0x08
    17fa:	89 85       	ldd	r24, Y+9	; 0x09
    17fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    17fe:	20 e0       	ldi	r18, 0x00	; 0
    1800:	3f ef       	ldi	r19, 0xFF	; 255
    1802:	4f e7       	ldi	r20, 0x7F	; 127
    1804:	57 e4       	ldi	r21, 0x47	; 71
    1806:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    180a:	18 16       	cp	r1, r24
    180c:	4c f5       	brge	.+82     	; 0x1860 <main+0x92c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    180e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1810:	7c 85       	ldd	r23, Y+12	; 0x0c
    1812:	8d 85       	ldd	r24, Y+13	; 0x0d
    1814:	9e 85       	ldd	r25, Y+14	; 0x0e
    1816:	20 e0       	ldi	r18, 0x00	; 0
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	40 e2       	ldi	r20, 0x20	; 32
    181c:	51 e4       	ldi	r21, 0x41	; 65
    181e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1822:	dc 01       	movw	r26, r24
    1824:	cb 01       	movw	r24, r22
    1826:	bc 01       	movw	r22, r24
    1828:	cd 01       	movw	r24, r26
    182a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    182e:	dc 01       	movw	r26, r24
    1830:	cb 01       	movw	r24, r22
    1832:	9e 83       	std	Y+6, r25	; 0x06
    1834:	8d 83       	std	Y+5, r24	; 0x05
    1836:	0f c0       	rjmp	.+30     	; 0x1856 <main+0x922>
    1838:	88 ec       	ldi	r24, 0xC8	; 200
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	9c 83       	std	Y+4, r25	; 0x04
    183e:	8b 83       	std	Y+3, r24	; 0x03
    1840:	8b 81       	ldd	r24, Y+3	; 0x03
    1842:	9c 81       	ldd	r25, Y+4	; 0x04
    1844:	01 97       	sbiw	r24, 0x01	; 1
    1846:	f1 f7       	brne	.-4      	; 0x1844 <main+0x910>
    1848:	9c 83       	std	Y+4, r25	; 0x04
    184a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    184c:	8d 81       	ldd	r24, Y+5	; 0x05
    184e:	9e 81       	ldd	r25, Y+6	; 0x06
    1850:	01 97       	sbiw	r24, 0x01	; 1
    1852:	9e 83       	std	Y+6, r25	; 0x06
    1854:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1856:	8d 81       	ldd	r24, Y+5	; 0x05
    1858:	9e 81       	ldd	r25, Y+6	; 0x06
    185a:	00 97       	sbiw	r24, 0x00	; 0
    185c:	69 f7       	brne	.-38     	; 0x1838 <main+0x904>
    185e:	14 c0       	rjmp	.+40     	; 0x1888 <main+0x954>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1860:	6f 81       	ldd	r22, Y+7	; 0x07
    1862:	78 85       	ldd	r23, Y+8	; 0x08
    1864:	89 85       	ldd	r24, Y+9	; 0x09
    1866:	9a 85       	ldd	r25, Y+10	; 0x0a
    1868:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    186c:	dc 01       	movw	r26, r24
    186e:	cb 01       	movw	r24, r22
    1870:	9e 83       	std	Y+6, r25	; 0x06
    1872:	8d 83       	std	Y+5, r24	; 0x05
    1874:	8d 81       	ldd	r24, Y+5	; 0x05
    1876:	9e 81       	ldd	r25, Y+6	; 0x06
    1878:	9a 83       	std	Y+2, r25	; 0x02
    187a:	89 83       	std	Y+1, r24	; 0x01
    187c:	89 81       	ldd	r24, Y+1	; 0x01
    187e:	9a 81       	ldd	r25, Y+2	; 0x02
    1880:	01 97       	sbiw	r24, 0x01	; 1
    1882:	f1 f7       	brne	.-4      	; 0x1880 <main+0x94c>
    1884:	9a 83       	std	Y+2, r25	; 0x02
    1886:	89 83       	std	Y+1, r24	; 0x01
						_delay_ms(3000);

						UART_sendByte(READY);
    1888:	81 e0       	ldi	r24, 0x01	; 1
    188a:	0e 94 38 15 	call	0x2a70	; 0x2a70 <UART_sendByte>

						trials = 0;   /*Reset the incorrect trials*/
    188e:	fe 01       	movw	r30, r28
    1890:	eb 5a       	subi	r30, 0xAB	; 171
    1892:	ff 4f       	sbci	r31, 0xFF	; 255
    1894:	10 82       	st	Z, r1

						while(UART_receiveByte() != CONTINUE);
    1896:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <UART_receiveByte>
    189a:	86 30       	cpi	r24, 0x06	; 6
    189c:	e1 f7       	brne	.-8      	; 0x1896 <main+0x962>
    189e:	cb cd       	rjmp	.-1130   	; 0x1436 <main+0x502>
					}
				}

				else if(receivedByte == CHANGE_PASS)
    18a0:	fe 01       	movw	r30, r28
    18a2:	ea 5a       	subi	r30, 0xAA	; 170
    18a4:	ff 4f       	sbci	r31, 0xFF	; 255
    18a6:	80 81       	ld	r24, Z
    18a8:	85 30       	cpi	r24, 0x05	; 5
    18aa:	09 f0       	breq	.+2      	; 0x18ae <main+0x97a>
    18ac:	c4 cd       	rjmp	.-1144   	; 0x1436 <main+0x502>
				{
					/*Receive the password and compare it with one saved in EEPROM*/
					UART_receiveString(pass1);
    18ae:	ce 01       	movw	r24, r28
    18b0:	88 5a       	subi	r24, 0xA8	; 168
    18b2:	9f 4f       	sbci	r25, 0xFF	; 255
    18b4:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <UART_receiveString>

					check = check_createdPassword(pass1,savedPass);
    18b8:	ce 01       	movw	r24, r28
    18ba:	88 5a       	subi	r24, 0xA8	; 168
    18bc:	9f 4f       	sbci	r25, 0xFF	; 255
    18be:	9e 01       	movw	r18, r28
    18c0:	2c 59       	subi	r18, 0x9C	; 156
    18c2:	3f 4f       	sbci	r19, 0xFF	; 255
    18c4:	b9 01       	movw	r22, r18
    18c6:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <check_createdPassword>
    18ca:	fe 01       	movw	r30, r28
    18cc:	e9 5a       	subi	r30, 0xA9	; 169
    18ce:	ff 4f       	sbci	r31, 0xFF	; 255
    18d0:	80 83       	st	Z, r24

					if(check == INCORRECT_PASS)
    18d2:	fe 01       	movw	r30, r28
    18d4:	e9 5a       	subi	r30, 0xA9	; 169
    18d6:	ff 4f       	sbci	r31, 0xFF	; 255
    18d8:	80 81       	ld	r24, Z
    18da:	83 30       	cpi	r24, 0x03	; 3
    18dc:	81 f4       	brne	.+32     	; 0x18fe <main+0x9ca>
					{
						trials++;						/*Increament the incorrect trials*/
    18de:	de 01       	movw	r26, r28
    18e0:	ab 5a       	subi	r26, 0xAB	; 171
    18e2:	bf 4f       	sbci	r27, 0xFF	; 255
    18e4:	fe 01       	movw	r30, r28
    18e6:	eb 5a       	subi	r30, 0xAB	; 171
    18e8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ea:	80 81       	ld	r24, Z
    18ec:	8f 5f       	subi	r24, 0xFF	; 255
    18ee:	8c 93       	st	X, r24
						UART_sendByte(READY);
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	0e 94 38 15 	call	0x2a70	; 0x2a70 <UART_sendByte>
						UART_sendByte(INCORRECT_PASS);	 /*Send to HMI_ECU the that password is incorrect*/
    18f6:	83 e0       	ldi	r24, 0x03	; 3
    18f8:	0e 94 38 15 	call	0x2a70	; 0x2a70 <UART_sendByte>
    18fc:	9c cd       	rjmp	.-1224   	; 0x1436 <main+0x502>

						continue;
					}
					else if(check == CORRECT_PASS)
    18fe:	fe 01       	movw	r30, r28
    1900:	e9 5a       	subi	r30, 0xA9	; 169
    1902:	ff 4f       	sbci	r31, 0xFF	; 255
    1904:	80 81       	ld	r24, Z
    1906:	82 30       	cpi	r24, 0x02	; 2
    1908:	09 f0       	breq	.+2      	; 0x190c <main+0x9d8>
    190a:	95 cd       	rjmp	.-1238   	; 0x1436 <main+0x502>
					{
						trials = 0;
    190c:	fe 01       	movw	r30, r28
    190e:	eb 5a       	subi	r30, 0xAB	; 171
    1910:	ff 4f       	sbci	r31, 0xFF	; 255
    1912:	10 82       	st	Z, r1
						UART_sendByte(READY);
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	0e 94 38 15 	call	0x2a70	; 0x2a70 <UART_sendByte>
						UART_sendByte(CORRECT_PASS);	 /*Send to HMI_ECU the that password is correct*/
    191a:	82 e0       	ldi	r24, 0x02	; 2
    191c:	0e 94 38 15 	call	0x2a70	; 0x2a70 <UART_sendByte>
    1920:	04 cc       	rjmp	.-2040   	; 0x112a <main+0x1f6>

00001922 <BUZZER_init>:
 * Description:
 * Setup the direction for the buzzer pin as output pin.
 * Initially the buzzer is turned off.
 */
void BUZZER_init(void)
{
    1922:	df 93       	push	r29
    1924:	cf 93       	push	r28
    1926:	cd b7       	in	r28, 0x3d	; 61
    1928:	de b7       	in	r29, 0x3e	; 62
	/*Configure the buzzer pin as output pin*/
	GPIO_setupPinDirection(BUZZER_PORT_ID,BUZZER_PIN_ID,PIN_OUTPUT);
    192a:	83 e0       	ldi	r24, 0x03	; 3
    192c:	67 e0       	ldi	r22, 0x07	; 7
    192e:	41 e0       	ldi	r20, 0x01	; 1
    1930:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <GPIO_setupPinDirection>
	/*Turn off the buzzer*/
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
    1934:	83 e0       	ldi	r24, 0x03	; 3
    1936:	67 e0       	ldi	r22, 0x07	; 7
    1938:	40 e0       	ldi	r20, 0x00	; 0
    193a:	0e 94 25 10 	call	0x204a	; 0x204a <GPIO_writePin>
}
    193e:	cf 91       	pop	r28
    1940:	df 91       	pop	r29
    1942:	08 95       	ret

00001944 <BUZZER_on>:
/*
 * Description:
 * Enable the buzzer.
 */
void BUZZER_on(void)
{
    1944:	df 93       	push	r29
    1946:	cf 93       	push	r28
    1948:	cd b7       	in	r28, 0x3d	; 61
    194a:	de b7       	in	r29, 0x3e	; 62
	/*Turn on the buzzer*/
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_HIGH);
    194c:	83 e0       	ldi	r24, 0x03	; 3
    194e:	67 e0       	ldi	r22, 0x07	; 7
    1950:	41 e0       	ldi	r20, 0x01	; 1
    1952:	0e 94 25 10 	call	0x204a	; 0x204a <GPIO_writePin>
}
    1956:	cf 91       	pop	r28
    1958:	df 91       	pop	r29
    195a:	08 95       	ret

0000195c <BUZZER_off>:
/*
 * Description:
 * Disable the buzzer.
 */
void BUZZER_off(void)
{
    195c:	df 93       	push	r29
    195e:	cf 93       	push	r28
    1960:	cd b7       	in	r28, 0x3d	; 61
    1962:	de b7       	in	r29, 0x3e	; 62
	/*Turn off the buzzer*/
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
    1964:	83 e0       	ldi	r24, 0x03	; 3
    1966:	67 e0       	ldi	r22, 0x07	; 7
    1968:	40 e0       	ldi	r20, 0x00	; 0
    196a:	0e 94 25 10 	call	0x204a	; 0x204a <GPIO_writePin>

}
    196e:	cf 91       	pop	r28
    1970:	df 91       	pop	r29
    1972:	08 95       	ret

00001974 <DcMotor_init>:
 *Description:
 * The Function responsible for setup the direction for the two motor pins through the GPIO driver.
 * Stop the DC-Motor at the beginning through the GPIO driver.
 */
void DcMotor_init(void)
{
    1974:	df 93       	push	r29
    1976:	cf 93       	push	r28
    1978:	cd b7       	in	r28, 0x3d	; 61
    197a:	de b7       	in	r29, 0x3e	; 62
	/*Setup two pins of L293D chip as output pin (PB0,PB1)*/
	GPIO_setupPinDirection(L293D_CHIP_IN1_PORT_ID,L293D_CHIP_IN1_PIN_ID,PIN_OUTPUT);
    197c:	81 e0       	ldi	r24, 0x01	; 1
    197e:	60 e0       	ldi	r22, 0x00	; 0
    1980:	41 e0       	ldi	r20, 0x01	; 1
    1982:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(L293D_CHIP_IN2_PORT_ID,L293D_CHIP_IN2_PIN_ID,PIN_OUTPUT);
    1986:	81 e0       	ldi	r24, 0x01	; 1
    1988:	61 e0       	ldi	r22, 0x01	; 1
    198a:	41 e0       	ldi	r20, 0x01	; 1
    198c:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <GPIO_setupPinDirection>

	/*Initially stop the motor by writing logic low on two pins of L293D chip */
	GPIO_writePin(L293D_CHIP_IN1_PORT_ID,L293D_CHIP_IN1_PIN_ID,LOGIC_LOW);
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	60 e0       	ldi	r22, 0x00	; 0
    1994:	40 e0       	ldi	r20, 0x00	; 0
    1996:	0e 94 25 10 	call	0x204a	; 0x204a <GPIO_writePin>
	GPIO_writePin(L293D_CHIP_IN2_PORT_ID,L293D_CHIP_IN2_PIN_ID,LOGIC_LOW);
    199a:	81 e0       	ldi	r24, 0x01	; 1
    199c:	61 e0       	ldi	r22, 0x01	; 1
    199e:	40 e0       	ldi	r20, 0x00	; 0
    19a0:	0e 94 25 10 	call	0x204a	; 0x204a <GPIO_writePin>
}
    19a4:	cf 91       	pop	r28
    19a6:	df 91       	pop	r29
    19a8:	08 95       	ret

000019aa <DcMotor_rotate>:
 *Description:
 * The Function responsible for rotate the DC Motor CW/ or A-CW or stop the motor based on the state input state value.
 * Send the required duty cycle to the PWM driver based on the required speed value.
 */
void DcMotor_rotate(DcMotor_State a_state,uint8 a_speed)
{
    19aa:	df 93       	push	r29
    19ac:	cf 93       	push	r28
    19ae:	00 d0       	rcall	.+0      	; 0x19b0 <DcMotor_rotate+0x6>
    19b0:	00 d0       	rcall	.+0      	; 0x19b2 <DcMotor_rotate+0x8>
    19b2:	cd b7       	in	r28, 0x3d	; 61
    19b4:	de b7       	in	r29, 0x3e	; 62
    19b6:	89 83       	std	Y+1, r24	; 0x01
    19b8:	6a 83       	std	Y+2, r22	; 0x02
	/*Send the required duty cycle to the PWM driver to control the speed of motor rotation*/
	PWM_Timer0_Start(a_speed);
    19ba:	8a 81       	ldd	r24, Y+2	; 0x02
    19bc:	0e 94 91 12 	call	0x2522	; 0x2522 <PWM_Timer0_Start>
	 * Rotate the motor as required based on state value
	 * Stop => IN1=0,IN2=0
	 * Clockwise => IN1=0,IN2=1
	 * Anti-clockwise => IN1=1,IN2=0
	 */
	switch(a_state)
    19c0:	89 81       	ldd	r24, Y+1	; 0x01
    19c2:	28 2f       	mov	r18, r24
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	3c 83       	std	Y+4, r19	; 0x04
    19c8:	2b 83       	std	Y+3, r18	; 0x03
    19ca:	8b 81       	ldd	r24, Y+3	; 0x03
    19cc:	9c 81       	ldd	r25, Y+4	; 0x04
    19ce:	81 30       	cpi	r24, 0x01	; 1
    19d0:	91 05       	cpc	r25, r1
    19d2:	a1 f0       	breq	.+40     	; 0x19fc <DcMotor_rotate+0x52>
    19d4:	2b 81       	ldd	r18, Y+3	; 0x03
    19d6:	3c 81       	ldd	r19, Y+4	; 0x04
    19d8:	22 30       	cpi	r18, 0x02	; 2
    19da:	31 05       	cpc	r19, r1
    19dc:	d1 f0       	breq	.+52     	; 0x1a12 <DcMotor_rotate+0x68>
    19de:	8b 81       	ldd	r24, Y+3	; 0x03
    19e0:	9c 81       	ldd	r25, Y+4	; 0x04
    19e2:	00 97       	sbiw	r24, 0x00	; 0
    19e4:	01 f5       	brne	.+64     	; 0x1a26 <DcMotor_rotate+0x7c>
	{

	case STOP:
		GPIO_writePin(L293D_CHIP_IN1_PORT_ID,L293D_CHIP_IN1_PIN_ID,LOGIC_LOW);
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	60 e0       	ldi	r22, 0x00	; 0
    19ea:	40 e0       	ldi	r20, 0x00	; 0
    19ec:	0e 94 25 10 	call	0x204a	; 0x204a <GPIO_writePin>
		GPIO_writePin(L293D_CHIP_IN2_PORT_ID,L293D_CHIP_IN2_PIN_ID,LOGIC_LOW);
    19f0:	81 e0       	ldi	r24, 0x01	; 1
    19f2:	61 e0       	ldi	r22, 0x01	; 1
    19f4:	40 e0       	ldi	r20, 0x00	; 0
    19f6:	0e 94 25 10 	call	0x204a	; 0x204a <GPIO_writePin>
    19fa:	15 c0       	rjmp	.+42     	; 0x1a26 <DcMotor_rotate+0x7c>
		break;

	case CLOCK_WISE:
		GPIO_writePin(L293D_CHIP_IN1_PORT_ID,L293D_CHIP_IN1_PIN_ID,LOGIC_LOW);
    19fc:	81 e0       	ldi	r24, 0x01	; 1
    19fe:	60 e0       	ldi	r22, 0x00	; 0
    1a00:	40 e0       	ldi	r20, 0x00	; 0
    1a02:	0e 94 25 10 	call	0x204a	; 0x204a <GPIO_writePin>
		GPIO_writePin(L293D_CHIP_IN2_PORT_ID,L293D_CHIP_IN2_PIN_ID,LOGIC_HIGH);
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	61 e0       	ldi	r22, 0x01	; 1
    1a0a:	41 e0       	ldi	r20, 0x01	; 1
    1a0c:	0e 94 25 10 	call	0x204a	; 0x204a <GPIO_writePin>
    1a10:	0a c0       	rjmp	.+20     	; 0x1a26 <DcMotor_rotate+0x7c>
		break;

	case ANTI_CLOCK_WISE:
			GPIO_writePin(L293D_CHIP_IN1_PORT_ID,L293D_CHIP_IN1_PIN_ID,LOGIC_HIGH);
    1a12:	81 e0       	ldi	r24, 0x01	; 1
    1a14:	60 e0       	ldi	r22, 0x00	; 0
    1a16:	41 e0       	ldi	r20, 0x01	; 1
    1a18:	0e 94 25 10 	call	0x204a	; 0x204a <GPIO_writePin>
			GPIO_writePin(L293D_CHIP_IN2_PORT_ID,L293D_CHIP_IN2_PIN_ID,LOGIC_LOW);
    1a1c:	81 e0       	ldi	r24, 0x01	; 1
    1a1e:	61 e0       	ldi	r22, 0x01	; 1
    1a20:	40 e0       	ldi	r20, 0x00	; 0
    1a22:	0e 94 25 10 	call	0x204a	; 0x204a <GPIO_writePin>
			break;
	}
}
    1a26:	0f 90       	pop	r0
    1a28:	0f 90       	pop	r0
    1a2a:	0f 90       	pop	r0
    1a2c:	0f 90       	pop	r0
    1a2e:	cf 91       	pop	r28
    1a30:	df 91       	pop	r29
    1a32:	08 95       	ret

00001a34 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1a34:	df 93       	push	r29
    1a36:	cf 93       	push	r28
    1a38:	00 d0       	rcall	.+0      	; 0x1a3a <EEPROM_writeByte+0x6>
    1a3a:	00 d0       	rcall	.+0      	; 0x1a3c <EEPROM_writeByte+0x8>
    1a3c:	cd b7       	in	r28, 0x3d	; 61
    1a3e:	de b7       	in	r29, 0x3e	; 62
    1a40:	9a 83       	std	Y+2, r25	; 0x02
    1a42:	89 83       	std	Y+1, r24	; 0x01
    1a44:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1a46:	0e 94 3d 14 	call	0x287a	; 0x287a <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1a4a:	0e 94 95 14 	call	0x292a	; 0x292a <TWI_getStatus>
    1a4e:	88 30       	cpi	r24, 0x08	; 8
    1a50:	11 f0       	breq	.+4      	; 0x1a56 <EEPROM_writeByte+0x22>
        return ERROR;
    1a52:	1c 82       	std	Y+4, r1	; 0x04
    1a54:	28 c0       	rjmp	.+80     	; 0x1aa6 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1a56:	89 81       	ldd	r24, Y+1	; 0x01
    1a58:	9a 81       	ldd	r25, Y+2	; 0x02
    1a5a:	80 70       	andi	r24, 0x00	; 0
    1a5c:	97 70       	andi	r25, 0x07	; 7
    1a5e:	88 0f       	add	r24, r24
    1a60:	89 2f       	mov	r24, r25
    1a62:	88 1f       	adc	r24, r24
    1a64:	99 0b       	sbc	r25, r25
    1a66:	91 95       	neg	r25
    1a68:	80 6a       	ori	r24, 0xA0	; 160
    1a6a:	0e 94 58 14 	call	0x28b0	; 0x28b0 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1a6e:	0e 94 95 14 	call	0x292a	; 0x292a <TWI_getStatus>
    1a72:	88 31       	cpi	r24, 0x18	; 24
    1a74:	11 f0       	breq	.+4      	; 0x1a7a <EEPROM_writeByte+0x46>
        return ERROR; 
    1a76:	1c 82       	std	Y+4, r1	; 0x04
    1a78:	16 c0       	rjmp	.+44     	; 0x1aa6 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1a7a:	89 81       	ldd	r24, Y+1	; 0x01
    1a7c:	0e 94 58 14 	call	0x28b0	; 0x28b0 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1a80:	0e 94 95 14 	call	0x292a	; 0x292a <TWI_getStatus>
    1a84:	88 32       	cpi	r24, 0x28	; 40
    1a86:	11 f0       	breq	.+4      	; 0x1a8c <EEPROM_writeByte+0x58>
        return ERROR;
    1a88:	1c 82       	std	Y+4, r1	; 0x04
    1a8a:	0d c0       	rjmp	.+26     	; 0x1aa6 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1a8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8e:	0e 94 58 14 	call	0x28b0	; 0x28b0 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1a92:	0e 94 95 14 	call	0x292a	; 0x292a <TWI_getStatus>
    1a96:	88 32       	cpi	r24, 0x28	; 40
    1a98:	11 f0       	breq	.+4      	; 0x1a9e <EEPROM_writeByte+0x6a>
        return ERROR;
    1a9a:	1c 82       	std	Y+4, r1	; 0x04
    1a9c:	04 c0       	rjmp	.+8      	; 0x1aa6 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1a9e:	0e 94 4d 14 	call	0x289a	; 0x289a <TWI_stop>
	
    return SUCCESS;
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	8c 83       	std	Y+4, r24	; 0x04
    1aa6:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1aa8:	0f 90       	pop	r0
    1aaa:	0f 90       	pop	r0
    1aac:	0f 90       	pop	r0
    1aae:	0f 90       	pop	r0
    1ab0:	cf 91       	pop	r28
    1ab2:	df 91       	pop	r29
    1ab4:	08 95       	ret

00001ab6 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1ab6:	df 93       	push	r29
    1ab8:	cf 93       	push	r28
    1aba:	00 d0       	rcall	.+0      	; 0x1abc <EEPROM_readByte+0x6>
    1abc:	00 d0       	rcall	.+0      	; 0x1abe <EEPROM_readByte+0x8>
    1abe:	0f 92       	push	r0
    1ac0:	cd b7       	in	r28, 0x3d	; 61
    1ac2:	de b7       	in	r29, 0x3e	; 62
    1ac4:	9a 83       	std	Y+2, r25	; 0x02
    1ac6:	89 83       	std	Y+1, r24	; 0x01
    1ac8:	7c 83       	std	Y+4, r23	; 0x04
    1aca:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1acc:	0e 94 3d 14 	call	0x287a	; 0x287a <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1ad0:	0e 94 95 14 	call	0x292a	; 0x292a <TWI_getStatus>
    1ad4:	88 30       	cpi	r24, 0x08	; 8
    1ad6:	11 f0       	breq	.+4      	; 0x1adc <EEPROM_readByte+0x26>
        return ERROR;
    1ad8:	1d 82       	std	Y+5, r1	; 0x05
    1ada:	44 c0       	rjmp	.+136    	; 0x1b64 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1adc:	89 81       	ldd	r24, Y+1	; 0x01
    1ade:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae0:	80 70       	andi	r24, 0x00	; 0
    1ae2:	97 70       	andi	r25, 0x07	; 7
    1ae4:	88 0f       	add	r24, r24
    1ae6:	89 2f       	mov	r24, r25
    1ae8:	88 1f       	adc	r24, r24
    1aea:	99 0b       	sbc	r25, r25
    1aec:	91 95       	neg	r25
    1aee:	80 6a       	ori	r24, 0xA0	; 160
    1af0:	0e 94 58 14 	call	0x28b0	; 0x28b0 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1af4:	0e 94 95 14 	call	0x292a	; 0x292a <TWI_getStatus>
    1af8:	88 31       	cpi	r24, 0x18	; 24
    1afa:	11 f0       	breq	.+4      	; 0x1b00 <EEPROM_readByte+0x4a>
        return ERROR;
    1afc:	1d 82       	std	Y+5, r1	; 0x05
    1afe:	32 c0       	rjmp	.+100    	; 0x1b64 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1b00:	89 81       	ldd	r24, Y+1	; 0x01
    1b02:	0e 94 58 14 	call	0x28b0	; 0x28b0 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1b06:	0e 94 95 14 	call	0x292a	; 0x292a <TWI_getStatus>
    1b0a:	88 32       	cpi	r24, 0x28	; 40
    1b0c:	11 f0       	breq	.+4      	; 0x1b12 <EEPROM_readByte+0x5c>
        return ERROR;
    1b0e:	1d 82       	std	Y+5, r1	; 0x05
    1b10:	29 c0       	rjmp	.+82     	; 0x1b64 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1b12:	0e 94 3d 14 	call	0x287a	; 0x287a <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1b16:	0e 94 95 14 	call	0x292a	; 0x292a <TWI_getStatus>
    1b1a:	80 31       	cpi	r24, 0x10	; 16
    1b1c:	11 f0       	breq	.+4      	; 0x1b22 <EEPROM_readByte+0x6c>
        return ERROR;
    1b1e:	1d 82       	std	Y+5, r1	; 0x05
    1b20:	21 c0       	rjmp	.+66     	; 0x1b64 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1b22:	89 81       	ldd	r24, Y+1	; 0x01
    1b24:	9a 81       	ldd	r25, Y+2	; 0x02
    1b26:	80 70       	andi	r24, 0x00	; 0
    1b28:	97 70       	andi	r25, 0x07	; 7
    1b2a:	88 0f       	add	r24, r24
    1b2c:	89 2f       	mov	r24, r25
    1b2e:	88 1f       	adc	r24, r24
    1b30:	99 0b       	sbc	r25, r25
    1b32:	91 95       	neg	r25
    1b34:	81 6a       	ori	r24, 0xA1	; 161
    1b36:	0e 94 58 14 	call	0x28b0	; 0x28b0 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1b3a:	0e 94 95 14 	call	0x292a	; 0x292a <TWI_getStatus>
    1b3e:	80 34       	cpi	r24, 0x40	; 64
    1b40:	11 f0       	breq	.+4      	; 0x1b46 <EEPROM_readByte+0x90>
        return ERROR;
    1b42:	1d 82       	std	Y+5, r1	; 0x05
    1b44:	0f c0       	rjmp	.+30     	; 0x1b64 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1b46:	0e 94 82 14 	call	0x2904	; 0x2904 <TWI_readByteWithNACK>
    1b4a:	eb 81       	ldd	r30, Y+3	; 0x03
    1b4c:	fc 81       	ldd	r31, Y+4	; 0x04
    1b4e:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1b50:	0e 94 95 14 	call	0x292a	; 0x292a <TWI_getStatus>
    1b54:	88 35       	cpi	r24, 0x58	; 88
    1b56:	11 f0       	breq	.+4      	; 0x1b5c <EEPROM_readByte+0xa6>
        return ERROR;
    1b58:	1d 82       	std	Y+5, r1	; 0x05
    1b5a:	04 c0       	rjmp	.+8      	; 0x1b64 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1b5c:	0e 94 4d 14 	call	0x289a	; 0x289a <TWI_stop>

    return SUCCESS;
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	8d 83       	std	Y+5, r24	; 0x05
    1b64:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1b66:	0f 90       	pop	r0
    1b68:	0f 90       	pop	r0
    1b6a:	0f 90       	pop	r0
    1b6c:	0f 90       	pop	r0
    1b6e:	0f 90       	pop	r0
    1b70:	cf 91       	pop	r28
    1b72:	df 91       	pop	r29
    1b74:	08 95       	ret

00001b76 <check_createdPassword>:
 * Description:
 * Function that takes two passwords.
 * Return byte that describe if password are correct or not.
 */
uint8 check_createdPassword(uint8 *a_str1,uint8 *a_str2)
{
    1b76:	df 93       	push	r29
    1b78:	cf 93       	push	r28
    1b7a:	00 d0       	rcall	.+0      	; 0x1b7c <check_createdPassword+0x6>
    1b7c:	00 d0       	rcall	.+0      	; 0x1b7e <check_createdPassword+0x8>
    1b7e:	00 d0       	rcall	.+0      	; 0x1b80 <check_createdPassword+0xa>
    1b80:	cd b7       	in	r28, 0x3d	; 61
    1b82:	de b7       	in	r29, 0x3e	; 62
    1b84:	9b 83       	std	Y+3, r25	; 0x03
    1b86:	8a 83       	std	Y+2, r24	; 0x02
    1b88:	7d 83       	std	Y+5, r23	; 0x05
    1b8a:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i =0;
    1b8c:	19 82       	std	Y+1, r1	; 0x01
	for(i=0;i<ARR_SIZE;i++)
    1b8e:	19 82       	std	Y+1, r1	; 0x01
    1b90:	1a c0       	rjmp	.+52     	; 0x1bc6 <check_createdPassword+0x50>
	{
		if(a_str1[i] != a_str2[i])
    1b92:	89 81       	ldd	r24, Y+1	; 0x01
    1b94:	28 2f       	mov	r18, r24
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b9c:	fc 01       	movw	r30, r24
    1b9e:	e2 0f       	add	r30, r18
    1ba0:	f3 1f       	adc	r31, r19
    1ba2:	40 81       	ld	r20, Z
    1ba4:	89 81       	ldd	r24, Y+1	; 0x01
    1ba6:	28 2f       	mov	r18, r24
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	8c 81       	ldd	r24, Y+4	; 0x04
    1bac:	9d 81       	ldd	r25, Y+5	; 0x05
    1bae:	fc 01       	movw	r30, r24
    1bb0:	e2 0f       	add	r30, r18
    1bb2:	f3 1f       	adc	r31, r19
    1bb4:	80 81       	ld	r24, Z
    1bb6:	48 17       	cp	r20, r24
    1bb8:	19 f0       	breq	.+6      	; 0x1bc0 <check_createdPassword+0x4a>
		{
			return INCORRECT_PASS;
    1bba:	83 e0       	ldi	r24, 0x03	; 3
    1bbc:	8e 83       	std	Y+6, r24	; 0x06
    1bbe:	08 c0       	rjmp	.+16     	; 0x1bd0 <check_createdPassword+0x5a>
 * Return byte that describe if password are correct or not.
 */
uint8 check_createdPassword(uint8 *a_str1,uint8 *a_str2)
{
	uint8 i =0;
	for(i=0;i<ARR_SIZE;i++)
    1bc0:	89 81       	ldd	r24, Y+1	; 0x01
    1bc2:	8f 5f       	subi	r24, 0xFF	; 255
    1bc4:	89 83       	std	Y+1, r24	; 0x01
    1bc6:	89 81       	ldd	r24, Y+1	; 0x01
    1bc8:	85 30       	cpi	r24, 0x05	; 5
    1bca:	18 f3       	brcs	.-58     	; 0x1b92 <check_createdPassword+0x1c>
		if(a_str1[i] != a_str2[i])
		{
			return INCORRECT_PASS;
		}
	}
	return CORRECT_PASS;
    1bcc:	82 e0       	ldi	r24, 0x02	; 2
    1bce:	8e 83       	std	Y+6, r24	; 0x06
    1bd0:	8e 81       	ldd	r24, Y+6	; 0x06

}
    1bd2:	26 96       	adiw	r28, 0x06	; 6
    1bd4:	0f b6       	in	r0, 0x3f	; 63
    1bd6:	f8 94       	cli
    1bd8:	de bf       	out	0x3e, r29	; 62
    1bda:	0f be       	out	0x3f, r0	; 63
    1bdc:	cd bf       	out	0x3d, r28	; 61
    1bde:	cf 91       	pop	r28
    1be0:	df 91       	pop	r29
    1be2:	08 95       	ret

00001be4 <EEPROM_write_Password>:
/*
 * Description:
 * Save the password in EEPROM.
 */
void EEPROM_write_Password(uint8 *a_str)
{
    1be4:	df 93       	push	r29
    1be6:	cf 93       	push	r28
    1be8:	cd b7       	in	r28, 0x3d	; 61
    1bea:	de b7       	in	r29, 0x3e	; 62
    1bec:	61 97       	sbiw	r28, 0x11	; 17
    1bee:	0f b6       	in	r0, 0x3f	; 63
    1bf0:	f8 94       	cli
    1bf2:	de bf       	out	0x3e, r29	; 62
    1bf4:	0f be       	out	0x3f, r0	; 63
    1bf6:	cd bf       	out	0x3d, r28	; 61
    1bf8:	99 8b       	std	Y+17, r25	; 0x11
    1bfa:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i;
	for(i=0;i<ARR_SIZE;i++)
    1bfc:	1f 86       	std	Y+15, r1	; 0x0f
    1bfe:	88 c0       	rjmp	.+272    	; 0x1d10 <EEPROM_write_Password+0x12c>
	{
		EEPROM_writeByte(0x0311+i,a_str[i]);
    1c00:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c02:	88 2f       	mov	r24, r24
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	8f 5e       	subi	r24, 0xEF	; 239
    1c08:	9c 4f       	sbci	r25, 0xFC	; 252
    1c0a:	ac 01       	movw	r20, r24
    1c0c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c0e:	28 2f       	mov	r18, r24
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	88 89       	ldd	r24, Y+16	; 0x10
    1c14:	99 89       	ldd	r25, Y+17	; 0x11
    1c16:	fc 01       	movw	r30, r24
    1c18:	e2 0f       	add	r30, r18
    1c1a:	f3 1f       	adc	r31, r19
    1c1c:	20 81       	ld	r18, Z
    1c1e:	ca 01       	movw	r24, r20
    1c20:	62 2f       	mov	r22, r18
    1c22:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <EEPROM_writeByte>
    1c26:	80 e0       	ldi	r24, 0x00	; 0
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	a8 ec       	ldi	r26, 0xC8	; 200
    1c2c:	b2 e4       	ldi	r27, 0x42	; 66
    1c2e:	8b 87       	std	Y+11, r24	; 0x0b
    1c30:	9c 87       	std	Y+12, r25	; 0x0c
    1c32:	ad 87       	std	Y+13, r26	; 0x0d
    1c34:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c36:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c38:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c3e:	20 e0       	ldi	r18, 0x00	; 0
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	4a ef       	ldi	r20, 0xFA	; 250
    1c44:	54 e4       	ldi	r21, 0x44	; 68
    1c46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c4a:	dc 01       	movw	r26, r24
    1c4c:	cb 01       	movw	r24, r22
    1c4e:	8f 83       	std	Y+7, r24	; 0x07
    1c50:	98 87       	std	Y+8, r25	; 0x08
    1c52:	a9 87       	std	Y+9, r26	; 0x09
    1c54:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c56:	6f 81       	ldd	r22, Y+7	; 0x07
    1c58:	78 85       	ldd	r23, Y+8	; 0x08
    1c5a:	89 85       	ldd	r24, Y+9	; 0x09
    1c5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c5e:	20 e0       	ldi	r18, 0x00	; 0
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	40 e8       	ldi	r20, 0x80	; 128
    1c64:	5f e3       	ldi	r21, 0x3F	; 63
    1c66:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c6a:	88 23       	and	r24, r24
    1c6c:	2c f4       	brge	.+10     	; 0x1c78 <EEPROM_write_Password+0x94>
		__ticks = 1;
    1c6e:	81 e0       	ldi	r24, 0x01	; 1
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	9e 83       	std	Y+6, r25	; 0x06
    1c74:	8d 83       	std	Y+5, r24	; 0x05
    1c76:	3f c0       	rjmp	.+126    	; 0x1cf6 <EEPROM_write_Password+0x112>
	else if (__tmp > 65535)
    1c78:	6f 81       	ldd	r22, Y+7	; 0x07
    1c7a:	78 85       	ldd	r23, Y+8	; 0x08
    1c7c:	89 85       	ldd	r24, Y+9	; 0x09
    1c7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c80:	20 e0       	ldi	r18, 0x00	; 0
    1c82:	3f ef       	ldi	r19, 0xFF	; 255
    1c84:	4f e7       	ldi	r20, 0x7F	; 127
    1c86:	57 e4       	ldi	r21, 0x47	; 71
    1c88:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c8c:	18 16       	cp	r1, r24
    1c8e:	4c f5       	brge	.+82     	; 0x1ce2 <EEPROM_write_Password+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c90:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c92:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c94:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c96:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c98:	20 e0       	ldi	r18, 0x00	; 0
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	40 e2       	ldi	r20, 0x20	; 32
    1c9e:	51 e4       	ldi	r21, 0x41	; 65
    1ca0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca4:	dc 01       	movw	r26, r24
    1ca6:	cb 01       	movw	r24, r22
    1ca8:	bc 01       	movw	r22, r24
    1caa:	cd 01       	movw	r24, r26
    1cac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cb0:	dc 01       	movw	r26, r24
    1cb2:	cb 01       	movw	r24, r22
    1cb4:	9e 83       	std	Y+6, r25	; 0x06
    1cb6:	8d 83       	std	Y+5, r24	; 0x05
    1cb8:	0f c0       	rjmp	.+30     	; 0x1cd8 <EEPROM_write_Password+0xf4>
    1cba:	88 ec       	ldi	r24, 0xC8	; 200
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	9c 83       	std	Y+4, r25	; 0x04
    1cc0:	8b 83       	std	Y+3, r24	; 0x03
    1cc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc6:	01 97       	sbiw	r24, 0x01	; 1
    1cc8:	f1 f7       	brne	.-4      	; 0x1cc6 <EEPROM_write_Password+0xe2>
    1cca:	9c 83       	std	Y+4, r25	; 0x04
    1ccc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cce:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd0:	9e 81       	ldd	r25, Y+6	; 0x06
    1cd2:	01 97       	sbiw	r24, 0x01	; 1
    1cd4:	9e 83       	std	Y+6, r25	; 0x06
    1cd6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cd8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cda:	9e 81       	ldd	r25, Y+6	; 0x06
    1cdc:	00 97       	sbiw	r24, 0x00	; 0
    1cde:	69 f7       	brne	.-38     	; 0x1cba <EEPROM_write_Password+0xd6>
    1ce0:	14 c0       	rjmp	.+40     	; 0x1d0a <EEPROM_write_Password+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ce2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ce4:	78 85       	ldd	r23, Y+8	; 0x08
    1ce6:	89 85       	ldd	r24, Y+9	; 0x09
    1ce8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cee:	dc 01       	movw	r26, r24
    1cf0:	cb 01       	movw	r24, r22
    1cf2:	9e 83       	std	Y+6, r25	; 0x06
    1cf4:	8d 83       	std	Y+5, r24	; 0x05
    1cf6:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf8:	9e 81       	ldd	r25, Y+6	; 0x06
    1cfa:	9a 83       	std	Y+2, r25	; 0x02
    1cfc:	89 83       	std	Y+1, r24	; 0x01
    1cfe:	89 81       	ldd	r24, Y+1	; 0x01
    1d00:	9a 81       	ldd	r25, Y+2	; 0x02
    1d02:	01 97       	sbiw	r24, 0x01	; 1
    1d04:	f1 f7       	brne	.-4      	; 0x1d02 <EEPROM_write_Password+0x11e>
    1d06:	9a 83       	std	Y+2, r25	; 0x02
    1d08:	89 83       	std	Y+1, r24	; 0x01
 * Save the password in EEPROM.
 */
void EEPROM_write_Password(uint8 *a_str)
{
	uint8 i;
	for(i=0;i<ARR_SIZE;i++)
    1d0a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d0c:	8f 5f       	subi	r24, 0xFF	; 255
    1d0e:	8f 87       	std	Y+15, r24	; 0x0f
    1d10:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d12:	85 30       	cpi	r24, 0x05	; 5
    1d14:	08 f4       	brcc	.+2      	; 0x1d18 <EEPROM_write_Password+0x134>
    1d16:	74 cf       	rjmp	.-280    	; 0x1c00 <EEPROM_write_Password+0x1c>
	{
		EEPROM_writeByte(0x0311+i,a_str[i]);
		_delay_ms(100);
	}
}
    1d18:	61 96       	adiw	r28, 0x11	; 17
    1d1a:	0f b6       	in	r0, 0x3f	; 63
    1d1c:	f8 94       	cli
    1d1e:	de bf       	out	0x3e, r29	; 62
    1d20:	0f be       	out	0x3f, r0	; 63
    1d22:	cd bf       	out	0x3d, r28	; 61
    1d24:	cf 91       	pop	r28
    1d26:	df 91       	pop	r29
    1d28:	08 95       	ret

00001d2a <EEPROM_read_Password>:
/*
 * Description:
 * Reads the password saved in EEPROM and returns it in an string.
 */
void EEPROM_read_Password(uint8 *a_str)
{
    1d2a:	df 93       	push	r29
    1d2c:	cf 93       	push	r28
    1d2e:	cd b7       	in	r28, 0x3d	; 61
    1d30:	de b7       	in	r29, 0x3e	; 62
    1d32:	62 97       	sbiw	r28, 0x12	; 18
    1d34:	0f b6       	in	r0, 0x3f	; 63
    1d36:	f8 94       	cli
    1d38:	de bf       	out	0x3e, r29	; 62
    1d3a:	0f be       	out	0x3f, r0	; 63
    1d3c:	cd bf       	out	0x3d, r28	; 61
    1d3e:	9a 8b       	std	Y+18, r25	; 0x12
    1d40:	89 8b       	std	Y+17, r24	; 0x11
	uint8 EEPROM_Read_Byte;
	uint8 i;
	for(i=0;i<ARR_SIZE;i++)
    1d42:	1f 86       	std	Y+15, r1	; 0x0f
    1d44:	8a c0       	rjmp	.+276    	; 0x1e5a <EEPROM_read_Password+0x130>
	{
		EEPROM_readByte(0x0311+i,&EEPROM_Read_Byte);
    1d46:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d48:	88 2f       	mov	r24, r24
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	8f 5e       	subi	r24, 0xEF	; 239
    1d4e:	9c 4f       	sbci	r25, 0xFC	; 252
    1d50:	9e 01       	movw	r18, r28
    1d52:	20 5f       	subi	r18, 0xF0	; 240
    1d54:	3f 4f       	sbci	r19, 0xFF	; 255
    1d56:	b9 01       	movw	r22, r18
    1d58:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <EEPROM_readByte>
		a_str[i]= EEPROM_Read_Byte;
    1d5c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d5e:	28 2f       	mov	r18, r24
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	89 89       	ldd	r24, Y+17	; 0x11
    1d64:	9a 89       	ldd	r25, Y+18	; 0x12
    1d66:	fc 01       	movw	r30, r24
    1d68:	e2 0f       	add	r30, r18
    1d6a:	f3 1f       	adc	r31, r19
    1d6c:	88 89       	ldd	r24, Y+16	; 0x10
    1d6e:	80 83       	st	Z, r24
    1d70:	80 e0       	ldi	r24, 0x00	; 0
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	a8 ec       	ldi	r26, 0xC8	; 200
    1d76:	b2 e4       	ldi	r27, 0x42	; 66
    1d78:	8b 87       	std	Y+11, r24	; 0x0b
    1d7a:	9c 87       	std	Y+12, r25	; 0x0c
    1d7c:	ad 87       	std	Y+13, r26	; 0x0d
    1d7e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d80:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d82:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d84:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d86:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d88:	20 e0       	ldi	r18, 0x00	; 0
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	4a ef       	ldi	r20, 0xFA	; 250
    1d8e:	54 e4       	ldi	r21, 0x44	; 68
    1d90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d94:	dc 01       	movw	r26, r24
    1d96:	cb 01       	movw	r24, r22
    1d98:	8f 83       	std	Y+7, r24	; 0x07
    1d9a:	98 87       	std	Y+8, r25	; 0x08
    1d9c:	a9 87       	std	Y+9, r26	; 0x09
    1d9e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1da0:	6f 81       	ldd	r22, Y+7	; 0x07
    1da2:	78 85       	ldd	r23, Y+8	; 0x08
    1da4:	89 85       	ldd	r24, Y+9	; 0x09
    1da6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da8:	20 e0       	ldi	r18, 0x00	; 0
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	40 e8       	ldi	r20, 0x80	; 128
    1dae:	5f e3       	ldi	r21, 0x3F	; 63
    1db0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1db4:	88 23       	and	r24, r24
    1db6:	2c f4       	brge	.+10     	; 0x1dc2 <EEPROM_read_Password+0x98>
		__ticks = 1;
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	9e 83       	std	Y+6, r25	; 0x06
    1dbe:	8d 83       	std	Y+5, r24	; 0x05
    1dc0:	3f c0       	rjmp	.+126    	; 0x1e40 <EEPROM_read_Password+0x116>
	else if (__tmp > 65535)
    1dc2:	6f 81       	ldd	r22, Y+7	; 0x07
    1dc4:	78 85       	ldd	r23, Y+8	; 0x08
    1dc6:	89 85       	ldd	r24, Y+9	; 0x09
    1dc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dca:	20 e0       	ldi	r18, 0x00	; 0
    1dcc:	3f ef       	ldi	r19, 0xFF	; 255
    1dce:	4f e7       	ldi	r20, 0x7F	; 127
    1dd0:	57 e4       	ldi	r21, 0x47	; 71
    1dd2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dd6:	18 16       	cp	r1, r24
    1dd8:	4c f5       	brge	.+82     	; 0x1e2c <EEPROM_read_Password+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dda:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ddc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dde:	8d 85       	ldd	r24, Y+13	; 0x0d
    1de0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1de2:	20 e0       	ldi	r18, 0x00	; 0
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	40 e2       	ldi	r20, 0x20	; 32
    1de8:	51 e4       	ldi	r21, 0x41	; 65
    1dea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dee:	dc 01       	movw	r26, r24
    1df0:	cb 01       	movw	r24, r22
    1df2:	bc 01       	movw	r22, r24
    1df4:	cd 01       	movw	r24, r26
    1df6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dfa:	dc 01       	movw	r26, r24
    1dfc:	cb 01       	movw	r24, r22
    1dfe:	9e 83       	std	Y+6, r25	; 0x06
    1e00:	8d 83       	std	Y+5, r24	; 0x05
    1e02:	0f c0       	rjmp	.+30     	; 0x1e22 <EEPROM_read_Password+0xf8>
    1e04:	88 ec       	ldi	r24, 0xC8	; 200
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	9c 83       	std	Y+4, r25	; 0x04
    1e0a:	8b 83       	std	Y+3, r24	; 0x03
    1e0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e10:	01 97       	sbiw	r24, 0x01	; 1
    1e12:	f1 f7       	brne	.-4      	; 0x1e10 <EEPROM_read_Password+0xe6>
    1e14:	9c 83       	std	Y+4, r25	; 0x04
    1e16:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e18:	8d 81       	ldd	r24, Y+5	; 0x05
    1e1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e1c:	01 97       	sbiw	r24, 0x01	; 1
    1e1e:	9e 83       	std	Y+6, r25	; 0x06
    1e20:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e22:	8d 81       	ldd	r24, Y+5	; 0x05
    1e24:	9e 81       	ldd	r25, Y+6	; 0x06
    1e26:	00 97       	sbiw	r24, 0x00	; 0
    1e28:	69 f7       	brne	.-38     	; 0x1e04 <EEPROM_read_Password+0xda>
    1e2a:	14 c0       	rjmp	.+40     	; 0x1e54 <EEPROM_read_Password+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e2c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e2e:	78 85       	ldd	r23, Y+8	; 0x08
    1e30:	89 85       	ldd	r24, Y+9	; 0x09
    1e32:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e38:	dc 01       	movw	r26, r24
    1e3a:	cb 01       	movw	r24, r22
    1e3c:	9e 83       	std	Y+6, r25	; 0x06
    1e3e:	8d 83       	std	Y+5, r24	; 0x05
    1e40:	8d 81       	ldd	r24, Y+5	; 0x05
    1e42:	9e 81       	ldd	r25, Y+6	; 0x06
    1e44:	9a 83       	std	Y+2, r25	; 0x02
    1e46:	89 83       	std	Y+1, r24	; 0x01
    1e48:	89 81       	ldd	r24, Y+1	; 0x01
    1e4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e4c:	01 97       	sbiw	r24, 0x01	; 1
    1e4e:	f1 f7       	brne	.-4      	; 0x1e4c <EEPROM_read_Password+0x122>
    1e50:	9a 83       	std	Y+2, r25	; 0x02
    1e52:	89 83       	std	Y+1, r24	; 0x01
 */
void EEPROM_read_Password(uint8 *a_str)
{
	uint8 EEPROM_Read_Byte;
	uint8 i;
	for(i=0;i<ARR_SIZE;i++)
    1e54:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e56:	8f 5f       	subi	r24, 0xFF	; 255
    1e58:	8f 87       	std	Y+15, r24	; 0x0f
    1e5a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e5c:	85 30       	cpi	r24, 0x05	; 5
    1e5e:	08 f4       	brcc	.+2      	; 0x1e62 <EEPROM_read_Password+0x138>
    1e60:	72 cf       	rjmp	.-284    	; 0x1d46 <EEPROM_read_Password+0x1c>
	{
		EEPROM_readByte(0x0311+i,&EEPROM_Read_Byte);
		a_str[i]= EEPROM_Read_Byte;
		_delay_ms(100);
	}
}
    1e62:	62 96       	adiw	r28, 0x12	; 18
    1e64:	0f b6       	in	r0, 0x3f	; 63
    1e66:	f8 94       	cli
    1e68:	de bf       	out	0x3e, r29	; 62
    1e6a:	0f be       	out	0x3f, r0	; 63
    1e6c:	cd bf       	out	0x3d, r28	; 61
    1e6e:	cf 91       	pop	r28
    1e70:	df 91       	pop	r29
    1e72:	08 95       	ret

00001e74 <GPIO_setupPinDirection>:
 * Description:
 * Setup the direction of the required pin input/output.
 * If input port number or pin number are not correct, the function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 a_portNum,uint8 a_pinNum,GPIO_PinDirectionType a_direction)
{
    1e74:	df 93       	push	r29
    1e76:	cf 93       	push	r28
    1e78:	00 d0       	rcall	.+0      	; 0x1e7a <GPIO_setupPinDirection+0x6>
    1e7a:	00 d0       	rcall	.+0      	; 0x1e7c <GPIO_setupPinDirection+0x8>
    1e7c:	0f 92       	push	r0
    1e7e:	cd b7       	in	r28, 0x3d	; 61
    1e80:	de b7       	in	r29, 0x3e	; 62
    1e82:	89 83       	std	Y+1, r24	; 0x01
    1e84:	6a 83       	std	Y+2, r22	; 0x02
    1e86:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((a_portNum >= NUM_OF_PORTS) || (a_pinNum >= NUM_OF_PINS_PER_PORT))
    1e88:	89 81       	ldd	r24, Y+1	; 0x01
    1e8a:	84 30       	cpi	r24, 0x04	; 4
    1e8c:	08 f0       	brcs	.+2      	; 0x1e90 <GPIO_setupPinDirection+0x1c>
    1e8e:	d5 c0       	rjmp	.+426    	; 0x203a <GPIO_setupPinDirection+0x1c6>
    1e90:	8a 81       	ldd	r24, Y+2	; 0x02
    1e92:	88 30       	cpi	r24, 0x08	; 8
    1e94:	08 f0       	brcs	.+2      	; 0x1e98 <GPIO_setupPinDirection+0x24>
    1e96:	d1 c0       	rjmp	.+418    	; 0x203a <GPIO_setupPinDirection+0x1c6>
		/*Do Nothing*/
	}
	else
	{
		/*Setup the pin direction as required*/
		switch(a_portNum)
    1e98:	89 81       	ldd	r24, Y+1	; 0x01
    1e9a:	28 2f       	mov	r18, r24
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	3d 83       	std	Y+5, r19	; 0x05
    1ea0:	2c 83       	std	Y+4, r18	; 0x04
    1ea2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ea6:	81 30       	cpi	r24, 0x01	; 1
    1ea8:	91 05       	cpc	r25, r1
    1eaa:	09 f4       	brne	.+2      	; 0x1eae <GPIO_setupPinDirection+0x3a>
    1eac:	43 c0       	rjmp	.+134    	; 0x1f34 <GPIO_setupPinDirection+0xc0>
    1eae:	2c 81       	ldd	r18, Y+4	; 0x04
    1eb0:	3d 81       	ldd	r19, Y+5	; 0x05
    1eb2:	22 30       	cpi	r18, 0x02	; 2
    1eb4:	31 05       	cpc	r19, r1
    1eb6:	2c f4       	brge	.+10     	; 0x1ec2 <GPIO_setupPinDirection+0x4e>
    1eb8:	8c 81       	ldd	r24, Y+4	; 0x04
    1eba:	9d 81       	ldd	r25, Y+5	; 0x05
    1ebc:	00 97       	sbiw	r24, 0x00	; 0
    1ebe:	71 f0       	breq	.+28     	; 0x1edc <GPIO_setupPinDirection+0x68>
    1ec0:	bc c0       	rjmp	.+376    	; 0x203a <GPIO_setupPinDirection+0x1c6>
    1ec2:	2c 81       	ldd	r18, Y+4	; 0x04
    1ec4:	3d 81       	ldd	r19, Y+5	; 0x05
    1ec6:	22 30       	cpi	r18, 0x02	; 2
    1ec8:	31 05       	cpc	r19, r1
    1eca:	09 f4       	brne	.+2      	; 0x1ece <GPIO_setupPinDirection+0x5a>
    1ecc:	5f c0       	rjmp	.+190    	; 0x1f8c <GPIO_setupPinDirection+0x118>
    1ece:	8c 81       	ldd	r24, Y+4	; 0x04
    1ed0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ed2:	83 30       	cpi	r24, 0x03	; 3
    1ed4:	91 05       	cpc	r25, r1
    1ed6:	09 f4       	brne	.+2      	; 0x1eda <GPIO_setupPinDirection+0x66>
    1ed8:	85 c0       	rjmp	.+266    	; 0x1fe4 <GPIO_setupPinDirection+0x170>
    1eda:	af c0       	rjmp	.+350    	; 0x203a <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(a_direction == PIN_OUTPUT)
    1edc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ede:	81 30       	cpi	r24, 0x01	; 1
    1ee0:	a1 f4       	brne	.+40     	; 0x1f0a <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,a_pinNum);
    1ee2:	aa e3       	ldi	r26, 0x3A	; 58
    1ee4:	b0 e0       	ldi	r27, 0x00	; 0
    1ee6:	ea e3       	ldi	r30, 0x3A	; 58
    1ee8:	f0 e0       	ldi	r31, 0x00	; 0
    1eea:	80 81       	ld	r24, Z
    1eec:	48 2f       	mov	r20, r24
    1eee:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef0:	28 2f       	mov	r18, r24
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	81 e0       	ldi	r24, 0x01	; 1
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	02 2e       	mov	r0, r18
    1efa:	02 c0       	rjmp	.+4      	; 0x1f00 <GPIO_setupPinDirection+0x8c>
    1efc:	88 0f       	add	r24, r24
    1efe:	99 1f       	adc	r25, r25
    1f00:	0a 94       	dec	r0
    1f02:	e2 f7       	brpl	.-8      	; 0x1efc <GPIO_setupPinDirection+0x88>
    1f04:	84 2b       	or	r24, r20
    1f06:	8c 93       	st	X, r24
    1f08:	98 c0       	rjmp	.+304    	; 0x203a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,a_pinNum);
    1f0a:	aa e3       	ldi	r26, 0x3A	; 58
    1f0c:	b0 e0       	ldi	r27, 0x00	; 0
    1f0e:	ea e3       	ldi	r30, 0x3A	; 58
    1f10:	f0 e0       	ldi	r31, 0x00	; 0
    1f12:	80 81       	ld	r24, Z
    1f14:	48 2f       	mov	r20, r24
    1f16:	8a 81       	ldd	r24, Y+2	; 0x02
    1f18:	28 2f       	mov	r18, r24
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	81 e0       	ldi	r24, 0x01	; 1
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	02 2e       	mov	r0, r18
    1f22:	02 c0       	rjmp	.+4      	; 0x1f28 <GPIO_setupPinDirection+0xb4>
    1f24:	88 0f       	add	r24, r24
    1f26:	99 1f       	adc	r25, r25
    1f28:	0a 94       	dec	r0
    1f2a:	e2 f7       	brpl	.-8      	; 0x1f24 <GPIO_setupPinDirection+0xb0>
    1f2c:	80 95       	com	r24
    1f2e:	84 23       	and	r24, r20
    1f30:	8c 93       	st	X, r24
    1f32:	83 c0       	rjmp	.+262    	; 0x203a <GPIO_setupPinDirection+0x1c6>
			}
			break;

		case PORTB_ID:
			if(a_direction == PIN_OUTPUT)
    1f34:	8b 81       	ldd	r24, Y+3	; 0x03
    1f36:	81 30       	cpi	r24, 0x01	; 1
    1f38:	a1 f4       	brne	.+40     	; 0x1f62 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,a_pinNum);
    1f3a:	a7 e3       	ldi	r26, 0x37	; 55
    1f3c:	b0 e0       	ldi	r27, 0x00	; 0
    1f3e:	e7 e3       	ldi	r30, 0x37	; 55
    1f40:	f0 e0       	ldi	r31, 0x00	; 0
    1f42:	80 81       	ld	r24, Z
    1f44:	48 2f       	mov	r20, r24
    1f46:	8a 81       	ldd	r24, Y+2	; 0x02
    1f48:	28 2f       	mov	r18, r24
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	81 e0       	ldi	r24, 0x01	; 1
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	02 2e       	mov	r0, r18
    1f52:	02 c0       	rjmp	.+4      	; 0x1f58 <GPIO_setupPinDirection+0xe4>
    1f54:	88 0f       	add	r24, r24
    1f56:	99 1f       	adc	r25, r25
    1f58:	0a 94       	dec	r0
    1f5a:	e2 f7       	brpl	.-8      	; 0x1f54 <GPIO_setupPinDirection+0xe0>
    1f5c:	84 2b       	or	r24, r20
    1f5e:	8c 93       	st	X, r24
    1f60:	6c c0       	rjmp	.+216    	; 0x203a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,a_pinNum);
    1f62:	a7 e3       	ldi	r26, 0x37	; 55
    1f64:	b0 e0       	ldi	r27, 0x00	; 0
    1f66:	e7 e3       	ldi	r30, 0x37	; 55
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	80 81       	ld	r24, Z
    1f6c:	48 2f       	mov	r20, r24
    1f6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f70:	28 2f       	mov	r18, r24
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	81 e0       	ldi	r24, 0x01	; 1
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	02 2e       	mov	r0, r18
    1f7a:	02 c0       	rjmp	.+4      	; 0x1f80 <GPIO_setupPinDirection+0x10c>
    1f7c:	88 0f       	add	r24, r24
    1f7e:	99 1f       	adc	r25, r25
    1f80:	0a 94       	dec	r0
    1f82:	e2 f7       	brpl	.-8      	; 0x1f7c <GPIO_setupPinDirection+0x108>
    1f84:	80 95       	com	r24
    1f86:	84 23       	and	r24, r20
    1f88:	8c 93       	st	X, r24
    1f8a:	57 c0       	rjmp	.+174    	; 0x203a <GPIO_setupPinDirection+0x1c6>
			}
			break;

		case PORTC_ID:
			if(a_direction == PIN_OUTPUT)
    1f8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8e:	81 30       	cpi	r24, 0x01	; 1
    1f90:	a1 f4       	brne	.+40     	; 0x1fba <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,a_pinNum);
    1f92:	a4 e3       	ldi	r26, 0x34	; 52
    1f94:	b0 e0       	ldi	r27, 0x00	; 0
    1f96:	e4 e3       	ldi	r30, 0x34	; 52
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	80 81       	ld	r24, Z
    1f9c:	48 2f       	mov	r20, r24
    1f9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa0:	28 2f       	mov	r18, r24
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	81 e0       	ldi	r24, 0x01	; 1
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	02 2e       	mov	r0, r18
    1faa:	02 c0       	rjmp	.+4      	; 0x1fb0 <GPIO_setupPinDirection+0x13c>
    1fac:	88 0f       	add	r24, r24
    1fae:	99 1f       	adc	r25, r25
    1fb0:	0a 94       	dec	r0
    1fb2:	e2 f7       	brpl	.-8      	; 0x1fac <GPIO_setupPinDirection+0x138>
    1fb4:	84 2b       	or	r24, r20
    1fb6:	8c 93       	st	X, r24
    1fb8:	40 c0       	rjmp	.+128    	; 0x203a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,a_pinNum);
    1fba:	a4 e3       	ldi	r26, 0x34	; 52
    1fbc:	b0 e0       	ldi	r27, 0x00	; 0
    1fbe:	e4 e3       	ldi	r30, 0x34	; 52
    1fc0:	f0 e0       	ldi	r31, 0x00	; 0
    1fc2:	80 81       	ld	r24, Z
    1fc4:	48 2f       	mov	r20, r24
    1fc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc8:	28 2f       	mov	r18, r24
    1fca:	30 e0       	ldi	r19, 0x00	; 0
    1fcc:	81 e0       	ldi	r24, 0x01	; 1
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	02 2e       	mov	r0, r18
    1fd2:	02 c0       	rjmp	.+4      	; 0x1fd8 <GPIO_setupPinDirection+0x164>
    1fd4:	88 0f       	add	r24, r24
    1fd6:	99 1f       	adc	r25, r25
    1fd8:	0a 94       	dec	r0
    1fda:	e2 f7       	brpl	.-8      	; 0x1fd4 <GPIO_setupPinDirection+0x160>
    1fdc:	80 95       	com	r24
    1fde:	84 23       	and	r24, r20
    1fe0:	8c 93       	st	X, r24
    1fe2:	2b c0       	rjmp	.+86     	; 0x203a <GPIO_setupPinDirection+0x1c6>
			}
			break;

		case PORTD_ID:
			if(a_direction == PIN_OUTPUT)
    1fe4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe6:	81 30       	cpi	r24, 0x01	; 1
    1fe8:	a1 f4       	brne	.+40     	; 0x2012 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,a_pinNum);
    1fea:	a1 e3       	ldi	r26, 0x31	; 49
    1fec:	b0 e0       	ldi	r27, 0x00	; 0
    1fee:	e1 e3       	ldi	r30, 0x31	; 49
    1ff0:	f0 e0       	ldi	r31, 0x00	; 0
    1ff2:	80 81       	ld	r24, Z
    1ff4:	48 2f       	mov	r20, r24
    1ff6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff8:	28 2f       	mov	r18, r24
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	81 e0       	ldi	r24, 0x01	; 1
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	02 2e       	mov	r0, r18
    2002:	02 c0       	rjmp	.+4      	; 0x2008 <GPIO_setupPinDirection+0x194>
    2004:	88 0f       	add	r24, r24
    2006:	99 1f       	adc	r25, r25
    2008:	0a 94       	dec	r0
    200a:	e2 f7       	brpl	.-8      	; 0x2004 <GPIO_setupPinDirection+0x190>
    200c:	84 2b       	or	r24, r20
    200e:	8c 93       	st	X, r24
    2010:	14 c0       	rjmp	.+40     	; 0x203a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,a_pinNum);
    2012:	a1 e3       	ldi	r26, 0x31	; 49
    2014:	b0 e0       	ldi	r27, 0x00	; 0
    2016:	e1 e3       	ldi	r30, 0x31	; 49
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	80 81       	ld	r24, Z
    201c:	48 2f       	mov	r20, r24
    201e:	8a 81       	ldd	r24, Y+2	; 0x02
    2020:	28 2f       	mov	r18, r24
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	81 e0       	ldi	r24, 0x01	; 1
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	02 2e       	mov	r0, r18
    202a:	02 c0       	rjmp	.+4      	; 0x2030 <GPIO_setupPinDirection+0x1bc>
    202c:	88 0f       	add	r24, r24
    202e:	99 1f       	adc	r25, r25
    2030:	0a 94       	dec	r0
    2032:	e2 f7       	brpl	.-8      	; 0x202c <GPIO_setupPinDirection+0x1b8>
    2034:	80 95       	com	r24
    2036:	84 23       	and	r24, r20
    2038:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    203a:	0f 90       	pop	r0
    203c:	0f 90       	pop	r0
    203e:	0f 90       	pop	r0
    2040:	0f 90       	pop	r0
    2042:	0f 90       	pop	r0
    2044:	cf 91       	pop	r28
    2046:	df 91       	pop	r29
    2048:	08 95       	ret

0000204a <GPIO_writePin>:
 * Write the value logic high or logic low on the required pin.
 * If input port number or pin number are not correct, the function will not handle the request.
 * If the pin is input , this function enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 a_portNum,uint8 a_pinNum,uint8 a_value)
{
    204a:	df 93       	push	r29
    204c:	cf 93       	push	r28
    204e:	00 d0       	rcall	.+0      	; 0x2050 <GPIO_writePin+0x6>
    2050:	00 d0       	rcall	.+0      	; 0x2052 <GPIO_writePin+0x8>
    2052:	0f 92       	push	r0
    2054:	cd b7       	in	r28, 0x3d	; 61
    2056:	de b7       	in	r29, 0x3e	; 62
    2058:	89 83       	std	Y+1, r24	; 0x01
    205a:	6a 83       	std	Y+2, r22	; 0x02
    205c:	4b 83       	std	Y+3, r20	; 0x03
	if((a_portNum >= NUM_OF_PORTS) || (a_pinNum >= NUM_OF_PINS_PER_PORT))
    205e:	89 81       	ldd	r24, Y+1	; 0x01
    2060:	84 30       	cpi	r24, 0x04	; 4
    2062:	08 f0       	brcs	.+2      	; 0x2066 <GPIO_writePin+0x1c>
    2064:	d5 c0       	rjmp	.+426    	; 0x2210 <GPIO_writePin+0x1c6>
    2066:	8a 81       	ldd	r24, Y+2	; 0x02
    2068:	88 30       	cpi	r24, 0x08	; 8
    206a:	08 f0       	brcs	.+2      	; 0x206e <GPIO_writePin+0x24>
    206c:	d1 c0       	rjmp	.+418    	; 0x2210 <GPIO_writePin+0x1c6>
		/*Do Nothing*/
	}
	else
	{
		/*Write the pin value as required*/
		switch(a_portNum)
    206e:	89 81       	ldd	r24, Y+1	; 0x01
    2070:	28 2f       	mov	r18, r24
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	3d 83       	std	Y+5, r19	; 0x05
    2076:	2c 83       	std	Y+4, r18	; 0x04
    2078:	8c 81       	ldd	r24, Y+4	; 0x04
    207a:	9d 81       	ldd	r25, Y+5	; 0x05
    207c:	81 30       	cpi	r24, 0x01	; 1
    207e:	91 05       	cpc	r25, r1
    2080:	09 f4       	brne	.+2      	; 0x2084 <GPIO_writePin+0x3a>
    2082:	43 c0       	rjmp	.+134    	; 0x210a <GPIO_writePin+0xc0>
    2084:	2c 81       	ldd	r18, Y+4	; 0x04
    2086:	3d 81       	ldd	r19, Y+5	; 0x05
    2088:	22 30       	cpi	r18, 0x02	; 2
    208a:	31 05       	cpc	r19, r1
    208c:	2c f4       	brge	.+10     	; 0x2098 <GPIO_writePin+0x4e>
    208e:	8c 81       	ldd	r24, Y+4	; 0x04
    2090:	9d 81       	ldd	r25, Y+5	; 0x05
    2092:	00 97       	sbiw	r24, 0x00	; 0
    2094:	71 f0       	breq	.+28     	; 0x20b2 <GPIO_writePin+0x68>
    2096:	bc c0       	rjmp	.+376    	; 0x2210 <GPIO_writePin+0x1c6>
    2098:	2c 81       	ldd	r18, Y+4	; 0x04
    209a:	3d 81       	ldd	r19, Y+5	; 0x05
    209c:	22 30       	cpi	r18, 0x02	; 2
    209e:	31 05       	cpc	r19, r1
    20a0:	09 f4       	brne	.+2      	; 0x20a4 <GPIO_writePin+0x5a>
    20a2:	5f c0       	rjmp	.+190    	; 0x2162 <GPIO_writePin+0x118>
    20a4:	8c 81       	ldd	r24, Y+4	; 0x04
    20a6:	9d 81       	ldd	r25, Y+5	; 0x05
    20a8:	83 30       	cpi	r24, 0x03	; 3
    20aa:	91 05       	cpc	r25, r1
    20ac:	09 f4       	brne	.+2      	; 0x20b0 <GPIO_writePin+0x66>
    20ae:	85 c0       	rjmp	.+266    	; 0x21ba <GPIO_writePin+0x170>
    20b0:	af c0       	rjmp	.+350    	; 0x2210 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(a_value == LOGIC_HIGH)
    20b2:	8b 81       	ldd	r24, Y+3	; 0x03
    20b4:	81 30       	cpi	r24, 0x01	; 1
    20b6:	a1 f4       	brne	.+40     	; 0x20e0 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,a_pinNum);
    20b8:	ab e3       	ldi	r26, 0x3B	; 59
    20ba:	b0 e0       	ldi	r27, 0x00	; 0
    20bc:	eb e3       	ldi	r30, 0x3B	; 59
    20be:	f0 e0       	ldi	r31, 0x00	; 0
    20c0:	80 81       	ld	r24, Z
    20c2:	48 2f       	mov	r20, r24
    20c4:	8a 81       	ldd	r24, Y+2	; 0x02
    20c6:	28 2f       	mov	r18, r24
    20c8:	30 e0       	ldi	r19, 0x00	; 0
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	02 2e       	mov	r0, r18
    20d0:	02 c0       	rjmp	.+4      	; 0x20d6 <GPIO_writePin+0x8c>
    20d2:	88 0f       	add	r24, r24
    20d4:	99 1f       	adc	r25, r25
    20d6:	0a 94       	dec	r0
    20d8:	e2 f7       	brpl	.-8      	; 0x20d2 <GPIO_writePin+0x88>
    20da:	84 2b       	or	r24, r20
    20dc:	8c 93       	st	X, r24
    20de:	98 c0       	rjmp	.+304    	; 0x2210 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,a_pinNum);
    20e0:	ab e3       	ldi	r26, 0x3B	; 59
    20e2:	b0 e0       	ldi	r27, 0x00	; 0
    20e4:	eb e3       	ldi	r30, 0x3B	; 59
    20e6:	f0 e0       	ldi	r31, 0x00	; 0
    20e8:	80 81       	ld	r24, Z
    20ea:	48 2f       	mov	r20, r24
    20ec:	8a 81       	ldd	r24, Y+2	; 0x02
    20ee:	28 2f       	mov	r18, r24
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	81 e0       	ldi	r24, 0x01	; 1
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	02 2e       	mov	r0, r18
    20f8:	02 c0       	rjmp	.+4      	; 0x20fe <GPIO_writePin+0xb4>
    20fa:	88 0f       	add	r24, r24
    20fc:	99 1f       	adc	r25, r25
    20fe:	0a 94       	dec	r0
    2100:	e2 f7       	brpl	.-8      	; 0x20fa <GPIO_writePin+0xb0>
    2102:	80 95       	com	r24
    2104:	84 23       	and	r24, r20
    2106:	8c 93       	st	X, r24
    2108:	83 c0       	rjmp	.+262    	; 0x2210 <GPIO_writePin+0x1c6>
			}
			break;

		case PORTB_ID:
			if(a_value == LOGIC_HIGH)
    210a:	8b 81       	ldd	r24, Y+3	; 0x03
    210c:	81 30       	cpi	r24, 0x01	; 1
    210e:	a1 f4       	brne	.+40     	; 0x2138 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,a_pinNum);
    2110:	a8 e3       	ldi	r26, 0x38	; 56
    2112:	b0 e0       	ldi	r27, 0x00	; 0
    2114:	e8 e3       	ldi	r30, 0x38	; 56
    2116:	f0 e0       	ldi	r31, 0x00	; 0
    2118:	80 81       	ld	r24, Z
    211a:	48 2f       	mov	r20, r24
    211c:	8a 81       	ldd	r24, Y+2	; 0x02
    211e:	28 2f       	mov	r18, r24
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	81 e0       	ldi	r24, 0x01	; 1
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	02 2e       	mov	r0, r18
    2128:	02 c0       	rjmp	.+4      	; 0x212e <GPIO_writePin+0xe4>
    212a:	88 0f       	add	r24, r24
    212c:	99 1f       	adc	r25, r25
    212e:	0a 94       	dec	r0
    2130:	e2 f7       	brpl	.-8      	; 0x212a <GPIO_writePin+0xe0>
    2132:	84 2b       	or	r24, r20
    2134:	8c 93       	st	X, r24
    2136:	6c c0       	rjmp	.+216    	; 0x2210 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,a_pinNum);
    2138:	a8 e3       	ldi	r26, 0x38	; 56
    213a:	b0 e0       	ldi	r27, 0x00	; 0
    213c:	e8 e3       	ldi	r30, 0x38	; 56
    213e:	f0 e0       	ldi	r31, 0x00	; 0
    2140:	80 81       	ld	r24, Z
    2142:	48 2f       	mov	r20, r24
    2144:	8a 81       	ldd	r24, Y+2	; 0x02
    2146:	28 2f       	mov	r18, r24
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	81 e0       	ldi	r24, 0x01	; 1
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	02 2e       	mov	r0, r18
    2150:	02 c0       	rjmp	.+4      	; 0x2156 <GPIO_writePin+0x10c>
    2152:	88 0f       	add	r24, r24
    2154:	99 1f       	adc	r25, r25
    2156:	0a 94       	dec	r0
    2158:	e2 f7       	brpl	.-8      	; 0x2152 <GPIO_writePin+0x108>
    215a:	80 95       	com	r24
    215c:	84 23       	and	r24, r20
    215e:	8c 93       	st	X, r24
    2160:	57 c0       	rjmp	.+174    	; 0x2210 <GPIO_writePin+0x1c6>
			}
			break;

		case PORTC_ID:
			if(a_value == LOGIC_HIGH)
    2162:	8b 81       	ldd	r24, Y+3	; 0x03
    2164:	81 30       	cpi	r24, 0x01	; 1
    2166:	a1 f4       	brne	.+40     	; 0x2190 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,a_pinNum);
    2168:	a5 e3       	ldi	r26, 0x35	; 53
    216a:	b0 e0       	ldi	r27, 0x00	; 0
    216c:	e5 e3       	ldi	r30, 0x35	; 53
    216e:	f0 e0       	ldi	r31, 0x00	; 0
    2170:	80 81       	ld	r24, Z
    2172:	48 2f       	mov	r20, r24
    2174:	8a 81       	ldd	r24, Y+2	; 0x02
    2176:	28 2f       	mov	r18, r24
    2178:	30 e0       	ldi	r19, 0x00	; 0
    217a:	81 e0       	ldi	r24, 0x01	; 1
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	02 2e       	mov	r0, r18
    2180:	02 c0       	rjmp	.+4      	; 0x2186 <GPIO_writePin+0x13c>
    2182:	88 0f       	add	r24, r24
    2184:	99 1f       	adc	r25, r25
    2186:	0a 94       	dec	r0
    2188:	e2 f7       	brpl	.-8      	; 0x2182 <GPIO_writePin+0x138>
    218a:	84 2b       	or	r24, r20
    218c:	8c 93       	st	X, r24
    218e:	40 c0       	rjmp	.+128    	; 0x2210 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,a_pinNum);
    2190:	a5 e3       	ldi	r26, 0x35	; 53
    2192:	b0 e0       	ldi	r27, 0x00	; 0
    2194:	e5 e3       	ldi	r30, 0x35	; 53
    2196:	f0 e0       	ldi	r31, 0x00	; 0
    2198:	80 81       	ld	r24, Z
    219a:	48 2f       	mov	r20, r24
    219c:	8a 81       	ldd	r24, Y+2	; 0x02
    219e:	28 2f       	mov	r18, r24
    21a0:	30 e0       	ldi	r19, 0x00	; 0
    21a2:	81 e0       	ldi	r24, 0x01	; 1
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	02 2e       	mov	r0, r18
    21a8:	02 c0       	rjmp	.+4      	; 0x21ae <GPIO_writePin+0x164>
    21aa:	88 0f       	add	r24, r24
    21ac:	99 1f       	adc	r25, r25
    21ae:	0a 94       	dec	r0
    21b0:	e2 f7       	brpl	.-8      	; 0x21aa <GPIO_writePin+0x160>
    21b2:	80 95       	com	r24
    21b4:	84 23       	and	r24, r20
    21b6:	8c 93       	st	X, r24
    21b8:	2b c0       	rjmp	.+86     	; 0x2210 <GPIO_writePin+0x1c6>
			}
			break;

		case PORTD_ID:
			if(a_value == LOGIC_HIGH)
    21ba:	8b 81       	ldd	r24, Y+3	; 0x03
    21bc:	81 30       	cpi	r24, 0x01	; 1
    21be:	a1 f4       	brne	.+40     	; 0x21e8 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,a_pinNum);
    21c0:	a2 e3       	ldi	r26, 0x32	; 50
    21c2:	b0 e0       	ldi	r27, 0x00	; 0
    21c4:	e2 e3       	ldi	r30, 0x32	; 50
    21c6:	f0 e0       	ldi	r31, 0x00	; 0
    21c8:	80 81       	ld	r24, Z
    21ca:	48 2f       	mov	r20, r24
    21cc:	8a 81       	ldd	r24, Y+2	; 0x02
    21ce:	28 2f       	mov	r18, r24
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	81 e0       	ldi	r24, 0x01	; 1
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	02 2e       	mov	r0, r18
    21d8:	02 c0       	rjmp	.+4      	; 0x21de <GPIO_writePin+0x194>
    21da:	88 0f       	add	r24, r24
    21dc:	99 1f       	adc	r25, r25
    21de:	0a 94       	dec	r0
    21e0:	e2 f7       	brpl	.-8      	; 0x21da <GPIO_writePin+0x190>
    21e2:	84 2b       	or	r24, r20
    21e4:	8c 93       	st	X, r24
    21e6:	14 c0       	rjmp	.+40     	; 0x2210 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,a_pinNum);
    21e8:	a2 e3       	ldi	r26, 0x32	; 50
    21ea:	b0 e0       	ldi	r27, 0x00	; 0
    21ec:	e2 e3       	ldi	r30, 0x32	; 50
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	80 81       	ld	r24, Z
    21f2:	48 2f       	mov	r20, r24
    21f4:	8a 81       	ldd	r24, Y+2	; 0x02
    21f6:	28 2f       	mov	r18, r24
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	81 e0       	ldi	r24, 0x01	; 1
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	02 2e       	mov	r0, r18
    2200:	02 c0       	rjmp	.+4      	; 0x2206 <GPIO_writePin+0x1bc>
    2202:	88 0f       	add	r24, r24
    2204:	99 1f       	adc	r25, r25
    2206:	0a 94       	dec	r0
    2208:	e2 f7       	brpl	.-8      	; 0x2202 <GPIO_writePin+0x1b8>
    220a:	80 95       	com	r24
    220c:	84 23       	and	r24, r20
    220e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2210:	0f 90       	pop	r0
    2212:	0f 90       	pop	r0
    2214:	0f 90       	pop	r0
    2216:	0f 90       	pop	r0
    2218:	0f 90       	pop	r0
    221a:	cf 91       	pop	r28
    221c:	df 91       	pop	r29
    221e:	08 95       	ret

00002220 <GPIO_readPin>:
 * Description:
 * Read and return the value for the required pin , it should be logic low/logic high.
 * If the input port number or pin number are not correct, The function will return Logic low.
 */
uint8 GPIO_readPin(uint8 a_portNum,uint8 a_pinNum)
{
    2220:	df 93       	push	r29
    2222:	cf 93       	push	r28
    2224:	00 d0       	rcall	.+0      	; 0x2226 <GPIO_readPin+0x6>
    2226:	00 d0       	rcall	.+0      	; 0x2228 <GPIO_readPin+0x8>
    2228:	0f 92       	push	r0
    222a:	cd b7       	in	r28, 0x3d	; 61
    222c:	de b7       	in	r29, 0x3e	; 62
    222e:	8a 83       	std	Y+2, r24	; 0x02
    2230:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pinValue = LOGIC_LOW;
    2232:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number and return logic low.
	 */
	if((a_portNum >= NUM_OF_PORTS) || (a_pinNum >= NUM_OF_PINS_PER_PORT))
    2234:	8a 81       	ldd	r24, Y+2	; 0x02
    2236:	84 30       	cpi	r24, 0x04	; 4
    2238:	08 f0       	brcs	.+2      	; 0x223c <GPIO_readPin+0x1c>
    223a:	9d c0       	rjmp	.+314    	; 0x2376 <GPIO_readPin+0x156>
    223c:	8b 81       	ldd	r24, Y+3	; 0x03
    223e:	88 30       	cpi	r24, 0x08	; 8
    2240:	08 f0       	brcs	.+2      	; 0x2244 <GPIO_readPin+0x24>
    2242:	99 c0       	rjmp	.+306    	; 0x2376 <GPIO_readPin+0x156>
	{
		/*Do Nothing*/
	}
	else
	{
		switch(a_portNum)
    2244:	8a 81       	ldd	r24, Y+2	; 0x02
    2246:	28 2f       	mov	r18, r24
    2248:	30 e0       	ldi	r19, 0x00	; 0
    224a:	3d 83       	std	Y+5, r19	; 0x05
    224c:	2c 83       	std	Y+4, r18	; 0x04
    224e:	4c 81       	ldd	r20, Y+4	; 0x04
    2250:	5d 81       	ldd	r21, Y+5	; 0x05
    2252:	41 30       	cpi	r20, 0x01	; 1
    2254:	51 05       	cpc	r21, r1
    2256:	b1 f1       	breq	.+108    	; 0x22c4 <GPIO_readPin+0xa4>
    2258:	8c 81       	ldd	r24, Y+4	; 0x04
    225a:	9d 81       	ldd	r25, Y+5	; 0x05
    225c:	82 30       	cpi	r24, 0x02	; 2
    225e:	91 05       	cpc	r25, r1
    2260:	34 f4       	brge	.+12     	; 0x226e <GPIO_readPin+0x4e>
    2262:	2c 81       	ldd	r18, Y+4	; 0x04
    2264:	3d 81       	ldd	r19, Y+5	; 0x05
    2266:	21 15       	cp	r18, r1
    2268:	31 05       	cpc	r19, r1
    226a:	71 f0       	breq	.+28     	; 0x2288 <GPIO_readPin+0x68>
    226c:	84 c0       	rjmp	.+264    	; 0x2376 <GPIO_readPin+0x156>
    226e:	4c 81       	ldd	r20, Y+4	; 0x04
    2270:	5d 81       	ldd	r21, Y+5	; 0x05
    2272:	42 30       	cpi	r20, 0x02	; 2
    2274:	51 05       	cpc	r21, r1
    2276:	09 f4       	brne	.+2      	; 0x227a <GPIO_readPin+0x5a>
    2278:	43 c0       	rjmp	.+134    	; 0x2300 <GPIO_readPin+0xe0>
    227a:	8c 81       	ldd	r24, Y+4	; 0x04
    227c:	9d 81       	ldd	r25, Y+5	; 0x05
    227e:	83 30       	cpi	r24, 0x03	; 3
    2280:	91 05       	cpc	r25, r1
    2282:	09 f4       	brne	.+2      	; 0x2286 <GPIO_readPin+0x66>
    2284:	5b c0       	rjmp	.+182    	; 0x233c <GPIO_readPin+0x11c>
    2286:	77 c0       	rjmp	.+238    	; 0x2376 <GPIO_readPin+0x156>
		{
		case PORTA_ID:
			pinValue = GET_BIT(PINA,a_pinNum);
    2288:	e9 e3       	ldi	r30, 0x39	; 57
    228a:	f0 e0       	ldi	r31, 0x00	; 0
    228c:	80 81       	ld	r24, Z
    228e:	48 2f       	mov	r20, r24
    2290:	50 e0       	ldi	r21, 0x00	; 0
    2292:	8b 81       	ldd	r24, Y+3	; 0x03
    2294:	28 2f       	mov	r18, r24
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	81 e0       	ldi	r24, 0x01	; 1
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	02 c0       	rjmp	.+4      	; 0x22a2 <GPIO_readPin+0x82>
    229e:	88 0f       	add	r24, r24
    22a0:	99 1f       	adc	r25, r25
    22a2:	2a 95       	dec	r18
    22a4:	e2 f7       	brpl	.-8      	; 0x229e <GPIO_readPin+0x7e>
    22a6:	9a 01       	movw	r18, r20
    22a8:	28 23       	and	r18, r24
    22aa:	39 23       	and	r19, r25
    22ac:	8b 81       	ldd	r24, Y+3	; 0x03
    22ae:	88 2f       	mov	r24, r24
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	a9 01       	movw	r20, r18
    22b4:	02 c0       	rjmp	.+4      	; 0x22ba <GPIO_readPin+0x9a>
    22b6:	55 95       	asr	r21
    22b8:	47 95       	ror	r20
    22ba:	8a 95       	dec	r24
    22bc:	e2 f7       	brpl	.-8      	; 0x22b6 <GPIO_readPin+0x96>
    22be:	ca 01       	movw	r24, r20
    22c0:	89 83       	std	Y+1, r24	; 0x01
    22c2:	59 c0       	rjmp	.+178    	; 0x2376 <GPIO_readPin+0x156>
			break;

		case PORTB_ID:
			pinValue = GET_BIT(PINB,a_pinNum);
    22c4:	e6 e3       	ldi	r30, 0x36	; 54
    22c6:	f0 e0       	ldi	r31, 0x00	; 0
    22c8:	80 81       	ld	r24, Z
    22ca:	48 2f       	mov	r20, r24
    22cc:	50 e0       	ldi	r21, 0x00	; 0
    22ce:	8b 81       	ldd	r24, Y+3	; 0x03
    22d0:	28 2f       	mov	r18, r24
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	81 e0       	ldi	r24, 0x01	; 1
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	02 c0       	rjmp	.+4      	; 0x22de <GPIO_readPin+0xbe>
    22da:	88 0f       	add	r24, r24
    22dc:	99 1f       	adc	r25, r25
    22de:	2a 95       	dec	r18
    22e0:	e2 f7       	brpl	.-8      	; 0x22da <GPIO_readPin+0xba>
    22e2:	9a 01       	movw	r18, r20
    22e4:	28 23       	and	r18, r24
    22e6:	39 23       	and	r19, r25
    22e8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ea:	88 2f       	mov	r24, r24
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	a9 01       	movw	r20, r18
    22f0:	02 c0       	rjmp	.+4      	; 0x22f6 <GPIO_readPin+0xd6>
    22f2:	55 95       	asr	r21
    22f4:	47 95       	ror	r20
    22f6:	8a 95       	dec	r24
    22f8:	e2 f7       	brpl	.-8      	; 0x22f2 <GPIO_readPin+0xd2>
    22fa:	ca 01       	movw	r24, r20
    22fc:	89 83       	std	Y+1, r24	; 0x01
    22fe:	3b c0       	rjmp	.+118    	; 0x2376 <GPIO_readPin+0x156>
			break;

		case PORTC_ID:
			pinValue = GET_BIT(PINC,a_pinNum);
    2300:	e3 e3       	ldi	r30, 0x33	; 51
    2302:	f0 e0       	ldi	r31, 0x00	; 0
    2304:	80 81       	ld	r24, Z
    2306:	48 2f       	mov	r20, r24
    2308:	50 e0       	ldi	r21, 0x00	; 0
    230a:	8b 81       	ldd	r24, Y+3	; 0x03
    230c:	28 2f       	mov	r18, r24
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	81 e0       	ldi	r24, 0x01	; 1
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	02 c0       	rjmp	.+4      	; 0x231a <GPIO_readPin+0xfa>
    2316:	88 0f       	add	r24, r24
    2318:	99 1f       	adc	r25, r25
    231a:	2a 95       	dec	r18
    231c:	e2 f7       	brpl	.-8      	; 0x2316 <GPIO_readPin+0xf6>
    231e:	9a 01       	movw	r18, r20
    2320:	28 23       	and	r18, r24
    2322:	39 23       	and	r19, r25
    2324:	8b 81       	ldd	r24, Y+3	; 0x03
    2326:	88 2f       	mov	r24, r24
    2328:	90 e0       	ldi	r25, 0x00	; 0
    232a:	a9 01       	movw	r20, r18
    232c:	02 c0       	rjmp	.+4      	; 0x2332 <GPIO_readPin+0x112>
    232e:	55 95       	asr	r21
    2330:	47 95       	ror	r20
    2332:	8a 95       	dec	r24
    2334:	e2 f7       	brpl	.-8      	; 0x232e <GPIO_readPin+0x10e>
    2336:	ca 01       	movw	r24, r20
    2338:	89 83       	std	Y+1, r24	; 0x01
    233a:	1d c0       	rjmp	.+58     	; 0x2376 <GPIO_readPin+0x156>
			break;

		case PORTD_ID:
			pinValue = GET_BIT(PIND,a_pinNum);
    233c:	e0 e3       	ldi	r30, 0x30	; 48
    233e:	f0 e0       	ldi	r31, 0x00	; 0
    2340:	80 81       	ld	r24, Z
    2342:	48 2f       	mov	r20, r24
    2344:	50 e0       	ldi	r21, 0x00	; 0
    2346:	8b 81       	ldd	r24, Y+3	; 0x03
    2348:	28 2f       	mov	r18, r24
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	02 c0       	rjmp	.+4      	; 0x2356 <GPIO_readPin+0x136>
    2352:	88 0f       	add	r24, r24
    2354:	99 1f       	adc	r25, r25
    2356:	2a 95       	dec	r18
    2358:	e2 f7       	brpl	.-8      	; 0x2352 <GPIO_readPin+0x132>
    235a:	9a 01       	movw	r18, r20
    235c:	28 23       	and	r18, r24
    235e:	39 23       	and	r19, r25
    2360:	8b 81       	ldd	r24, Y+3	; 0x03
    2362:	88 2f       	mov	r24, r24
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	a9 01       	movw	r20, r18
    2368:	02 c0       	rjmp	.+4      	; 0x236e <GPIO_readPin+0x14e>
    236a:	55 95       	asr	r21
    236c:	47 95       	ror	r20
    236e:	8a 95       	dec	r24
    2370:	e2 f7       	brpl	.-8      	; 0x236a <GPIO_readPin+0x14a>
    2372:	ca 01       	movw	r24, r20
    2374:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return pinValue;
    2376:	89 81       	ldd	r24, Y+1	; 0x01
}
    2378:	0f 90       	pop	r0
    237a:	0f 90       	pop	r0
    237c:	0f 90       	pop	r0
    237e:	0f 90       	pop	r0
    2380:	0f 90       	pop	r0
    2382:	cf 91       	pop	r28
    2384:	df 91       	pop	r29
    2386:	08 95       	ret

00002388 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 a_portNum,GPIO_PortDirectionType a_direction)
{
    2388:	df 93       	push	r29
    238a:	cf 93       	push	r28
    238c:	00 d0       	rcall	.+0      	; 0x238e <GPIO_setupPortDirection+0x6>
    238e:	00 d0       	rcall	.+0      	; 0x2390 <GPIO_setupPortDirection+0x8>
    2390:	cd b7       	in	r28, 0x3d	; 61
    2392:	de b7       	in	r29, 0x3e	; 62
    2394:	89 83       	std	Y+1, r24	; 0x01
    2396:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid and function will not handle the request.
	 */
	if(a_portNum >= NUM_OF_PORTS)
    2398:	89 81       	ldd	r24, Y+1	; 0x01
    239a:	84 30       	cpi	r24, 0x04	; 4
    239c:	90 f5       	brcc	.+100    	; 0x2402 <GPIO_setupPortDirection+0x7a>
		/*Do Nothing*/
	}
	else
	{
		/*Setup the port direction as required*/
		switch(a_portNum)
    239e:	89 81       	ldd	r24, Y+1	; 0x01
    23a0:	28 2f       	mov	r18, r24
    23a2:	30 e0       	ldi	r19, 0x00	; 0
    23a4:	3c 83       	std	Y+4, r19	; 0x04
    23a6:	2b 83       	std	Y+3, r18	; 0x03
    23a8:	8b 81       	ldd	r24, Y+3	; 0x03
    23aa:	9c 81       	ldd	r25, Y+4	; 0x04
    23ac:	81 30       	cpi	r24, 0x01	; 1
    23ae:	91 05       	cpc	r25, r1
    23b0:	d1 f0       	breq	.+52     	; 0x23e6 <GPIO_setupPortDirection+0x5e>
    23b2:	2b 81       	ldd	r18, Y+3	; 0x03
    23b4:	3c 81       	ldd	r19, Y+4	; 0x04
    23b6:	22 30       	cpi	r18, 0x02	; 2
    23b8:	31 05       	cpc	r19, r1
    23ba:	2c f4       	brge	.+10     	; 0x23c6 <GPIO_setupPortDirection+0x3e>
    23bc:	8b 81       	ldd	r24, Y+3	; 0x03
    23be:	9c 81       	ldd	r25, Y+4	; 0x04
    23c0:	00 97       	sbiw	r24, 0x00	; 0
    23c2:	61 f0       	breq	.+24     	; 0x23dc <GPIO_setupPortDirection+0x54>
    23c4:	1e c0       	rjmp	.+60     	; 0x2402 <GPIO_setupPortDirection+0x7a>
    23c6:	2b 81       	ldd	r18, Y+3	; 0x03
    23c8:	3c 81       	ldd	r19, Y+4	; 0x04
    23ca:	22 30       	cpi	r18, 0x02	; 2
    23cc:	31 05       	cpc	r19, r1
    23ce:	81 f0       	breq	.+32     	; 0x23f0 <GPIO_setupPortDirection+0x68>
    23d0:	8b 81       	ldd	r24, Y+3	; 0x03
    23d2:	9c 81       	ldd	r25, Y+4	; 0x04
    23d4:	83 30       	cpi	r24, 0x03	; 3
    23d6:	91 05       	cpc	r25, r1
    23d8:	81 f0       	breq	.+32     	; 0x23fa <GPIO_setupPortDirection+0x72>
    23da:	13 c0       	rjmp	.+38     	; 0x2402 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = a_direction;
    23dc:	ea e3       	ldi	r30, 0x3A	; 58
    23de:	f0 e0       	ldi	r31, 0x00	; 0
    23e0:	8a 81       	ldd	r24, Y+2	; 0x02
    23e2:	80 83       	st	Z, r24
    23e4:	0e c0       	rjmp	.+28     	; 0x2402 <GPIO_setupPortDirection+0x7a>
			break;

		case PORTB_ID:
			DDRB = a_direction;
    23e6:	e7 e3       	ldi	r30, 0x37	; 55
    23e8:	f0 e0       	ldi	r31, 0x00	; 0
    23ea:	8a 81       	ldd	r24, Y+2	; 0x02
    23ec:	80 83       	st	Z, r24
    23ee:	09 c0       	rjmp	.+18     	; 0x2402 <GPIO_setupPortDirection+0x7a>
			break;

		case PORTC_ID:
			DDRC = a_direction;
    23f0:	e4 e3       	ldi	r30, 0x34	; 52
    23f2:	f0 e0       	ldi	r31, 0x00	; 0
    23f4:	8a 81       	ldd	r24, Y+2	; 0x02
    23f6:	80 83       	st	Z, r24
    23f8:	04 c0       	rjmp	.+8      	; 0x2402 <GPIO_setupPortDirection+0x7a>
			break;

		case PORTD_ID:
			DDRD = a_direction;
    23fa:	e1 e3       	ldi	r30, 0x31	; 49
    23fc:	f0 e0       	ldi	r31, 0x00	; 0
    23fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2400:	80 83       	st	Z, r24
			break;
		}
	}
}
    2402:	0f 90       	pop	r0
    2404:	0f 90       	pop	r0
    2406:	0f 90       	pop	r0
    2408:	0f 90       	pop	r0
    240a:	cf 91       	pop	r28
    240c:	df 91       	pop	r29
    240e:	08 95       	ret

00002410 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 a_portNum, uint8 a_value)
{
    2410:	df 93       	push	r29
    2412:	cf 93       	push	r28
    2414:	00 d0       	rcall	.+0      	; 0x2416 <GPIO_writePort+0x6>
    2416:	00 d0       	rcall	.+0      	; 0x2418 <GPIO_writePort+0x8>
    2418:	cd b7       	in	r28, 0x3d	; 61
    241a:	de b7       	in	r29, 0x3e	; 62
    241c:	89 83       	std	Y+1, r24	; 0x01
    241e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid and function will not handle the request.
	 */
	if(a_portNum >= NUM_OF_PORTS)
    2420:	89 81       	ldd	r24, Y+1	; 0x01
    2422:	84 30       	cpi	r24, 0x04	; 4
    2424:	90 f5       	brcc	.+100    	; 0x248a <GPIO_writePort+0x7a>
		/*Do Nothing*/
	}
	else
	{
		/*Write the port value as required*/
		switch(a_portNum)
    2426:	89 81       	ldd	r24, Y+1	; 0x01
    2428:	28 2f       	mov	r18, r24
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	3c 83       	std	Y+4, r19	; 0x04
    242e:	2b 83       	std	Y+3, r18	; 0x03
    2430:	8b 81       	ldd	r24, Y+3	; 0x03
    2432:	9c 81       	ldd	r25, Y+4	; 0x04
    2434:	81 30       	cpi	r24, 0x01	; 1
    2436:	91 05       	cpc	r25, r1
    2438:	d1 f0       	breq	.+52     	; 0x246e <GPIO_writePort+0x5e>
    243a:	2b 81       	ldd	r18, Y+3	; 0x03
    243c:	3c 81       	ldd	r19, Y+4	; 0x04
    243e:	22 30       	cpi	r18, 0x02	; 2
    2440:	31 05       	cpc	r19, r1
    2442:	2c f4       	brge	.+10     	; 0x244e <GPIO_writePort+0x3e>
    2444:	8b 81       	ldd	r24, Y+3	; 0x03
    2446:	9c 81       	ldd	r25, Y+4	; 0x04
    2448:	00 97       	sbiw	r24, 0x00	; 0
    244a:	61 f0       	breq	.+24     	; 0x2464 <GPIO_writePort+0x54>
    244c:	1e c0       	rjmp	.+60     	; 0x248a <GPIO_writePort+0x7a>
    244e:	2b 81       	ldd	r18, Y+3	; 0x03
    2450:	3c 81       	ldd	r19, Y+4	; 0x04
    2452:	22 30       	cpi	r18, 0x02	; 2
    2454:	31 05       	cpc	r19, r1
    2456:	81 f0       	breq	.+32     	; 0x2478 <GPIO_writePort+0x68>
    2458:	8b 81       	ldd	r24, Y+3	; 0x03
    245a:	9c 81       	ldd	r25, Y+4	; 0x04
    245c:	83 30       	cpi	r24, 0x03	; 3
    245e:	91 05       	cpc	r25, r1
    2460:	81 f0       	breq	.+32     	; 0x2482 <GPIO_writePort+0x72>
    2462:	13 c0       	rjmp	.+38     	; 0x248a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = a_value;
    2464:	eb e3       	ldi	r30, 0x3B	; 59
    2466:	f0 e0       	ldi	r31, 0x00	; 0
    2468:	8a 81       	ldd	r24, Y+2	; 0x02
    246a:	80 83       	st	Z, r24
    246c:	0e c0       	rjmp	.+28     	; 0x248a <GPIO_writePort+0x7a>
			break;

		case PORTB_ID:
			PORTB = a_value;
    246e:	e8 e3       	ldi	r30, 0x38	; 56
    2470:	f0 e0       	ldi	r31, 0x00	; 0
    2472:	8a 81       	ldd	r24, Y+2	; 0x02
    2474:	80 83       	st	Z, r24
    2476:	09 c0       	rjmp	.+18     	; 0x248a <GPIO_writePort+0x7a>
			break;

		case PORTC_ID:
			PORTC = a_value;
    2478:	e5 e3       	ldi	r30, 0x35	; 53
    247a:	f0 e0       	ldi	r31, 0x00	; 0
    247c:	8a 81       	ldd	r24, Y+2	; 0x02
    247e:	80 83       	st	Z, r24
    2480:	04 c0       	rjmp	.+8      	; 0x248a <GPIO_writePort+0x7a>
			break;

		case PORTD_ID:
			PORTD = a_value;
    2482:	e2 e3       	ldi	r30, 0x32	; 50
    2484:	f0 e0       	ldi	r31, 0x00	; 0
    2486:	8a 81       	ldd	r24, Y+2	; 0x02
    2488:	80 83       	st	Z, r24
			break;
		}
	}
}
    248a:	0f 90       	pop	r0
    248c:	0f 90       	pop	r0
    248e:	0f 90       	pop	r0
    2490:	0f 90       	pop	r0
    2492:	cf 91       	pop	r28
    2494:	df 91       	pop	r29
    2496:	08 95       	ret

00002498 <GPIO_readPort>:
 * Description:
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 a_portNum)
{
    2498:	df 93       	push	r29
    249a:	cf 93       	push	r28
    249c:	00 d0       	rcall	.+0      	; 0x249e <GPIO_readPort+0x6>
    249e:	00 d0       	rcall	.+0      	; 0x24a0 <GPIO_readPort+0x8>
    24a0:	cd b7       	in	r28, 0x3d	; 61
    24a2:	de b7       	in	r29, 0x3e	; 62
    24a4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 pinValue = LOGIC_LOW;
    24a6:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number and return zero.
	 */
	if(a_portNum >= NUM_OF_PORTS)
    24a8:	8a 81       	ldd	r24, Y+2	; 0x02
    24aa:	84 30       	cpi	r24, 0x04	; 4
    24ac:	90 f5       	brcc	.+100    	; 0x2512 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/*Read the port value as required*/
		switch(a_portNum)
    24ae:	8a 81       	ldd	r24, Y+2	; 0x02
    24b0:	28 2f       	mov	r18, r24
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	3c 83       	std	Y+4, r19	; 0x04
    24b6:	2b 83       	std	Y+3, r18	; 0x03
    24b8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ba:	9c 81       	ldd	r25, Y+4	; 0x04
    24bc:	81 30       	cpi	r24, 0x01	; 1
    24be:	91 05       	cpc	r25, r1
    24c0:	d1 f0       	breq	.+52     	; 0x24f6 <GPIO_readPort+0x5e>
    24c2:	2b 81       	ldd	r18, Y+3	; 0x03
    24c4:	3c 81       	ldd	r19, Y+4	; 0x04
    24c6:	22 30       	cpi	r18, 0x02	; 2
    24c8:	31 05       	cpc	r19, r1
    24ca:	2c f4       	brge	.+10     	; 0x24d6 <GPIO_readPort+0x3e>
    24cc:	8b 81       	ldd	r24, Y+3	; 0x03
    24ce:	9c 81       	ldd	r25, Y+4	; 0x04
    24d0:	00 97       	sbiw	r24, 0x00	; 0
    24d2:	61 f0       	breq	.+24     	; 0x24ec <GPIO_readPort+0x54>
    24d4:	1e c0       	rjmp	.+60     	; 0x2512 <GPIO_readPort+0x7a>
    24d6:	2b 81       	ldd	r18, Y+3	; 0x03
    24d8:	3c 81       	ldd	r19, Y+4	; 0x04
    24da:	22 30       	cpi	r18, 0x02	; 2
    24dc:	31 05       	cpc	r19, r1
    24de:	81 f0       	breq	.+32     	; 0x2500 <GPIO_readPort+0x68>
    24e0:	8b 81       	ldd	r24, Y+3	; 0x03
    24e2:	9c 81       	ldd	r25, Y+4	; 0x04
    24e4:	83 30       	cpi	r24, 0x03	; 3
    24e6:	91 05       	cpc	r25, r1
    24e8:	81 f0       	breq	.+32     	; 0x250a <GPIO_readPort+0x72>
    24ea:	13 c0       	rjmp	.+38     	; 0x2512 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			pinValue = PINA;
    24ec:	e9 e3       	ldi	r30, 0x39	; 57
    24ee:	f0 e0       	ldi	r31, 0x00	; 0
    24f0:	80 81       	ld	r24, Z
    24f2:	89 83       	std	Y+1, r24	; 0x01
    24f4:	0e c0       	rjmp	.+28     	; 0x2512 <GPIO_readPort+0x7a>
			break;

		case PORTB_ID:
			pinValue = PINB;
    24f6:	e6 e3       	ldi	r30, 0x36	; 54
    24f8:	f0 e0       	ldi	r31, 0x00	; 0
    24fa:	80 81       	ld	r24, Z
    24fc:	89 83       	std	Y+1, r24	; 0x01
    24fe:	09 c0       	rjmp	.+18     	; 0x2512 <GPIO_readPort+0x7a>
			break;

		case PORTC_ID:
			pinValue = PINC;
    2500:	e3 e3       	ldi	r30, 0x33	; 51
    2502:	f0 e0       	ldi	r31, 0x00	; 0
    2504:	80 81       	ld	r24, Z
    2506:	89 83       	std	Y+1, r24	; 0x01
    2508:	04 c0       	rjmp	.+8      	; 0x2512 <GPIO_readPort+0x7a>
			break;

		case PORTD_ID:
			pinValue = PIND;
    250a:	e0 e3       	ldi	r30, 0x30	; 48
    250c:	f0 e0       	ldi	r31, 0x00	; 0
    250e:	80 81       	ld	r24, Z
    2510:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return pinValue;
    2512:	89 81       	ldd	r24, Y+1	; 0x01
}
    2514:	0f 90       	pop	r0
    2516:	0f 90       	pop	r0
    2518:	0f 90       	pop	r0
    251a:	0f 90       	pop	r0
    251c:	cf 91       	pop	r28
    251e:	df 91       	pop	r29
    2520:	08 95       	ret

00002522 <PWM_Timer0_Start>:
 * Setup the compare value based on the required input duty cycle
 * Setup the direction for OC0 as output pin through the GPIO driver.
 * The generated PWM signal frequency will be 500Hz to control the DC Motor speed.
 */
void PWM_Timer0_Start(uint8 a_dutyCyclePercent)
{
    2522:	0f 93       	push	r16
    2524:	1f 93       	push	r17
    2526:	df 93       	push	r29
    2528:	cf 93       	push	r28
    252a:	0f 92       	push	r0
    252c:	cd b7       	in	r28, 0x3d	; 61
    252e:	de b7       	in	r29, 0x3e	; 62
    2530:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = 0;   /*Set Timer Initial value*/
    2532:	e2 e5       	ldi	r30, 0x52	; 82
    2534:	f0 e0       	ldi	r31, 0x00	; 0
    2536:	10 82       	st	Z, r1

	OCR0  = (uint8)((MAX_VALUE_OF_TIMER0)*((float32)(a_dutyCyclePercent)/100));  /*Set Compare Value as a_dutyCycle is in percent*/
    2538:	0c e5       	ldi	r16, 0x5C	; 92
    253a:	10 e0       	ldi	r17, 0x00	; 0
    253c:	89 81       	ldd	r24, Y+1	; 0x01
    253e:	88 2f       	mov	r24, r24
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	a0 e0       	ldi	r26, 0x00	; 0
    2544:	b0 e0       	ldi	r27, 0x00	; 0
    2546:	bc 01       	movw	r22, r24
    2548:	cd 01       	movw	r24, r26
    254a:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    254e:	dc 01       	movw	r26, r24
    2550:	cb 01       	movw	r24, r22
    2552:	bc 01       	movw	r22, r24
    2554:	cd 01       	movw	r24, r26
    2556:	20 e0       	ldi	r18, 0x00	; 0
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	48 ec       	ldi	r20, 0xC8	; 200
    255c:	52 e4       	ldi	r21, 0x42	; 66
    255e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2562:	dc 01       	movw	r26, r24
    2564:	cb 01       	movw	r24, r22
    2566:	bc 01       	movw	r22, r24
    2568:	cd 01       	movw	r24, r26
    256a:	20 e0       	ldi	r18, 0x00	; 0
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	4f e7       	ldi	r20, 0x7F	; 127
    2570:	53 e4       	ldi	r21, 0x43	; 67
    2572:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2576:	dc 01       	movw	r26, r24
    2578:	cb 01       	movw	r24, r22
    257a:	bc 01       	movw	r22, r24
    257c:	cd 01       	movw	r24, r26
    257e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2582:	dc 01       	movw	r26, r24
    2584:	cb 01       	movw	r24, r22
    2586:	f8 01       	movw	r30, r16
    2588:	80 83       	st	Z, r24

	GPIO_setupPinDirection(OC0_PORT_ID,OC0_PIN_ID,PIN_OUTPUT);  /*Setup OC0 as output pin --> pin where the PWM signal is generated from MC.*/
    258a:	81 e0       	ldi	r24, 0x01	; 1
    258c:	63 e0       	ldi	r22, 0x03	; 3
    258e:	41 e0       	ldi	r20, 0x01	; 1
    2590:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <GPIO_setupPinDirection>
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    2594:	e3 e5       	ldi	r30, 0x53	; 83
    2596:	f0 e0       	ldi	r31, 0x00	; 0
    2598:	8a e6       	ldi	r24, 0x6A	; 106
    259a:	80 83       	st	Z, r24
}
    259c:	0f 90       	pop	r0
    259e:	cf 91       	pop	r28
    25a0:	df 91       	pop	r29
    25a2:	1f 91       	pop	r17
    25a4:	0f 91       	pop	r16
    25a6:	08 95       	ret

000025a8 <__vector_9>:
/*************************************************************************************************
                              Interrupt Service Routines
 *************************************************************************************************/
/*ISR of Timer1 overflow mode*/
ISR(TIMER1_OVF_vect)
{
    25a8:	1f 92       	push	r1
    25aa:	0f 92       	push	r0
    25ac:	0f b6       	in	r0, 0x3f	; 63
    25ae:	0f 92       	push	r0
    25b0:	11 24       	eor	r1, r1
    25b2:	2f 93       	push	r18
    25b4:	3f 93       	push	r19
    25b6:	4f 93       	push	r20
    25b8:	5f 93       	push	r21
    25ba:	6f 93       	push	r22
    25bc:	7f 93       	push	r23
    25be:	8f 93       	push	r24
    25c0:	9f 93       	push	r25
    25c2:	af 93       	push	r26
    25c4:	bf 93       	push	r27
    25c6:	ef 93       	push	r30
    25c8:	ff 93       	push	r31
    25ca:	df 93       	push	r29
    25cc:	cf 93       	push	r28
    25ce:	cd b7       	in	r28, 0x3d	; 61
    25d0:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    25d2:	80 91 7c 01 	lds	r24, 0x017C
    25d6:	90 91 7d 01 	lds	r25, 0x017D
    25da:	00 97       	sbiw	r24, 0x00	; 0
    25dc:	29 f0       	breq	.+10     	; 0x25e8 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application using pointer to function*/
		(*g_callBackPtr)();
    25de:	e0 91 7c 01 	lds	r30, 0x017C
    25e2:	f0 91 7d 01 	lds	r31, 0x017D
    25e6:	09 95       	icall
	}
}
    25e8:	cf 91       	pop	r28
    25ea:	df 91       	pop	r29
    25ec:	ff 91       	pop	r31
    25ee:	ef 91       	pop	r30
    25f0:	bf 91       	pop	r27
    25f2:	af 91       	pop	r26
    25f4:	9f 91       	pop	r25
    25f6:	8f 91       	pop	r24
    25f8:	7f 91       	pop	r23
    25fa:	6f 91       	pop	r22
    25fc:	5f 91       	pop	r21
    25fe:	4f 91       	pop	r20
    2600:	3f 91       	pop	r19
    2602:	2f 91       	pop	r18
    2604:	0f 90       	pop	r0
    2606:	0f be       	out	0x3f, r0	; 63
    2608:	0f 90       	pop	r0
    260a:	1f 90       	pop	r1
    260c:	18 95       	reti

0000260e <__vector_7>:


/*ISR of Timer1 compare mode of channel A*/
ISR(TIMER1_COMPA_vect)
{
    260e:	1f 92       	push	r1
    2610:	0f 92       	push	r0
    2612:	0f b6       	in	r0, 0x3f	; 63
    2614:	0f 92       	push	r0
    2616:	11 24       	eor	r1, r1
    2618:	2f 93       	push	r18
    261a:	3f 93       	push	r19
    261c:	4f 93       	push	r20
    261e:	5f 93       	push	r21
    2620:	6f 93       	push	r22
    2622:	7f 93       	push	r23
    2624:	8f 93       	push	r24
    2626:	9f 93       	push	r25
    2628:	af 93       	push	r26
    262a:	bf 93       	push	r27
    262c:	ef 93       	push	r30
    262e:	ff 93       	push	r31
    2630:	df 93       	push	r29
    2632:	cf 93       	push	r28
    2634:	cd b7       	in	r28, 0x3d	; 61
    2636:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2638:	80 91 7c 01 	lds	r24, 0x017C
    263c:	90 91 7d 01 	lds	r25, 0x017D
    2640:	00 97       	sbiw	r24, 0x00	; 0
    2642:	29 f0       	breq	.+10     	; 0x264e <__vector_7+0x40>
	{
		/* Call the Call Back function in the application using pointer to function*/
		(*g_callBackPtr)();
    2644:	e0 91 7c 01 	lds	r30, 0x017C
    2648:	f0 91 7d 01 	lds	r31, 0x017D
    264c:	09 95       	icall
	}
}
    264e:	cf 91       	pop	r28
    2650:	df 91       	pop	r29
    2652:	ff 91       	pop	r31
    2654:	ef 91       	pop	r30
    2656:	bf 91       	pop	r27
    2658:	af 91       	pop	r26
    265a:	9f 91       	pop	r25
    265c:	8f 91       	pop	r24
    265e:	7f 91       	pop	r23
    2660:	6f 91       	pop	r22
    2662:	5f 91       	pop	r21
    2664:	4f 91       	pop	r20
    2666:	3f 91       	pop	r19
    2668:	2f 91       	pop	r18
    266a:	0f 90       	pop	r0
    266c:	0f be       	out	0x3f, r0	; 63
    266e:	0f 90       	pop	r0
    2670:	1f 90       	pop	r1
    2672:	18 95       	reti

00002674 <TIMER1_init>:
/*
 * Description:
 * Function to initialize the Timer driver
 */
void TIMER1_init(const Timer1_ConfigType * Config_Ptr)
{
    2674:	df 93       	push	r29
    2676:	cf 93       	push	r28
    2678:	00 d0       	rcall	.+0      	; 0x267a <TIMER1_init+0x6>
    267a:	cd b7       	in	r28, 0x3d	; 61
    267c:	de b7       	in	r29, 0x3e	; 62
    267e:	9a 83       	std	Y+2, r25	; 0x02
    2680:	89 83       	std	Y+1, r24	; 0x01
	TCCR1A = (1<<FOC1A);
    2682:	ef e4       	ldi	r30, 0x4F	; 79
    2684:	f0 e0       	ldi	r31, 0x00	; 0
    2686:	88 e0       	ldi	r24, 0x08	; 8
    2688:	80 83       	st	Z, r24

	/* put initial value of timer1 in TCNT1 */
	TCNT1 = Config_Ptr->initial_value;
    268a:	ac e4       	ldi	r26, 0x4C	; 76
    268c:	b0 e0       	ldi	r27, 0x00	; 0
    268e:	e9 81       	ldd	r30, Y+1	; 0x01
    2690:	fa 81       	ldd	r31, Y+2	; 0x02
    2692:	80 81       	ld	r24, Z
    2694:	91 81       	ldd	r25, Z+1	; 0x01
    2696:	11 96       	adiw	r26, 0x01	; 1
    2698:	9c 93       	st	X, r25
    269a:	8e 93       	st	-X, r24

	/* Insert first two bits of Timer1_Mode in first two bits in TCCR1A */
	TCCR1A = ( TCCR1A & 0xFC ) | ( Config_Ptr->mode & 0x03);
    269c:	af e4       	ldi	r26, 0x4F	; 79
    269e:	b0 e0       	ldi	r27, 0x00	; 0
    26a0:	ef e4       	ldi	r30, 0x4F	; 79
    26a2:	f0 e0       	ldi	r31, 0x00	; 0
    26a4:	80 81       	ld	r24, Z
    26a6:	98 2f       	mov	r25, r24
    26a8:	9c 7f       	andi	r25, 0xFC	; 252
    26aa:	e9 81       	ldd	r30, Y+1	; 0x01
    26ac:	fa 81       	ldd	r31, Y+2	; 0x02
    26ae:	85 81       	ldd	r24, Z+5	; 0x05
    26b0:	83 70       	andi	r24, 0x03	; 3
    26b2:	89 2b       	or	r24, r25
    26b4:	8c 93       	st	X, r24

	/*Insert bit-3 and bit-2 of Timer1_Mode in bit-4 and bit-3 bit in TCCR1B */
	TCCR1A = (TCCR1A & 0xE7) | ( (Config_Ptr->mode & 0x0C) <<1);
    26b6:	af e4       	ldi	r26, 0x4F	; 79
    26b8:	b0 e0       	ldi	r27, 0x00	; 0
    26ba:	ef e4       	ldi	r30, 0x4F	; 79
    26bc:	f0 e0       	ldi	r31, 0x00	; 0
    26be:	80 81       	ld	r24, Z
    26c0:	28 2f       	mov	r18, r24
    26c2:	27 7e       	andi	r18, 0xE7	; 231
    26c4:	e9 81       	ldd	r30, Y+1	; 0x01
    26c6:	fa 81       	ldd	r31, Y+2	; 0x02
    26c8:	85 81       	ldd	r24, Z+5	; 0x05
    26ca:	88 2f       	mov	r24, r24
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	8c 70       	andi	r24, 0x0C	; 12
    26d0:	90 70       	andi	r25, 0x00	; 0
    26d2:	88 0f       	add	r24, r24
    26d4:	99 1f       	adc	r25, r25
    26d6:	82 2b       	or	r24, r18
    26d8:	8c 93       	st	X, r24

	/*Insert timer1_prescalar value in first three bits of TCCR1A */
	TCCR1B = (TCCR1B & 0XF8) | ( Config_Ptr->prescaler & 0x07);
    26da:	ae e4       	ldi	r26, 0x4E	; 78
    26dc:	b0 e0       	ldi	r27, 0x00	; 0
    26de:	ee e4       	ldi	r30, 0x4E	; 78
    26e0:	f0 e0       	ldi	r31, 0x00	; 0
    26e2:	80 81       	ld	r24, Z
    26e4:	98 2f       	mov	r25, r24
    26e6:	98 7f       	andi	r25, 0xF8	; 248
    26e8:	e9 81       	ldd	r30, Y+1	; 0x01
    26ea:	fa 81       	ldd	r31, Y+2	; 0x02
    26ec:	84 81       	ldd	r24, Z+4	; 0x04
    26ee:	87 70       	andi	r24, 0x07	; 7
    26f0:	89 2b       	or	r24, r25
    26f2:	8c 93       	st	X, r24

	/*
	 * put compare value of timer1 in OCR1A and enable OCIE1A for compare match
	 * interrupt, when working in CTC mode
	 */
	if(Config_Ptr->mode == COMPARE_MODE)
    26f4:	e9 81       	ldd	r30, Y+1	; 0x01
    26f6:	fa 81       	ldd	r31, Y+2	; 0x02
    26f8:	85 81       	ldd	r24, Z+5	; 0x05
    26fa:	81 30       	cpi	r24, 0x01	; 1
    26fc:	89 f4       	brne	.+34     	; 0x2720 <TIMER1_init+0xac>
	{
		OCR1A = Config_Ptr->compare_value;
    26fe:	aa e4       	ldi	r26, 0x4A	; 74
    2700:	b0 e0       	ldi	r27, 0x00	; 0
    2702:	e9 81       	ldd	r30, Y+1	; 0x01
    2704:	fa 81       	ldd	r31, Y+2	; 0x02
    2706:	82 81       	ldd	r24, Z+2	; 0x02
    2708:	93 81       	ldd	r25, Z+3	; 0x03
    270a:	11 96       	adiw	r26, 0x01	; 1
    270c:	9c 93       	st	X, r25
    270e:	8e 93       	st	-X, r24

		SET_BIT (TIMSK, OCIE1A);
    2710:	a9 e5       	ldi	r26, 0x59	; 89
    2712:	b0 e0       	ldi	r27, 0x00	; 0
    2714:	e9 e5       	ldi	r30, 0x59	; 89
    2716:	f0 e0       	ldi	r31, 0x00	; 0
    2718:	80 81       	ld	r24, Z
    271a:	80 61       	ori	r24, 0x10	; 16
    271c:	8c 93       	st	X, r24
    271e:	0c c0       	rjmp	.+24     	; 0x2738 <TIMER1_init+0xc4>
	}
	else if(Config_Ptr->mode == OVERFLOW_MODE)
    2720:	e9 81       	ldd	r30, Y+1	; 0x01
    2722:	fa 81       	ldd	r31, Y+2	; 0x02
    2724:	85 81       	ldd	r24, Z+5	; 0x05
    2726:	88 23       	and	r24, r24
    2728:	39 f4       	brne	.+14     	; 0x2738 <TIMER1_init+0xc4>
	{
		/* Enable overflow interrupt enable when working in normal mode */
		SET_BIT(TIMSK, TOIE1);
    272a:	a9 e5       	ldi	r26, 0x59	; 89
    272c:	b0 e0       	ldi	r27, 0x00	; 0
    272e:	e9 e5       	ldi	r30, 0x59	; 89
    2730:	f0 e0       	ldi	r31, 0x00	; 0
    2732:	80 81       	ld	r24, Z
    2734:	84 60       	ori	r24, 0x04	; 4
    2736:	8c 93       	st	X, r24
	}
	else
	{
		/*Do Nothing */
	}
}
    2738:	0f 90       	pop	r0
    273a:	0f 90       	pop	r0
    273c:	cf 91       	pop	r28
    273e:	df 91       	pop	r29
    2740:	08 95       	ret

00002742 <TIMER1_deInit>:
/*
 * Description:
 * Function to disable the Timer.
 */
void TIMER1_deInit(void)
{
    2742:	df 93       	push	r29
    2744:	cf 93       	push	r28
    2746:	cd b7       	in	r28, 0x3d	; 61
    2748:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR1A = 0;
    274a:	ef e4       	ldi	r30, 0x4F	; 79
    274c:	f0 e0       	ldi	r31, 0x00	; 0
    274e:	10 82       	st	Z, r1
	TCCR1B = 0;
    2750:	ee e4       	ldi	r30, 0x4E	; 78
    2752:	f0 e0       	ldi	r31, 0x00	; 0
    2754:	10 82       	st	Z, r1
	TCNT1  = 0;
    2756:	ec e4       	ldi	r30, 0x4C	; 76
    2758:	f0 e0       	ldi	r31, 0x00	; 0
    275a:	11 82       	std	Z+1, r1	; 0x01
    275c:	10 82       	st	Z, r1
	OCR1A  = 0;
    275e:	ea e4       	ldi	r30, 0x4A	; 74
    2760:	f0 e0       	ldi	r31, 0x00	; 0
    2762:	11 82       	std	Z+1, r1	; 0x01
    2764:	10 82       	st	Z, r1
	TIMSK &= 0xC3;  /*Disable Timer1 interrupts*/
    2766:	a9 e5       	ldi	r26, 0x59	; 89
    2768:	b0 e0       	ldi	r27, 0x00	; 0
    276a:	e9 e5       	ldi	r30, 0x59	; 89
    276c:	f0 e0       	ldi	r31, 0x00	; 0
    276e:	80 81       	ld	r24, Z
    2770:	83 7c       	andi	r24, 0xC3	; 195
    2772:	8c 93       	st	X, r24
}
    2774:	cf 91       	pop	r28
    2776:	df 91       	pop	r29
    2778:	08 95       	ret

0000277a <TIMER1_setCalleBack>:
/*
 * Description:
 * Function to set the Call Back function address.
 */
void TIMER1_setCalleBack(void(*a_ptr)(void))
{
    277a:	df 93       	push	r29
    277c:	cf 93       	push	r28
    277e:	00 d0       	rcall	.+0      	; 0x2780 <TIMER1_setCalleBack+0x6>
    2780:	cd b7       	in	r28, 0x3d	; 61
    2782:	de b7       	in	r29, 0x3e	; 62
    2784:	9a 83       	std	Y+2, r25	; 0x02
    2786:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    2788:	89 81       	ldd	r24, Y+1	; 0x01
    278a:	9a 81       	ldd	r25, Y+2	; 0x02
    278c:	90 93 7d 01 	sts	0x017D, r25
    2790:	80 93 7c 01 	sts	0x017C, r24
}
    2794:	0f 90       	pop	r0
    2796:	0f 90       	pop	r0
    2798:	cf 91       	pop	r28
    279a:	df 91       	pop	r29
    279c:	08 95       	ret

0000279e <TWI_init>:
/*
 * Description:
 * Function to initialize and enable the I2C module.
 */
void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    279e:	cf 92       	push	r12
    27a0:	df 92       	push	r13
    27a2:	ef 92       	push	r14
    27a4:	ff 92       	push	r15
    27a6:	0f 93       	push	r16
    27a8:	1f 93       	push	r17
    27aa:	df 93       	push	r29
    27ac:	cf 93       	push	r28
    27ae:	00 d0       	rcall	.+0      	; 0x27b0 <TWI_init+0x12>
    27b0:	cd b7       	in	r28, 0x3d	; 61
    27b2:	de b7       	in	r29, 0x3e	; 62
    27b4:	9a 83       	std	Y+2, r25	; 0x02
    27b6:	89 83       	std	Y+1, r24	; 0x01
	/*Calculate the value of stored in bit rate register TWBR depending on prescaler and F_CPU and the chosen bit rate */
    TWBR = (uint8) (((F_CPU /(float32) Config_Ptr->bit_rate) - 16)  / (2 * (4^Config_Ptr->prescaler)));
    27b8:	cc 24       	eor	r12, r12
    27ba:	dd 24       	eor	r13, r13
    27bc:	68 94       	set
    27be:	c5 f8       	bld	r12, 5
    27c0:	e9 81       	ldd	r30, Y+1	; 0x01
    27c2:	fa 81       	ldd	r31, Y+2	; 0x02
    27c4:	81 81       	ldd	r24, Z+1	; 0x01
    27c6:	88 2f       	mov	r24, r24
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	a0 e0       	ldi	r26, 0x00	; 0
    27cc:	b0 e0       	ldi	r27, 0x00	; 0
    27ce:	bc 01       	movw	r22, r24
    27d0:	cd 01       	movw	r24, r26
    27d2:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    27d6:	9b 01       	movw	r18, r22
    27d8:	ac 01       	movw	r20, r24
    27da:	60 e0       	ldi	r22, 0x00	; 0
    27dc:	74 e2       	ldi	r23, 0x24	; 36
    27de:	84 ef       	ldi	r24, 0xF4	; 244
    27e0:	9a e4       	ldi	r25, 0x4A	; 74
    27e2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    27e6:	dc 01       	movw	r26, r24
    27e8:	cb 01       	movw	r24, r22
    27ea:	bc 01       	movw	r22, r24
    27ec:	cd 01       	movw	r24, r26
    27ee:	20 e0       	ldi	r18, 0x00	; 0
    27f0:	30 e0       	ldi	r19, 0x00	; 0
    27f2:	40 e8       	ldi	r20, 0x80	; 128
    27f4:	51 e4       	ldi	r21, 0x41	; 65
    27f6:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    27fa:	dc 01       	movw	r26, r24
    27fc:	cb 01       	movw	r24, r22
    27fe:	7c 01       	movw	r14, r24
    2800:	8d 01       	movw	r16, r26
    2802:	e9 81       	ldd	r30, Y+1	; 0x01
    2804:	fa 81       	ldd	r31, Y+2	; 0x02
    2806:	92 81       	ldd	r25, Z+2	; 0x02
    2808:	84 e0       	ldi	r24, 0x04	; 4
    280a:	89 27       	eor	r24, r25
    280c:	88 2f       	mov	r24, r24
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	88 0f       	add	r24, r24
    2812:	99 1f       	adc	r25, r25
    2814:	aa 27       	eor	r26, r26
    2816:	97 fd       	sbrc	r25, 7
    2818:	a0 95       	com	r26
    281a:	ba 2f       	mov	r27, r26
    281c:	bc 01       	movw	r22, r24
    281e:	cd 01       	movw	r24, r26
    2820:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2824:	9b 01       	movw	r18, r22
    2826:	ac 01       	movw	r20, r24
    2828:	c8 01       	movw	r24, r16
    282a:	b7 01       	movw	r22, r14
    282c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2830:	dc 01       	movw	r26, r24
    2832:	cb 01       	movw	r24, r22
    2834:	bc 01       	movw	r22, r24
    2836:	cd 01       	movw	r24, r26
    2838:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    283c:	dc 01       	movw	r26, r24
    283e:	cb 01       	movw	r24, r22
    2840:	f6 01       	movw	r30, r12
    2842:	80 83       	st	Z, r24

    /*Insert the required value of prescaler bits (TWPS0:1) in TWSR register */
	TWSR = Config_Ptr->prescaler;
    2844:	a1 e2       	ldi	r26, 0x21	; 33
    2846:	b0 e0       	ldi	r27, 0x00	; 0
    2848:	e9 81       	ldd	r30, Y+1	; 0x01
    284a:	fa 81       	ldd	r31, Y+2	; 0x02
    284c:	82 81       	ldd	r24, Z+2	; 0x02
    284e:	8c 93       	st	X, r24
	
    /* Two Wire Bus address my address if any master device want to call me (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = Config_Ptr->address;
    2850:	a2 e2       	ldi	r26, 0x22	; 34
    2852:	b0 e0       	ldi	r27, 0x00	; 0
    2854:	e9 81       	ldd	r30, Y+1	; 0x01
    2856:	fa 81       	ldd	r31, Y+2	; 0x02
    2858:	80 81       	ld	r24, Z
    285a:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    285c:	e6 e5       	ldi	r30, 0x56	; 86
    285e:	f0 e0       	ldi	r31, 0x00	; 0
    2860:	84 e0       	ldi	r24, 0x04	; 4
    2862:	80 83       	st	Z, r24
}
    2864:	0f 90       	pop	r0
    2866:	0f 90       	pop	r0
    2868:	cf 91       	pop	r28
    286a:	df 91       	pop	r29
    286c:	1f 91       	pop	r17
    286e:	0f 91       	pop	r16
    2870:	ff 90       	pop	r15
    2872:	ef 90       	pop	r14
    2874:	df 90       	pop	r13
    2876:	cf 90       	pop	r12
    2878:	08 95       	ret

0000287a <TWI_start>:
/*
 * Description:
 * Function that master send the start bit and start communication.
 */
void TWI_start(void)
{
    287a:	df 93       	push	r29
    287c:	cf 93       	push	r28
    287e:	cd b7       	in	r28, 0x3d	; 61
    2880:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    2882:	e6 e5       	ldi	r30, 0x56	; 86
    2884:	f0 e0       	ldi	r31, 0x00	; 0
    2886:	84 ea       	ldi	r24, 0xA4	; 164
    2888:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    288a:	e6 e5       	ldi	r30, 0x56	; 86
    288c:	f0 e0       	ldi	r31, 0x00	; 0
    288e:	80 81       	ld	r24, Z
    2890:	88 23       	and	r24, r24
    2892:	dc f7       	brge	.-10     	; 0x288a <TWI_start+0x10>
}
    2894:	cf 91       	pop	r28
    2896:	df 91       	pop	r29
    2898:	08 95       	ret

0000289a <TWI_stop>:
/*
 * Description:
 * Function that master send the stop bit and end communication.
 */
void TWI_stop(void)
{
    289a:	df 93       	push	r29
    289c:	cf 93       	push	r28
    289e:	cd b7       	in	r28, 0x3d	; 61
    28a0:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    28a2:	e6 e5       	ldi	r30, 0x56	; 86
    28a4:	f0 e0       	ldi	r31, 0x00	; 0
    28a6:	84 e9       	ldi	r24, 0x94	; 148
    28a8:	80 83       	st	Z, r24
}
    28aa:	cf 91       	pop	r28
    28ac:	df 91       	pop	r29
    28ae:	08 95       	ret

000028b0 <TWI_writeByte>:
/*
 * Description:
 * Function to send byte to the I2C receiver.
 */
void TWI_writeByte(uint8 data)
{
    28b0:	df 93       	push	r29
    28b2:	cf 93       	push	r28
    28b4:	0f 92       	push	r0
    28b6:	cd b7       	in	r28, 0x3d	; 61
    28b8:	de b7       	in	r29, 0x3e	; 62
    28ba:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    28bc:	e3 e2       	ldi	r30, 0x23	; 35
    28be:	f0 e0       	ldi	r31, 0x00	; 0
    28c0:	89 81       	ldd	r24, Y+1	; 0x01
    28c2:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    28c4:	e6 e5       	ldi	r30, 0x56	; 86
    28c6:	f0 e0       	ldi	r31, 0x00	; 0
    28c8:	84 e8       	ldi	r24, 0x84	; 132
    28ca:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    28cc:	e6 e5       	ldi	r30, 0x56	; 86
    28ce:	f0 e0       	ldi	r31, 0x00	; 0
    28d0:	80 81       	ld	r24, Z
    28d2:	88 23       	and	r24, r24
    28d4:	dc f7       	brge	.-10     	; 0x28cc <TWI_writeByte+0x1c>
}
    28d6:	0f 90       	pop	r0
    28d8:	cf 91       	pop	r28
    28da:	df 91       	pop	r29
    28dc:	08 95       	ret

000028de <TWI_readByteWithACK>:
 * Description:
 * Function to receive byte from the I2C sender.
 * Then the receiver send an acknowledge (ACK) to the sender.
 */
uint8 TWI_readByteWithACK(void)
{
    28de:	df 93       	push	r29
    28e0:	cf 93       	push	r28
    28e2:	cd b7       	in	r28, 0x3d	; 61
    28e4:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    28e6:	e6 e5       	ldi	r30, 0x56	; 86
    28e8:	f0 e0       	ldi	r31, 0x00	; 0
    28ea:	84 ec       	ldi	r24, 0xC4	; 196
    28ec:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    28ee:	e6 e5       	ldi	r30, 0x56	; 86
    28f0:	f0 e0       	ldi	r31, 0x00	; 0
    28f2:	80 81       	ld	r24, Z
    28f4:	88 23       	and	r24, r24
    28f6:	dc f7       	brge	.-10     	; 0x28ee <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    28f8:	e3 e2       	ldi	r30, 0x23	; 35
    28fa:	f0 e0       	ldi	r31, 0x00	; 0
    28fc:	80 81       	ld	r24, Z
}
    28fe:	cf 91       	pop	r28
    2900:	df 91       	pop	r29
    2902:	08 95       	ret

00002904 <TWI_readByteWithNACK>:
 * Description:
 * Function to receive byte from the I2C.
 * But the receiver doesn't send an acknowledge (ACK) to the sender.
 */
uint8 TWI_readByteWithNACK(void)
{
    2904:	df 93       	push	r29
    2906:	cf 93       	push	r28
    2908:	cd b7       	in	r28, 0x3d	; 61
    290a:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    290c:	e6 e5       	ldi	r30, 0x56	; 86
    290e:	f0 e0       	ldi	r31, 0x00	; 0
    2910:	84 e8       	ldi	r24, 0x84	; 132
    2912:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2914:	e6 e5       	ldi	r30, 0x56	; 86
    2916:	f0 e0       	ldi	r31, 0x00	; 0
    2918:	80 81       	ld	r24, Z
    291a:	88 23       	and	r24, r24
    291c:	dc f7       	brge	.-10     	; 0x2914 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    291e:	e3 e2       	ldi	r30, 0x23	; 35
    2920:	f0 e0       	ldi	r31, 0x00	; 0
    2922:	80 81       	ld	r24, Z
}
    2924:	cf 91       	pop	r28
    2926:	df 91       	pop	r29
    2928:	08 95       	ret

0000292a <TWI_getStatus>:
/*
 * Description:
 * Function to get the statues of I2C module from TWSR register.
 */
uint8 TWI_getStatus(void)
{
    292a:	df 93       	push	r29
    292c:	cf 93       	push	r28
    292e:	0f 92       	push	r0
    2930:	cd b7       	in	r28, 0x3d	; 61
    2932:	de b7       	in	r29, 0x3e	; 62
    uint8 status;

    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    2934:	e1 e2       	ldi	r30, 0x21	; 33
    2936:	f0 e0       	ldi	r31, 0x00	; 0
    2938:	80 81       	ld	r24, Z
    293a:	88 7f       	andi	r24, 0xF8	; 248
    293c:	89 83       	std	Y+1, r24	; 0x01

    return status;
    293e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2940:	0f 90       	pop	r0
    2942:	cf 91       	pop	r28
    2944:	df 91       	pop	r29
    2946:	08 95       	ret

00002948 <UART_init>:
 * 1.Setup the frame format (number of data bits, parity bit, number of stop bit).
 * 2.Enable the UART.
 * 3.Setup the baud rate
 */
void UART_init(const Uart_ConfigType* Config_Ptr)
{
    2948:	df 93       	push	r29
    294a:	cf 93       	push	r28
    294c:	00 d0       	rcall	.+0      	; 0x294e <UART_init+0x6>
    294e:	00 d0       	rcall	.+0      	; 0x2950 <UART_init+0x8>
    2950:	cd b7       	in	r28, 0x3d	; 61
    2952:	de b7       	in	r29, 0x3e	; 62
    2954:	9c 83       	std	Y+4, r25	; 0x04
    2956:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrrValue = 0;  /*To store the value of UART baud rate register*/
    2958:	1a 82       	std	Y+2, r1	; 0x02
    295a:	19 82       	std	Y+1, r1	; 0x01

	/*U2X = 1 for double transmission speed mode*/
	UCSRA = (1<<U2X);
    295c:	eb e2       	ldi	r30, 0x2B	; 43
    295e:	f0 e0       	ldi	r31, 0x00	; 0
    2960:	82 e0       	ldi	r24, 0x02	; 2
    2962:	80 83       	st	Z, r24
	 * RXEN  = 1 receiver enable.
	 * TXEN  = 1 transmitter enable.
	 * Setup the UCSZ2 bit for data bit mode.
	 * RXB8 & TXB8 not used for 8-bit data mode.
	 ***************************************************************************/
	UCSRB = (1<<RXEN) | (1<< TXEN);
    2964:	ea e2       	ldi	r30, 0x2A	; 42
    2966:	f0 e0       	ldi	r31, 0x00	; 0
    2968:	88 e1       	ldi	r24, 0x18	; 24
    296a:	80 83       	st	Z, r24

	UCSRB = (UCSRB & 0xFB) | (Config_Ptr->bit_data & 0x04);
    296c:	aa e2       	ldi	r26, 0x2A	; 42
    296e:	b0 e0       	ldi	r27, 0x00	; 0
    2970:	ea e2       	ldi	r30, 0x2A	; 42
    2972:	f0 e0       	ldi	r31, 0x00	; 0
    2974:	80 81       	ld	r24, Z
    2976:	98 2f       	mov	r25, r24
    2978:	9b 7f       	andi	r25, 0xFB	; 251
    297a:	eb 81       	ldd	r30, Y+3	; 0x03
    297c:	fc 81       	ldd	r31, Y+4	; 0x04
    297e:	80 81       	ld	r24, Z
    2980:	84 70       	andi	r24, 0x04	; 4
    2982:	89 2b       	or	r24, r25
    2984:	8c 93       	st	X, r24
	 * Setup the UCSZ1:0 bits for data bit mode.
	 * Setup the UPM1:0 bits to chose the parity bit.
	 * Setup the USB bit to chose the number of stop bits.
	 * UCPOL = 0  used with the Synchronous operation only
	 ***************************************************************************/
	UCSRC = (1<<URSEL) ;
    2986:	e0 e4       	ldi	r30, 0x40	; 64
    2988:	f0 e0       	ldi	r31, 0x00	; 0
    298a:	80 e8       	ldi	r24, 0x80	; 128
    298c:	80 83       	st	Z, r24

	UCSRC = (UCSRC & 0xF9) | ((Config_Ptr->bit_data & 0x03)<<UCSZ0);
    298e:	a0 e4       	ldi	r26, 0x40	; 64
    2990:	b0 e0       	ldi	r27, 0x00	; 0
    2992:	e0 e4       	ldi	r30, 0x40	; 64
    2994:	f0 e0       	ldi	r31, 0x00	; 0
    2996:	80 81       	ld	r24, Z
    2998:	28 2f       	mov	r18, r24
    299a:	29 7f       	andi	r18, 0xF9	; 249
    299c:	eb 81       	ldd	r30, Y+3	; 0x03
    299e:	fc 81       	ldd	r31, Y+4	; 0x04
    29a0:	80 81       	ld	r24, Z
    29a2:	88 2f       	mov	r24, r24
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	83 70       	andi	r24, 0x03	; 3
    29a8:	90 70       	andi	r25, 0x00	; 0
    29aa:	88 0f       	add	r24, r24
    29ac:	99 1f       	adc	r25, r25
    29ae:	82 2b       	or	r24, r18
    29b0:	8c 93       	st	X, r24

	UCSRC = (UCSRC & 0xCF) | ((Config_Ptr->parity & 0x03)<<UPM0);
    29b2:	a0 e4       	ldi	r26, 0x40	; 64
    29b4:	b0 e0       	ldi	r27, 0x00	; 0
    29b6:	e0 e4       	ldi	r30, 0x40	; 64
    29b8:	f0 e0       	ldi	r31, 0x00	; 0
    29ba:	80 81       	ld	r24, Z
    29bc:	28 2f       	mov	r18, r24
    29be:	2f 7c       	andi	r18, 0xCF	; 207
    29c0:	eb 81       	ldd	r30, Y+3	; 0x03
    29c2:	fc 81       	ldd	r31, Y+4	; 0x04
    29c4:	81 81       	ldd	r24, Z+1	; 0x01
    29c6:	88 2f       	mov	r24, r24
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	83 70       	andi	r24, 0x03	; 3
    29cc:	90 70       	andi	r25, 0x00	; 0
    29ce:	82 95       	swap	r24
    29d0:	92 95       	swap	r25
    29d2:	90 7f       	andi	r25, 0xF0	; 240
    29d4:	98 27       	eor	r25, r24
    29d6:	80 7f       	andi	r24, 0xF0	; 240
    29d8:	98 27       	eor	r25, r24
    29da:	82 2b       	or	r24, r18
    29dc:	8c 93       	st	X, r24

	UCSRC = (UCSRC & 0xF7) | ((Config_Ptr->stop_bit & 0x01)<<USBS);
    29de:	a0 e4       	ldi	r26, 0x40	; 64
    29e0:	b0 e0       	ldi	r27, 0x00	; 0
    29e2:	e0 e4       	ldi	r30, 0x40	; 64
    29e4:	f0 e0       	ldi	r31, 0x00	; 0
    29e6:	80 81       	ld	r24, Z
    29e8:	28 2f       	mov	r18, r24
    29ea:	27 7f       	andi	r18, 0xF7	; 247
    29ec:	eb 81       	ldd	r30, Y+3	; 0x03
    29ee:	fc 81       	ldd	r31, Y+4	; 0x04
    29f0:	82 81       	ldd	r24, Z+2	; 0x02
    29f2:	88 2f       	mov	r24, r24
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	81 70       	andi	r24, 0x01	; 1
    29f8:	90 70       	andi	r25, 0x00	; 0
    29fa:	88 0f       	add	r24, r24
    29fc:	99 1f       	adc	r25, r25
    29fe:	88 0f       	add	r24, r24
    2a00:	99 1f       	adc	r25, r25
    2a02:	88 0f       	add	r24, r24
    2a04:	99 1f       	adc	r25, r25
    2a06:	82 2b       	or	r24, r18
    2a08:	8c 93       	st	X, r24



	/*Calculate the UBRR register value*/
	ubrrValue = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    2a0a:	eb 81       	ldd	r30, Y+3	; 0x03
    2a0c:	fc 81       	ldd	r31, Y+4	; 0x04
    2a0e:	83 81       	ldd	r24, Z+3	; 0x03
    2a10:	94 81       	ldd	r25, Z+4	; 0x04
    2a12:	a5 81       	ldd	r26, Z+5	; 0x05
    2a14:	b6 81       	ldd	r27, Z+6	; 0x06
    2a16:	88 0f       	add	r24, r24
    2a18:	99 1f       	adc	r25, r25
    2a1a:	aa 1f       	adc	r26, r26
    2a1c:	bb 1f       	adc	r27, r27
    2a1e:	88 0f       	add	r24, r24
    2a20:	99 1f       	adc	r25, r25
    2a22:	aa 1f       	adc	r26, r26
    2a24:	bb 1f       	adc	r27, r27
    2a26:	88 0f       	add	r24, r24
    2a28:	99 1f       	adc	r25, r25
    2a2a:	aa 1f       	adc	r26, r26
    2a2c:	bb 1f       	adc	r27, r27
    2a2e:	9c 01       	movw	r18, r24
    2a30:	ad 01       	movw	r20, r26
    2a32:	80 e0       	ldi	r24, 0x00	; 0
    2a34:	92 e1       	ldi	r25, 0x12	; 18
    2a36:	aa e7       	ldi	r26, 0x7A	; 122
    2a38:	b0 e0       	ldi	r27, 0x00	; 0
    2a3a:	bc 01       	movw	r22, r24
    2a3c:	cd 01       	movw	r24, r26
    2a3e:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <__udivmodsi4>
    2a42:	da 01       	movw	r26, r20
    2a44:	c9 01       	movw	r24, r18
    2a46:	01 97       	sbiw	r24, 0x01	; 1
    2a48:	9a 83       	std	Y+2, r25	; 0x02
    2a4a:	89 83       	std	Y+1, r24	; 0x01

	/*First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRL = ubrrValue;
    2a4c:	e9 e2       	ldi	r30, 0x29	; 41
    2a4e:	f0 e0       	ldi	r31, 0x00	; 0
    2a50:	89 81       	ldd	r24, Y+1	; 0x01
    2a52:	80 83       	st	Z, r24
	UBRRH = ubrrValue>>8;
    2a54:	e0 e4       	ldi	r30, 0x40	; 64
    2a56:	f0 e0       	ldi	r31, 0x00	; 0
    2a58:	89 81       	ldd	r24, Y+1	; 0x01
    2a5a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a5c:	89 2f       	mov	r24, r25
    2a5e:	99 27       	eor	r25, r25
    2a60:	80 83       	st	Z, r24
}
    2a62:	0f 90       	pop	r0
    2a64:	0f 90       	pop	r0
    2a66:	0f 90       	pop	r0
    2a68:	0f 90       	pop	r0
    2a6a:	cf 91       	pop	r28
    2a6c:	df 91       	pop	r29
    2a6e:	08 95       	ret

00002a70 <UART_sendByte>:
/*
 * Description:
 * Send byte to another UART device.
 */
void UART_sendByte(const uint8 a_data)
{
    2a70:	df 93       	push	r29
    2a72:	cf 93       	push	r28
    2a74:	0f 92       	push	r0
    2a76:	cd b7       	in	r28, 0x3d	; 61
    2a78:	de b7       	in	r29, 0x3e	; 62
    2a7a:	89 83       	std	Y+1, r24	; 0x01
	/*UDRE flag is set when the Tx buffer (UDR) is empty and ready for transmitting a new byte*/
	while(BIT_IS_CLEAR(UCSRA,UDRE)); /*Wait until this flag is set to avoid Data Overrun Error*/
    2a7c:	eb e2       	ldi	r30, 0x2B	; 43
    2a7e:	f0 e0       	ldi	r31, 0x00	; 0
    2a80:	80 81       	ld	r24, Z
    2a82:	88 2f       	mov	r24, r24
    2a84:	90 e0       	ldi	r25, 0x00	; 0
    2a86:	80 72       	andi	r24, 0x20	; 32
    2a88:	90 70       	andi	r25, 0x00	; 0
    2a8a:	00 97       	sbiw	r24, 0x00	; 0
    2a8c:	b9 f3       	breq	.-18     	; 0x2a7c <UART_sendByte+0xc>

	UDR = a_data;  /*Put the data in UDR register and it clear the UDRE flag automatically*/
    2a8e:	ec e2       	ldi	r30, 0x2C	; 44
    2a90:	f0 e0       	ldi	r31, 0x00	; 0
    2a92:	89 81       	ldd	r24, Y+1	; 0x01
    2a94:	80 83       	st	Z, r24
}
    2a96:	0f 90       	pop	r0
    2a98:	cf 91       	pop	r28
    2a9a:	df 91       	pop	r29
    2a9c:	08 95       	ret

00002a9e <UART_receiveByte>:
/*
 * Description:
 * Receive byte from another UART device.
 */
uint8 UART_receiveByte(void)
{
    2a9e:	df 93       	push	r29
    2aa0:	cf 93       	push	r28
    2aa2:	cd b7       	in	r28, 0x3d	; 61
    2aa4:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data completely*/
	while(BIT_IS_CLEAR(UCSRA,RXC)); /*Wait until this flag is set*/
    2aa6:	eb e2       	ldi	r30, 0x2B	; 43
    2aa8:	f0 e0       	ldi	r31, 0x00	; 0
    2aaa:	80 81       	ld	r24, Z
    2aac:	88 23       	and	r24, r24
    2aae:	dc f7       	brge	.-10     	; 0x2aa6 <UART_receiveByte+0x8>

	return UDR;  /*Read the received data and the flag will be cleared automatically*/
    2ab0:	ec e2       	ldi	r30, 0x2C	; 44
    2ab2:	f0 e0       	ldi	r31, 0x00	; 0
    2ab4:	80 81       	ld	r24, Z
}
    2ab6:	cf 91       	pop	r28
    2ab8:	df 91       	pop	r29
    2aba:	08 95       	ret

00002abc <UART_sendString>:
/*
 * Description:
 * Send string to another UART device.
 */
void UART_sendString(const uint8* Str_Ptr)
{
    2abc:	df 93       	push	r29
    2abe:	cf 93       	push	r28
    2ac0:	00 d0       	rcall	.+0      	; 0x2ac2 <UART_sendString+0x6>
    2ac2:	0f 92       	push	r0
    2ac4:	cd b7       	in	r28, 0x3d	; 61
    2ac6:	de b7       	in	r29, 0x3e	; 62
    2ac8:	9b 83       	std	Y+3, r25	; 0x03
    2aca:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2acc:	19 82       	std	Y+1, r1	; 0x01
    2ace:	0e c0       	rjmp	.+28     	; 0x2aec <UART_sendString+0x30>

	while(Str_Ptr[i] != '\0') /*Send the string until the \0 is reached*/
	{
		UART_sendByte(Str_Ptr[i]);
    2ad0:	89 81       	ldd	r24, Y+1	; 0x01
    2ad2:	28 2f       	mov	r18, r24
    2ad4:	30 e0       	ldi	r19, 0x00	; 0
    2ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad8:	9b 81       	ldd	r25, Y+3	; 0x03
    2ada:	fc 01       	movw	r30, r24
    2adc:	e2 0f       	add	r30, r18
    2ade:	f3 1f       	adc	r31, r19
    2ae0:	80 81       	ld	r24, Z
    2ae2:	0e 94 38 15 	call	0x2a70	; 0x2a70 <UART_sendByte>
		i++;
    2ae6:	89 81       	ldd	r24, Y+1	; 0x01
    2ae8:	8f 5f       	subi	r24, 0xFF	; 255
    2aea:	89 83       	std	Y+1, r24	; 0x01
 */
void UART_sendString(const uint8* Str_Ptr)
{
	uint8 i = 0;

	while(Str_Ptr[i] != '\0') /*Send the string until the \0 is reached*/
    2aec:	89 81       	ldd	r24, Y+1	; 0x01
    2aee:	28 2f       	mov	r18, r24
    2af0:	30 e0       	ldi	r19, 0x00	; 0
    2af2:	8a 81       	ldd	r24, Y+2	; 0x02
    2af4:	9b 81       	ldd	r25, Y+3	; 0x03
    2af6:	fc 01       	movw	r30, r24
    2af8:	e2 0f       	add	r30, r18
    2afa:	f3 1f       	adc	r31, r19
    2afc:	80 81       	ld	r24, Z
    2afe:	88 23       	and	r24, r24
    2b00:	39 f7       	brne	.-50     	; 0x2ad0 <UART_sendString+0x14>
	{
		UART_sendByte(Str_Ptr[i]);
		i++;
	}
}
    2b02:	0f 90       	pop	r0
    2b04:	0f 90       	pop	r0
    2b06:	0f 90       	pop	r0
    2b08:	cf 91       	pop	r28
    2b0a:	df 91       	pop	r29
    2b0c:	08 95       	ret

00002b0e <UART_receiveString>:
/*
 * Description:
 * Receive string (until the special character '#') from another UART device.
 */
void UART_receiveString(uint8* Str_Ptr)
{
    2b0e:	0f 93       	push	r16
    2b10:	1f 93       	push	r17
    2b12:	df 93       	push	r29
    2b14:	cf 93       	push	r28
    2b16:	00 d0       	rcall	.+0      	; 0x2b18 <UART_receiveString+0xa>
    2b18:	0f 92       	push	r0
    2b1a:	cd b7       	in	r28, 0x3d	; 61
    2b1c:	de b7       	in	r29, 0x3e	; 62
    2b1e:	9b 83       	std	Y+3, r25	; 0x03
    2b20:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2b22:	19 82       	std	Y+1, r1	; 0x01

	Str_Ptr[i] = UART_receiveByte();  /*Receive the first byte*/
    2b24:	89 81       	ldd	r24, Y+1	; 0x01
    2b26:	28 2f       	mov	r18, r24
    2b28:	30 e0       	ldi	r19, 0x00	; 0
    2b2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b2c:	9b 81       	ldd	r25, Y+3	; 0x03
    2b2e:	8c 01       	movw	r16, r24
    2b30:	02 0f       	add	r16, r18
    2b32:	13 1f       	adc	r17, r19
    2b34:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <UART_receiveByte>
    2b38:	f8 01       	movw	r30, r16
    2b3a:	80 83       	st	Z, r24
    2b3c:	0f c0       	rjmp	.+30     	; 0x2b5c <UART_receiveString+0x4e>

	while(Str_Ptr[i] != '#')  /*Receive the string until the # is reached*/
	{
		i++;
    2b3e:	89 81       	ldd	r24, Y+1	; 0x01
    2b40:	8f 5f       	subi	r24, 0xFF	; 255
    2b42:	89 83       	std	Y+1, r24	; 0x01
		Str_Ptr[i] = UART_receiveByte();
    2b44:	89 81       	ldd	r24, Y+1	; 0x01
    2b46:	28 2f       	mov	r18, r24
    2b48:	30 e0       	ldi	r19, 0x00	; 0
    2b4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b4c:	9b 81       	ldd	r25, Y+3	; 0x03
    2b4e:	8c 01       	movw	r16, r24
    2b50:	02 0f       	add	r16, r18
    2b52:	13 1f       	adc	r17, r19
    2b54:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <UART_receiveByte>
    2b58:	f8 01       	movw	r30, r16
    2b5a:	80 83       	st	Z, r24
{
	uint8 i = 0;

	Str_Ptr[i] = UART_receiveByte();  /*Receive the first byte*/

	while(Str_Ptr[i] != '#')  /*Receive the string until the # is reached*/
    2b5c:	89 81       	ldd	r24, Y+1	; 0x01
    2b5e:	28 2f       	mov	r18, r24
    2b60:	30 e0       	ldi	r19, 0x00	; 0
    2b62:	8a 81       	ldd	r24, Y+2	; 0x02
    2b64:	9b 81       	ldd	r25, Y+3	; 0x03
    2b66:	fc 01       	movw	r30, r24
    2b68:	e2 0f       	add	r30, r18
    2b6a:	f3 1f       	adc	r31, r19
    2b6c:	80 81       	ld	r24, Z
    2b6e:	83 32       	cpi	r24, 0x23	; 35
    2b70:	31 f7       	brne	.-52     	; 0x2b3e <UART_receiveString+0x30>
	{
		i++;
		Str_Ptr[i] = UART_receiveByte();
	}

	Str_Ptr[i]='\0';  /*After receiving the string replace # with \0*/
    2b72:	89 81       	ldd	r24, Y+1	; 0x01
    2b74:	28 2f       	mov	r18, r24
    2b76:	30 e0       	ldi	r19, 0x00	; 0
    2b78:	8a 81       	ldd	r24, Y+2	; 0x02
    2b7a:	9b 81       	ldd	r25, Y+3	; 0x03
    2b7c:	fc 01       	movw	r30, r24
    2b7e:	e2 0f       	add	r30, r18
    2b80:	f3 1f       	adc	r31, r19
    2b82:	10 82       	st	Z, r1
}
    2b84:	0f 90       	pop	r0
    2b86:	0f 90       	pop	r0
    2b88:	0f 90       	pop	r0
    2b8a:	cf 91       	pop	r28
    2b8c:	df 91       	pop	r29
    2b8e:	1f 91       	pop	r17
    2b90:	0f 91       	pop	r16
    2b92:	08 95       	ret

00002b94 <__udivmodsi4>:
    2b94:	a1 e2       	ldi	r26, 0x21	; 33
    2b96:	1a 2e       	mov	r1, r26
    2b98:	aa 1b       	sub	r26, r26
    2b9a:	bb 1b       	sub	r27, r27
    2b9c:	fd 01       	movw	r30, r26
    2b9e:	0d c0       	rjmp	.+26     	; 0x2bba <__udivmodsi4_ep>

00002ba0 <__udivmodsi4_loop>:
    2ba0:	aa 1f       	adc	r26, r26
    2ba2:	bb 1f       	adc	r27, r27
    2ba4:	ee 1f       	adc	r30, r30
    2ba6:	ff 1f       	adc	r31, r31
    2ba8:	a2 17       	cp	r26, r18
    2baa:	b3 07       	cpc	r27, r19
    2bac:	e4 07       	cpc	r30, r20
    2bae:	f5 07       	cpc	r31, r21
    2bb0:	20 f0       	brcs	.+8      	; 0x2bba <__udivmodsi4_ep>
    2bb2:	a2 1b       	sub	r26, r18
    2bb4:	b3 0b       	sbc	r27, r19
    2bb6:	e4 0b       	sbc	r30, r20
    2bb8:	f5 0b       	sbc	r31, r21

00002bba <__udivmodsi4_ep>:
    2bba:	66 1f       	adc	r22, r22
    2bbc:	77 1f       	adc	r23, r23
    2bbe:	88 1f       	adc	r24, r24
    2bc0:	99 1f       	adc	r25, r25
    2bc2:	1a 94       	dec	r1
    2bc4:	69 f7       	brne	.-38     	; 0x2ba0 <__udivmodsi4_loop>
    2bc6:	60 95       	com	r22
    2bc8:	70 95       	com	r23
    2bca:	80 95       	com	r24
    2bcc:	90 95       	com	r25
    2bce:	9b 01       	movw	r18, r22
    2bd0:	ac 01       	movw	r20, r24
    2bd2:	bd 01       	movw	r22, r26
    2bd4:	cf 01       	movw	r24, r30
    2bd6:	08 95       	ret

00002bd8 <__prologue_saves__>:
    2bd8:	2f 92       	push	r2
    2bda:	3f 92       	push	r3
    2bdc:	4f 92       	push	r4
    2bde:	5f 92       	push	r5
    2be0:	6f 92       	push	r6
    2be2:	7f 92       	push	r7
    2be4:	8f 92       	push	r8
    2be6:	9f 92       	push	r9
    2be8:	af 92       	push	r10
    2bea:	bf 92       	push	r11
    2bec:	cf 92       	push	r12
    2bee:	df 92       	push	r13
    2bf0:	ef 92       	push	r14
    2bf2:	ff 92       	push	r15
    2bf4:	0f 93       	push	r16
    2bf6:	1f 93       	push	r17
    2bf8:	cf 93       	push	r28
    2bfa:	df 93       	push	r29
    2bfc:	cd b7       	in	r28, 0x3d	; 61
    2bfe:	de b7       	in	r29, 0x3e	; 62
    2c00:	ca 1b       	sub	r28, r26
    2c02:	db 0b       	sbc	r29, r27
    2c04:	0f b6       	in	r0, 0x3f	; 63
    2c06:	f8 94       	cli
    2c08:	de bf       	out	0x3e, r29	; 62
    2c0a:	0f be       	out	0x3f, r0	; 63
    2c0c:	cd bf       	out	0x3d, r28	; 61
    2c0e:	09 94       	ijmp

00002c10 <__epilogue_restores__>:
    2c10:	2a 88       	ldd	r2, Y+18	; 0x12
    2c12:	39 88       	ldd	r3, Y+17	; 0x11
    2c14:	48 88       	ldd	r4, Y+16	; 0x10
    2c16:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c18:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c1a:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c1c:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c1e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c20:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c22:	b9 84       	ldd	r11, Y+9	; 0x09
    2c24:	c8 84       	ldd	r12, Y+8	; 0x08
    2c26:	df 80       	ldd	r13, Y+7	; 0x07
    2c28:	ee 80       	ldd	r14, Y+6	; 0x06
    2c2a:	fd 80       	ldd	r15, Y+5	; 0x05
    2c2c:	0c 81       	ldd	r16, Y+4	; 0x04
    2c2e:	1b 81       	ldd	r17, Y+3	; 0x03
    2c30:	aa 81       	ldd	r26, Y+2	; 0x02
    2c32:	b9 81       	ldd	r27, Y+1	; 0x01
    2c34:	ce 0f       	add	r28, r30
    2c36:	d1 1d       	adc	r29, r1
    2c38:	0f b6       	in	r0, 0x3f	; 63
    2c3a:	f8 94       	cli
    2c3c:	de bf       	out	0x3e, r29	; 62
    2c3e:	0f be       	out	0x3f, r0	; 63
    2c40:	cd bf       	out	0x3d, r28	; 61
    2c42:	ed 01       	movw	r28, r26
    2c44:	08 95       	ret

00002c46 <_exit>:
    2c46:	f8 94       	cli

00002c48 <__stop_program>:
    2c48:	ff cf       	rjmp	.-2      	; 0x2c48 <__stop_program>
